[
    {
        "name": "Image Sentiment Analysis",
        "description": "Analyzes images and categorizes them as positive, negative, or neutral using zero-shot learning.",
        "icon": "Image",
        "icon_bg_color": null,
        "gradient": "2",
        "data": {
            "edges": [
                {
                    "animated": false,
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "StructuredOutputComponent",
                            "id": "StructuredOutputComponent-a20pA",
                            "name": "structured_output",
                            "output_types": [
                                "Data"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "data",
                            "id": "ParseData-HAm0G",
                            "inputTypes": [
                                "Data"
                            ],
                            "type": "other"
                        }
                    },
                    "id": "reactflow__edge-StructuredOutputComponent-a20pA{\u0153dataType\u0153:\u0153StructuredOutputComponent\u0153,\u0153id\u0153:\u0153StructuredOutputComponent-a20pA\u0153,\u0153name\u0153:\u0153structured_output\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}-ParseData-HAm0G{\u0153fieldName\u0153:\u0153data\u0153,\u0153id\u0153:\u0153ParseData-HAm0G\u0153,\u0153inputTypes\u0153:[\u0153Data\u0153],\u0153type\u0153:\u0153other\u0153}",
                    "source": "StructuredOutputComponent-a20pA",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153StructuredOutputComponent\u0153, \u0153id\u0153: \u0153StructuredOutputComponent-a20pA\u0153, \u0153name\u0153: \u0153structured_output\u0153, \u0153output_types\u0153: [\u0153Data\u0153]}",
                    "target": "ParseData-HAm0G",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153data\u0153, \u0153id\u0153: \u0153ParseData-HAm0G\u0153, \u0153inputTypes\u0153: [\u0153Data\u0153], \u0153type\u0153: \u0153other\u0153}"
                },
                {
                    "animated": false,
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "ParseData",
                            "id": "ParseData-HAm0G",
                            "name": "text",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "input_value",
                            "id": "ChatOutput-wjprm",
                            "inputTypes": [
                                "Message"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "reactflow__edge-ParseData-HAm0G{\u0153dataType\u0153:\u0153ParseData\u0153,\u0153id\u0153:\u0153ParseData-HAm0G\u0153,\u0153name\u0153:\u0153text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-ChatOutput-wjprm{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153ChatOutput-wjprm\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "ParseData-HAm0G",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153ParseData\u0153, \u0153id\u0153: \u0153ParseData-HAm0G\u0153, \u0153name\u0153: \u0153text\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "ChatOutput-wjprm",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153input_value\u0153, \u0153id\u0153: \u0153ChatOutput-wjprm\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "data": {
                        "sourceHandle": {
                            "dataType": "ChatInput",
                            "id": "ChatInput-ufYDr",
                            "name": "message",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "input_value",
                            "id": "OpenAIModel-i45Zr",
                            "inputTypes": [
                                "Message"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "xy-edge__ChatInput-ufYDr{\u0153dataType\u0153:\u0153ChatInput\u0153,\u0153id\u0153:\u0153ChatInput-ufYDr\u0153,\u0153name\u0153:\u0153message\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-OpenAIModel-i45Zr{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153OpenAIModel-i45Zr\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "ChatInput-ufYDr",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153ChatInput\u0153, \u0153id\u0153: \u0153ChatInput-ufYDr\u0153, \u0153name\u0153: \u0153message\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "OpenAIModel-i45Zr",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153input_value\u0153, \u0153id\u0153: \u0153OpenAIModel-i45Zr\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "data": {
                        "sourceHandle": {
                            "dataType": "Prompt",
                            "id": "Prompt-aZBZD",
                            "name": "prompt",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "system_message",
                            "id": "OpenAIModel-i45Zr",
                            "inputTypes": [
                                "Message"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "xy-edge__Prompt-aZBZD{\u0153dataType\u0153:\u0153Prompt\u0153,\u0153id\u0153:\u0153Prompt-aZBZD\u0153,\u0153name\u0153:\u0153prompt\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-OpenAIModel-i45Zr{\u0153fieldName\u0153:\u0153system_message\u0153,\u0153id\u0153:\u0153OpenAIModel-i45Zr\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "Prompt-aZBZD",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153Prompt\u0153, \u0153id\u0153: \u0153Prompt-aZBZD\u0153, \u0153name\u0153: \u0153prompt\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "OpenAIModel-i45Zr",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153system_message\u0153, \u0153id\u0153: \u0153OpenAIModel-i45Zr\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "data": {
                        "sourceHandle": {
                            "dataType": "OpenAIModel",
                            "id": "OpenAIModel-i45Zr",
                            "name": "text_output",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "input_value",
                            "id": "StructuredOutputComponent-a20pA",
                            "inputTypes": [
                                "Message"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "xy-edge__OpenAIModel-i45Zr{\u0153dataType\u0153:\u0153OpenAIModel\u0153,\u0153id\u0153:\u0153OpenAIModel-i45Zr\u0153,\u0153name\u0153:\u0153text_output\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-StructuredOutputComponent-a20pA{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153StructuredOutputComponent-a20pA\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "OpenAIModel-i45Zr",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153OpenAIModel\u0153, \u0153id\u0153: \u0153OpenAIModel-i45Zr\u0153, \u0153name\u0153: \u0153text_output\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "StructuredOutputComponent-a20pA",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153input_value\u0153, \u0153id\u0153: \u0153StructuredOutputComponent-a20pA\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "data": {
                        "sourceHandle": {
                            "dataType": "OpenAIModel",
                            "id": "OpenAIModel-i45Zr",
                            "name": "model_output",
                            "output_types": [
                                "LanguageModel"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "llm",
                            "id": "StructuredOutputComponent-a20pA",
                            "inputTypes": [
                                "LanguageModel"
                            ],
                            "type": "other"
                        }
                    },
                    "id": "xy-edge__OpenAIModel-i45Zr{\u0153dataType\u0153:\u0153OpenAIModel\u0153,\u0153id\u0153:\u0153OpenAIModel-i45Zr\u0153,\u0153name\u0153:\u0153model_output\u0153,\u0153output_types\u0153:[\u0153LanguageModel\u0153]}-StructuredOutputComponent-a20pA{\u0153fieldName\u0153:\u0153llm\u0153,\u0153id\u0153:\u0153StructuredOutputComponent-a20pA\u0153,\u0153inputTypes\u0153:[\u0153LanguageModel\u0153],\u0153type\u0153:\u0153other\u0153}",
                    "source": "OpenAIModel-i45Zr",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153OpenAIModel\u0153, \u0153id\u0153: \u0153OpenAIModel-i45Zr\u0153, \u0153name\u0153: \u0153model_output\u0153, \u0153output_types\u0153: [\u0153LanguageModel\u0153]}",
                    "target": "StructuredOutputComponent-a20pA",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153llm\u0153, \u0153id\u0153: \u0153StructuredOutputComponent-a20pA\u0153, \u0153inputTypes\u0153: [\u0153LanguageModel\u0153], \u0153type\u0153: \u0153other\u0153}"
                }
            ],
            "nodes": [
                {
                    "data": {
                        "description": "Get chat inputs from the Playground.",
                        "display_name": "Chat Input",
                        "id": "ChatInput-ufYDr",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Get chat inputs from the Playground.",
                            "display_name": "Chat Input",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "input_value",
                                "should_store_message",
                                "sender",
                                "sender_name",
                                "session_id",
                                "files",
                                "background_color",
                                "chat_icon",
                                "text_color"
                            ],
                            "frozen": false,
                            "icon": "MessagesSquare",
                            "legacy": false,
                            "lf_version": "1.0.19.post2",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "message_response",
                                    "name": "message",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "background_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Background Color",
                                    "dynamic": false,
                                    "info": "The background color of the icon.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "background_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "chat_icon": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Icon",
                                    "dynamic": false,
                                    "info": "The icon of the message.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "chat_icon",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import (\n    DropdownInput,\n    FileInput,\n    MessageTextInput,\n    MultilineInput,\n    Output,\n)\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_USER,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatInput\"\n    minimized = True\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n            input_types=[],\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    async def message_response(self) -> Message:\n        background_color = self.background_color\n        text_color = self.text_color\n        icon = self.chat_icon\n\n        message = await Message.create(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n            properties={\n                \"background_color\": background_color,\n                \"text_color\": text_color,\n                \"icon\": icon,\n            },\n        )\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n"
                                },
                                "files": {
                                    "_input_type": "FileInput",
                                    "advanced": true,
                                    "display_name": "Files",
                                    "dynamic": false,
                                    "fileTypes": [
                                        "txt",
                                        "md",
                                        "mdx",
                                        "csv",
                                        "json",
                                        "yaml",
                                        "yml",
                                        "xml",
                                        "html",
                                        "htm",
                                        "pdf",
                                        "docx",
                                        "py",
                                        "sh",
                                        "sql",
                                        "js",
                                        "ts",
                                        "tsx",
                                        "jpg",
                                        "jpeg",
                                        "png",
                                        "bmp",
                                        "image"
                                    ],
                                    "file_path": "",
                                    "info": "Files to be sent with the message.",
                                    "list": true,
                                    "name": "files",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "file",
                                    "value": ""
                                },
                                "input_value": {
                                    "_input_type": "MultilineInput",
                                    "advanced": false,
                                    "display_name": "Text",
                                    "dynamic": false,
                                    "info": "Message to be passed as input.",
                                    "input_types": [],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "sender": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Sender Type",
                                    "dynamic": false,
                                    "info": "Type of sender.",
                                    "name": "sender",
                                    "options": [
                                        "Machine",
                                        "User"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "User"
                                },
                                "sender_name": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Sender Name",
                                    "dynamic": false,
                                    "info": "Name of the sender.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "sender_name",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "User"
                                },
                                "session_id": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Session ID",
                                    "dynamic": false,
                                    "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "session_id",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "should_store_message": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Store Messages",
                                    "dynamic": false,
                                    "info": "Store the message in the history.",
                                    "list": false,
                                    "name": "should_store_message",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "text_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Text Color",
                                    "dynamic": false,
                                    "info": "The text color of the name",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "text_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "ChatInput"
                    },
                    "dragging": false,
                    "height": 234,
                    "id": "ChatInput-ufYDr",
                    "measured": {
                        "height": 234,
                        "width": 360
                    },
                    "position": {
                        "x": 1258.8272095125978,
                        "y": 367.0048451335054
                    },
                    "positionAbsolute": {
                        "x": 1258.8272095125978,
                        "y": 367.0048451335054
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "description": "Display a chat message in the Playground.",
                        "display_name": "Chat Output",
                        "id": "ChatOutput-wjprm",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Display a chat message in the Playground.",
                            "display_name": "Chat Output",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "input_value",
                                "should_store_message",
                                "sender",
                                "sender_name",
                                "session_id",
                                "data_template",
                                "background_color",
                                "chat_icon",
                                "text_color"
                            ],
                            "frozen": false,
                            "icon": "MessagesSquare",
                            "legacy": false,
                            "lf_version": "1.0.19.post2",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "message_response",
                                    "name": "message",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "background_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Background Color",
                                    "dynamic": false,
                                    "info": "The background color of the icon.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "background_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "chat_icon": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Icon",
                                    "dynamic": false,
                                    "info": "The icon of the message.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "chat_icon",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, MessageInput, MessageTextInput, Output\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        MessageInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            source_dict[\"source\"] = source\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n        background_color = self.background_color\n        text_color = self.text_color\n        if self.chat_icon:\n            icon = self.chat_icon\n        message = self.input_value if isinstance(self.input_value, Message) else Message(text=self.input_value)\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n        message.properties.icon = icon\n        message.properties.background_color = background_color\n        message.properties.text_color = text_color\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n"
                                },
                                "data_template": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Data Template",
                                    "dynamic": false,
                                    "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "data_template",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "{text}"
                                },
                                "input_value": {
                                    "_input_type": "MessageInput",
                                    "advanced": false,
                                    "display_name": "Text",
                                    "dynamic": false,
                                    "info": "Message to be passed as output.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "sender": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Sender Type",
                                    "dynamic": false,
                                    "info": "Type of sender.",
                                    "name": "sender",
                                    "options": [
                                        "Machine",
                                        "User"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Machine"
                                },
                                "sender_name": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Sender Name",
                                    "dynamic": false,
                                    "info": "Name of the sender.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "sender_name",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "AI"
                                },
                                "session_id": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Session ID",
                                    "dynamic": false,
                                    "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "session_id",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "should_store_message": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Store Messages",
                                    "dynamic": false,
                                    "info": "Store the message in the history.",
                                    "list": false,
                                    "name": "should_store_message",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "text_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Text Color",
                                    "dynamic": false,
                                    "info": "The text color of the name",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "text_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "ChatOutput"
                    },
                    "dragging": false,
                    "height": 234,
                    "id": "ChatOutput-wjprm",
                    "measured": {
                        "height": 234,
                        "width": 360
                    },
                    "position": {
                        "x": 2742.72534045604,
                        "y": 681.9098282545469
                    },
                    "positionAbsolute": {
                        "x": 2742.72534045604,
                        "y": 681.9098282545469
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "id": "note-QyHO0",
                        "node": {
                            "description": "# Image Sentiment Analysis\nWelcome to the Image Sentiment Classifier - an AI tool for quick image sentiment analysis!\n\n## Instructions\n\n1. **Prepare Your Image**\n   - Image should be clear and visible\n\n2. **Upload Options**\n   - Open the Playground\n   - Click file attachment icon\n   - Or drag and drop into playground\n\n3. **Wait for Analysis**\n   - System will process the image\n   - Uses zero-shot learning\n   - Classification happens automatically\n\n4. **Review Results**\n   - Get classification: Positive/Negative/Neutral\n   - Review confidence level\n   - Check reasoning if provided\n\n5. **Expected Classifications**\n   - Positive: Happy scenes, smiles, celebrations\n   - Negative: Sad scenes, problems, conflicts\n   - Neutral: Objects, landscapes, neutral scenes\n\nRemember: The clearer the image, the more accurate the classification! \ud83d\udcf8\u2728",
                            "display_name": "",
                            "documentation": "",
                            "template": {}
                        },
                        "type": "note"
                    },
                    "dragging": false,
                    "height": 583,
                    "id": "note-QyHO0",
                    "measured": {
                        "height": 583,
                        "width": 328
                    },
                    "position": {
                        "x": 791.7294511578832,
                        "y": 340.1333942936967
                    },
                    "positionAbsolute": {
                        "x": 791.7294511578832,
                        "y": 340.1333942936967
                    },
                    "resizing": false,
                    "selected": false,
                    "style": {
                        "height": 583,
                        "width": 436
                    },
                    "type": "noteNode",
                    "width": 436
                },
                {
                    "data": {
                        "description": "Transforms LLM responses into **structured data formats**. Ideal for extracting specific information or creating consistent outputs.",
                        "display_name": "Structured Output",
                        "id": "StructuredOutputComponent-a20pA",
                        "node": {
                            "base_classes": [
                                "Data"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Transforms LLM responses into **structured data formats**. Ideal for extracting specific information or creating consistent outputs.",
                            "display_name": "Structured Output",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "llm",
                                "input_value",
                                "schema_name",
                                "output_schema",
                                "multiple"
                            ],
                            "frozen": false,
                            "icon": "braces",
                            "legacy": false,
                            "lf_version": "1.0.19.post2",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "cache": true,
                                    "display_name": "Structured Output",
                                    "method": "build_structured_output",
                                    "name": "structured_output",
                                    "selected": "Data",
                                    "types": [
                                        "Data"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from typing import TYPE_CHECKING, cast\n\nfrom pydantic import BaseModel, Field, create_model\n\nfrom langflow.base.models.chat_result import get_chat_result\nfrom langflow.custom import Component\nfrom langflow.helpers.base_model import build_model_from_schema\nfrom langflow.io import BoolInput, HandleInput, MessageTextInput, Output, StrInput, TableInput\nfrom langflow.schema.data import Data\n\nif TYPE_CHECKING:\n    from langflow.field_typing.constants import LanguageModel\n\n\nclass StructuredOutputComponent(Component):\n    display_name = \"Structured Output\"\n    description = (\n        \"Transforms LLM responses into **structured data formats**. Ideal for extracting specific information \"\n        \"or creating consistent outputs.\"\n    )\n    icon = \"braces\"\n\n    inputs = [\n        HandleInput(\n            name=\"llm\",\n            display_name=\"Language Model\",\n            info=\"The language model to use to generate the structured output.\",\n            input_types=[\"LanguageModel\"],\n        ),\n        MessageTextInput(name=\"input_value\", display_name=\"Input message\"),\n        StrInput(\n            name=\"schema_name\",\n            display_name=\"Schema Name\",\n            info=\"Provide a name for the output data schema.\",\n        ),\n        TableInput(\n            name=\"output_schema\",\n            display_name=\"Output Schema\",\n            info=\"Define the structure and data types for the model's output.\",\n            table_schema=[\n                {\n                    \"name\": \"name\",\n                    \"display_name\": \"Name\",\n                    \"type\": \"str\",\n                    \"description\": \"Specify the name of the output field.\",\n                    \"default\": \"field\",\n                },\n                {\n                    \"name\": \"description\",\n                    \"display_name\": \"Description\",\n                    \"type\": \"str\",\n                    \"description\": \"Describe the purpose of the output field.\",\n                    \"default\": \"description of field\",\n                },\n                {\n                    \"name\": \"type\",\n                    \"display_name\": \"Type\",\n                    \"type\": \"str\",\n                    \"description\": (\n                        \"Indicate the data type of the output field (e.g., str, int, float, bool, list, dict).\"\n                    ),\n                    \"default\": \"text\",\n                },\n                {\n                    \"name\": \"multiple\",\n                    \"display_name\": \"Multiple\",\n                    \"type\": \"boolean\",\n                    \"description\": \"Set to True if this output field should be a list of the specified type.\",\n                    \"default\": \"False\",\n                },\n            ],\n            value=[{\"name\": \"field\", \"description\": \"description of field\", \"type\": \"text\", \"multiple\": \"False\"}],\n        ),\n        BoolInput(\n            name=\"multiple\",\n            display_name=\"Generate Multiple\",\n            info=\"Set to True if the model should generate a list of outputs instead of a single output.\",\n        ),\n    ]\n\n    outputs = [\n        Output(name=\"structured_output\", display_name=\"Structured Output\", method=\"build_structured_output\"),\n    ]\n\n    def build_structured_output(self) -> Data:\n        if not hasattr(self.llm, \"with_structured_output\"):\n            msg = \"Language model does not support structured output.\"\n            raise TypeError(msg)\n        if not self.output_schema:\n            msg = \"Output schema cannot be empty\"\n            raise ValueError(msg)\n\n        output_model_ = build_model_from_schema(self.output_schema)\n        if self.multiple:\n            output_model = create_model(\n                self.schema_name,\n                objects=(list[output_model_], Field(description=f\"A list of {self.schema_name}.\")),  # type: ignore[valid-type]\n            )\n        else:\n            output_model = output_model_\n        try:\n            llm_with_structured_output = cast(\"LanguageModel\", self.llm).with_structured_output(schema=output_model)  # type: ignore[valid-type, attr-defined]\n\n        except NotImplementedError as exc:\n            msg = f\"{self.llm.__class__.__name__} does not support structured output.\"\n            raise TypeError(msg) from exc\n        config_dict = {\n            \"run_name\": self.display_name,\n            \"project_name\": self.get_project_name(),\n            \"callbacks\": self.get_langchain_callbacks(),\n        }\n        output = get_chat_result(runnable=llm_with_structured_output, input_value=self.input_value, config=config_dict)\n        if isinstance(output, BaseModel):\n            output_dict = output.model_dump()\n        else:\n            msg = f\"Output should be a Pydantic BaseModel, got {type(output)} ({output})\"\n            raise TypeError(msg)\n        return Data(data=output_dict)\n"
                                },
                                "input_value": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": false,
                                    "display_name": "Input message",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "llm": {
                                    "_input_type": "HandleInput",
                                    "advanced": false,
                                    "display_name": "Language Model",
                                    "dynamic": false,
                                    "info": "The language model to use to generate the structured output.",
                                    "input_types": [
                                        "LanguageModel"
                                    ],
                                    "list": false,
                                    "name": "llm",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "other",
                                    "value": ""
                                },
                                "multiple": {
                                    "_input_type": "BoolInput",
                                    "advanced": false,
                                    "display_name": "Generate Multiple",
                                    "dynamic": false,
                                    "info": "Set to True if the model should generate a list of outputs instead of a single output.",
                                    "list": false,
                                    "name": "multiple",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "output_schema": {
                                    "_input_type": "TableInput",
                                    "advanced": false,
                                    "display_name": "Output Schema",
                                    "dynamic": false,
                                    "info": "Define the structure and data types for the model's output.",
                                    "is_list": true,
                                    "load_from_db": false,
                                    "name": "output_schema",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "table_schema": {
                                        "columns": [
                                            {
                                                "description": "Specify the name of the output field.",
                                                "display_name": "Name",
                                                "filterable": true,
                                                "formatter": "text",
                                                "name": "name",
                                                "sortable": true,
                                                "type": "text"
                                            },
                                            {
                                                "description": "Describe the purpose of the output field.",
                                                "display_name": "Description",
                                                "filterable": true,
                                                "formatter": "text",
                                                "name": "description",
                                                "sortable": true,
                                                "type": "text"
                                            },
                                            {
                                                "default": "text",
                                                "description": "Indicate the data type of the output field (e.g., str, int, float, bool, list, dict).",
                                                "display_name": "Type",
                                                "filterable": true,
                                                "formatter": "text",
                                                "name": "type",
                                                "sortable": true,
                                                "type": "text"
                                            },
                                            {
                                                "default": "False",
                                                "description": "Set to True if this output field should be a list of the specified type.",
                                                "display_name": "Multiple",
                                                "filterable": true,
                                                "formatter": "text",
                                                "name": "multiple",
                                                "sortable": true,
                                                "type": "boolean"
                                            }
                                        ]
                                    },
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "table",
                                    "value": [
                                        {
                                            "description": "A Positive|Negative value that represents the image.",
                                            "multiple": "False",
                                            "name": "sentiment",
                                            "type": "text"
                                        },
                                        {
                                            "description": "Brief Description of the image",
                                            "multiple": "False",
                                            "name": "description",
                                            "type": "text"
                                        }
                                    ]
                                },
                                "schema_name": {
                                    "_input_type": "StrInput",
                                    "advanced": false,
                                    "display_name": "Schema Name",
                                    "dynamic": false,
                                    "info": "Provide a name for the output data schema.",
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "schema_name",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "image_classification"
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "StructuredOutputComponent"
                    },
                    "dragging": false,
                    "height": 541,
                    "id": "StructuredOutputComponent-a20pA",
                    "measured": {
                        "height": 541,
                        "width": 360
                    },
                    "position": {
                        "x": 2029.441019694193,
                        "y": 414.7974622616549
                    },
                    "positionAbsolute": {
                        "x": 2029.441019694193,
                        "y": 414.7974622616549
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "id": "ParseData-HAm0G",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Convert Data into plain text following a specified template.",
                            "display_name": "Parse Data",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "data",
                                "template",
                                "sep"
                            ],
                            "frozen": false,
                            "icon": "message-square",
                            "legacy": false,
                            "lf_version": "1.0.19.post2",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "parse_data",
                                    "name": "text",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                },
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Data List",
                                    "method": "parse_data_as_list",
                                    "name": "data_list",
                                    "selected": "Data",
                                    "types": [
                                        "Data"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text, data_to_text_list\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Data to Message\"\n    description = \"Convert Data objects into Messages using any {field_name} from input data.\"\n    icon = \"message-square\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\", is_list=True, required=True),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n            required=True,\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"text\",\n            info=\"Data as a single Message, with each input Data separated by Separator\",\n            method=\"parse_data\",\n        ),\n        Output(\n            display_name=\"Data List\",\n            name=\"data_list\",\n            info=\"Data as a list of new Data, each having `text` formatted by Template\",\n            method=\"parse_data_as_list\",\n        ),\n    ]\n\n    def _clean_args(self) -> tuple[list[Data], str, str]:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n        sep = self.sep\n        return data, template, sep\n\n    def parse_data(self) -> Message:\n        data, template, sep = self._clean_args()\n        result_string = data_to_text(template, data, sep)\n        self.status = result_string\n        return Message(text=result_string)\n\n    def parse_data_as_list(self) -> list[Data]:\n        data, template, _ = self._clean_args()\n        text_list, data_list = data_to_text_list(template, data)\n        for item, text in zip(data_list, text_list, strict=True):\n            item.set_text(text)\n        self.status = data_list\n        return data_list\n"
                                },
                                "data": {
                                    "_input_type": "DataInput",
                                    "advanced": false,
                                    "display_name": "Data",
                                    "dynamic": false,
                                    "info": "The data to convert to text.",
                                    "input_types": [
                                        "Data"
                                    ],
                                    "list": true,
                                    "name": "data",
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "other",
                                    "value": ""
                                },
                                "sep": {
                                    "_input_type": "StrInput",
                                    "advanced": true,
                                    "display_name": "Separator",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "sep",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "\n"
                                },
                                "template": {
                                    "_input_type": "MultilineInput",
                                    "advanced": false,
                                    "display_name": "Template",
                                    "dynamic": false,
                                    "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "template",
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Sentiment: {sentiment} \n\nDescription: {description} "
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "ParseData"
                    },
                    "dragging": false,
                    "height": 302,
                    "id": "ParseData-HAm0G",
                    "measured": {
                        "height": 302,
                        "width": 360
                    },
                    "position": {
                        "x": 2389.490977317181,
                        "y": 646.9530981549555
                    },
                    "positionAbsolute": {
                        "x": 2389.490977317181,
                        "y": 646.9530981549555
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "description": "Create a prompt template with dynamic variables.",
                        "display_name": "Prompt",
                        "id": "Prompt-aZBZD",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {
                                "template": []
                            },
                            "description": "Create a prompt template with dynamic variables.",
                            "display_name": "Prompt",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "template"
                            ],
                            "frozen": false,
                            "icon": "prompts",
                            "legacy": false,
                            "lf_version": "1.0.19.post2",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Prompt Message",
                                    "method": "build_prompt",
                                    "name": "prompt",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import MessageTextInput, Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            tool_mode=True,\n            advanced=True,\n            info=\"A placeholder input for tool mode.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    async def update_frontend_node(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = await super().update_frontend_node(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n"
                                },
                                "template": {
                                    "_input_type": "PromptInput",
                                    "advanced": false,
                                    "display_name": "Template",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "template",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "type": "prompt",
                                    "value": "Classify the image into neutral, negative or positive. "
                                },
                                "tool_placeholder": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Tool Placeholder",
                                    "dynamic": false,
                                    "info": "A placeholder input for tool mode.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "tool_placeholder",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": true,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "Prompt"
                    },
                    "dragging": false,
                    "height": 260,
                    "id": "Prompt-aZBZD",
                    "measured": {
                        "height": 260,
                        "width": 360
                    },
                    "position": {
                        "x": 1262.0179832573751,
                        "y": 632.1360181124842
                    },
                    "positionAbsolute": {
                        "x": 1262.0179832573751,
                        "y": 632.1360181124842
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "id": "OpenAIModel-i45Zr",
                        "node": {
                            "base_classes": [
                                "LanguageModel",
                                "Message"
                            ],
                            "beta": false,
                            "category": "models",
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Generates text using OpenAI LLMs.",
                            "display_name": "OpenAI",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "input_value",
                                "system_message",
                                "stream",
                                "max_tokens",
                                "model_kwargs",
                                "json_mode",
                                "model_name",
                                "openai_api_base",
                                "api_key",
                                "temperature",
                                "seed"
                            ],
                            "frozen": false,
                            "icon": "OpenAI",
                            "key": "OpenAIModel",
                            "legacy": false,
                            "metadata": {},
                            "minimized": false,
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "text_response",
                                    "name": "text_output",
                                    "required_inputs": [],
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                },
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Language Model",
                                    "method": "build_model",
                                    "name": "model_output",
                                    "required_inputs": [
                                        "api_key"
                                    ],
                                    "selected": "LanguageModel",
                                    "types": [
                                        "LanguageModel"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "score": 0.14285714285714285,
                            "template": {
                                "_type": "Component",
                                "api_key": {
                                    "_input_type": "SecretStrInput",
                                    "advanced": false,
                                    "display_name": "OpenAI API Key",
                                    "dynamic": false,
                                    "info": "The OpenAI API Key to use for the OpenAI model.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "load_from_db": true,
                                    "name": "api_key",
                                    "password": true,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": "OPENAI_API_KEY"
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.openai_constants import OPENAI_MODEL_NAMES\nfrom langflow.field_typing import LanguageModel\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.inputs import BoolInput, DictInput, DropdownInput, IntInput, SecretStrInput, SliderInput, StrInput\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIModel\"\n\n    inputs = [\n        *LCModelComponent._base_inputs,\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            range_spec=RangeSpec(min=0, max=128000),\n        ),\n        DictInput(\n            name=\"model_kwargs\",\n            display_name=\"Model Kwargs\",\n            advanced=True,\n            info=\"Additional keyword arguments to pass to the model.\",\n        ),\n        BoolInput(\n            name=\"json_mode\",\n            display_name=\"JSON Mode\",\n            advanced=True,\n            info=\"If True, it will output JSON regardless of passing a schema.\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            advanced=False,\n            options=OPENAI_MODEL_NAMES,\n            value=OPENAI_MODEL_NAMES[0],\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. \"\n            \"Defaults to https://api.openai.com/v1. \"\n            \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n            required=True,\n        ),\n        SliderInput(\n            name=\"temperature\", display_name=\"Temperature\", value=0.1, range_spec=RangeSpec(min=0, max=2, step=0.01)\n        ),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        openai_api_key = self.api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\n        json_mode = self.json_mode\n        seed = self.seed\n\n        api_key = SecretStr(openai_api_key).get_secret_value() if openai_api_key else None\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature if temperature is not None else 0.1,\n            seed=seed,\n        )\n        if json_mode:\n            output = output.bind(response_format={\"type\": \"json_object\"})\n\n        return output\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"Get a message from an OpenAI exception.\n\n        Args:\n            e (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return None\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")\n            if message:\n                return message\n        return None\n"
                                },
                                "input_value": {
                                    "_input_type": "MessageInput",
                                    "advanced": false,
                                    "display_name": "Input",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "json_mode": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "JSON Mode",
                                    "dynamic": false,
                                    "info": "If True, it will output JSON regardless of passing a schema.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "json_mode",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "max_tokens": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Max Tokens",
                                    "dynamic": false,
                                    "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "max_tokens",
                                    "placeholder": "",
                                    "range_spec": {
                                        "max": 128000,
                                        "min": 0,
                                        "step": 0.1,
                                        "step_type": "float"
                                    },
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": ""
                                },
                                "model_kwargs": {
                                    "_input_type": "DictInput",
                                    "advanced": true,
                                    "display_name": "Model Kwargs",
                                    "dynamic": false,
                                    "info": "Additional keyword arguments to pass to the model.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "model_kwargs",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "type": "dict",
                                    "value": {}
                                },
                                "model_name": {
                                    "_input_type": "DropdownInput",
                                    "advanced": false,
                                    "combobox": false,
                                    "dialog_inputs": {},
                                    "display_name": "Model Name",
                                    "dynamic": false,
                                    "info": "",
                                    "name": "model_name",
                                    "options": [
                                        "gpt-4o-mini",
                                        "gpt-4o",
                                        "gpt-4-turbo",
                                        "gpt-4-turbo-preview",
                                        "gpt-4",
                                        "gpt-3.5-turbo",
                                        "gpt-3.5-turbo-0125"
                                    ],
                                    "options_metadata": [],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "gpt-4o-mini"
                                },
                                "openai_api_base": {
                                    "_input_type": "StrInput",
                                    "advanced": true,
                                    "display_name": "OpenAI API Base",
                                    "dynamic": false,
                                    "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "name": "openai_api_base",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "seed": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Seed",
                                    "dynamic": false,
                                    "info": "The seed controls the reproducibility of the job.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "seed",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 1
                                },
                                "stream": {
                                    "_input_type": "BoolInput",
                                    "advanced": false,
                                    "display_name": "Stream",
                                    "dynamic": false,
                                    "info": "Stream the response from the model. Streaming works only in Chat.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "stream",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "system_message": {
                                    "_input_type": "MultilineInput",
                                    "advanced": false,
                                    "display_name": "System Message",
                                    "dynamic": false,
                                    "info": "System message to pass to the model.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "system_message",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "temperature": {
                                    "_input_type": "SliderInput",
                                    "advanced": false,
                                    "display_name": "Temperature",
                                    "dynamic": false,
                                    "info": "",
                                    "max_label": "",
                                    "max_label_icon": "",
                                    "min_label": "",
                                    "min_label_icon": "",
                                    "name": "temperature",
                                    "placeholder": "",
                                    "range_spec": {
                                        "max": 2,
                                        "min": 0,
                                        "step": 0.01,
                                        "step_type": "float"
                                    },
                                    "required": false,
                                    "show": true,
                                    "slider_buttons": false,
                                    "slider_buttons_options": [],
                                    "slider_input": false,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "type": "slider",
                                    "value": 0.1
                                }
                            },
                            "tool_mode": false
                        },
                        "showNode": true,
                        "type": "OpenAIModel"
                    },
                    "dragging": false,
                    "id": "OpenAIModel-i45Zr",
                    "measured": {
                        "height": 734,
                        "width": 360
                    },
                    "position": {
                        "x": 1638.1662423437713,
                        "y": 374.7199736704084
                    },
                    "selected": false,
                    "type": "genericNode"
                }
            ],
            "viewport": {
                "x": -426.91879919031885,
                "y": 21.85679755101154,
                "zoom": 0.6313688898572775
            }
        },
        "is_component": false,
        "updated_at": "2025-01-25T04:58:24+00:00",
        "webhook": false,
        "endpoint_name": null,
        "tags": [
            "classification"
        ],
        "locked": false,
        "id": "aa1c641d-21b7-4850-a3cb-f2705ac97388",
        "user_id": null,
        "folder_id": "c54584e6-88eb-4ac0-b70c-68aee37fdce2"
    },
    {
        "name": "SaaS Pricing",
        "description": "Calculate SaaS subscription price based on costs, profit margin, and subscribers using step-by-step method and Chain-of-Thought prompting. ",
        "icon": "calculator",
        "icon_bg_color": null,
        "gradient": "3",
        "data": {
            "edges": [
                {
                    "animated": false,
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "Agent",
                            "id": "Agent-wKeIr",
                            "name": "response",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "input_value",
                            "id": "ChatOutput-BabAw",
                            "inputTypes": [
                                "Message"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "reactflow__edge-Agent-wKeIr{\u0153dataType\u0153:\u0153Agent\u0153,\u0153id\u0153:\u0153Agent-wKeIr\u0153,\u0153name\u0153:\u0153response\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-ChatOutput-BabAw{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153ChatOutput-BabAw\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "Agent-wKeIr",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153Agent\u0153, \u0153id\u0153: \u0153Agent-wKeIr\u0153, \u0153name\u0153: \u0153response\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "ChatOutput-BabAw",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153input_value\u0153, \u0153id\u0153: \u0153ChatOutput-BabAw\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "animated": false,
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "Prompt",
                            "id": "Prompt-TXNvz",
                            "name": "prompt",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "input_value",
                            "id": "Agent-wKeIr",
                            "inputTypes": [
                                "Message"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "reactflow__edge-Prompt-TXNvz{\u0153dataType\u0153:\u0153Prompt\u0153,\u0153id\u0153:\u0153Prompt-TXNvz\u0153,\u0153name\u0153:\u0153prompt\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-Agent-wKeIr{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153Agent-wKeIr\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "Prompt-TXNvz",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153Prompt\u0153, \u0153id\u0153: \u0153Prompt-TXNvz\u0153, \u0153name\u0153: \u0153prompt\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "Agent-wKeIr",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153input_value\u0153, \u0153id\u0153: \u0153Agent-wKeIr\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "CalculatorComponent",
                            "id": "CalculatorComponent-btXJ9",
                            "name": "component_as_tool",
                            "output_types": [
                                "Tool"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "tools",
                            "id": "Agent-wKeIr",
                            "inputTypes": [
                                "Tool"
                            ],
                            "type": "other"
                        }
                    },
                    "id": "reactflow__edge-CalculatorComponent-btXJ9{\u0153dataType\u0153:\u0153CalculatorComponent\u0153,\u0153id\u0153:\u0153CalculatorComponent-btXJ9\u0153,\u0153name\u0153:\u0153component_as_tool\u0153,\u0153output_types\u0153:[\u0153Tool\u0153]}-Agent-wKeIr{\u0153fieldName\u0153:\u0153tools\u0153,\u0153id\u0153:\u0153Agent-wKeIr\u0153,\u0153inputTypes\u0153:[\u0153Tool\u0153],\u0153type\u0153:\u0153other\u0153}",
                    "source": "CalculatorComponent-btXJ9",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153CalculatorComponent\u0153, \u0153id\u0153: \u0153CalculatorComponent-btXJ9\u0153, \u0153name\u0153: \u0153component_as_tool\u0153, \u0153output_types\u0153: [\u0153Tool\u0153]}",
                    "target": "Agent-wKeIr",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153tools\u0153, \u0153id\u0153: \u0153Agent-wKeIr\u0153, \u0153inputTypes\u0153: [\u0153Tool\u0153], \u0153type\u0153: \u0153other\u0153}"
                }
            ],
            "nodes": [
                {
                    "data": {
                        "description": "Create a prompt template with dynamic variables.",
                        "display_name": "Prompt",
                        "id": "Prompt-TXNvz",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {
                                "template": [
                                    "monthly_infrastructure_costs",
                                    "customer_support_cost",
                                    "continuous_development_cost",
                                    "desired_profit_margin",
                                    "estimated_subscribers"
                                ]
                            },
                            "description": "Create a prompt template with dynamic variables.",
                            "display_name": "Prompt",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "template"
                            ],
                            "frozen": false,
                            "icon": "prompts",
                            "legacy": false,
                            "lf_version": "1.0.19.post2",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Prompt Message",
                                    "method": "build_prompt",
                                    "name": "prompt",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import MessageTextInput, Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            tool_mode=True,\n            advanced=True,\n            info=\"A placeholder input for tool mode.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    async def update_frontend_node(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = await super().update_frontend_node(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n"
                                },
                                "continuous_development_cost": {
                                    "advanced": false,
                                    "display_name": "continuous_development_cost",
                                    "dynamic": false,
                                    "field_type": "str",
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "input_types": [
                                        "Message",
                                        "Text"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "continuous_development_cost",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": "3000"
                                },
                                "customer_support_cost": {
                                    "advanced": false,
                                    "display_name": "customer_support_cost",
                                    "dynamic": false,
                                    "field_type": "str",
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "input_types": [
                                        "Message",
                                        "Text"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "customer_support_cost",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": "1000"
                                },
                                "desired_profit_margin": {
                                    "advanced": false,
                                    "display_name": "desired_profit_margin",
                                    "dynamic": false,
                                    "field_type": "str",
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "input_types": [
                                        "Message",
                                        "Text"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "desired_profit_margin",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": "30"
                                },
                                "estimated_subscribers": {
                                    "advanced": false,
                                    "display_name": "estimated_subscribers",
                                    "dynamic": false,
                                    "field_type": "str",
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "input_types": [
                                        "Message",
                                        "Text"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "estimated_subscribers",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": "200"
                                },
                                "monthly_infrastructure_costs": {
                                    "advanced": false,
                                    "display_name": "monthly_infrastructure_costs",
                                    "dynamic": false,
                                    "field_type": "str",
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "input_types": [
                                        "Message",
                                        "Text"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "monthly_infrastructure_costs",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": "2000"
                                },
                                "template": {
                                    "_input_type": "PromptInput",
                                    "advanced": false,
                                    "display_name": "Template",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "template",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "type": "prompt",
                                    "value": "To calculate the monthly subscription price of the software based on the following data:\n\nMonthly infrastructure costs: ${monthly_infrastructure_costs}\nCustomer support: ${customer_support_cost}\nContinuous development: {continuous_development_cost}\nDesired profit margin: {desired_profit_margin}%\nEstimated number of subscribers: {estimated_subscribers}\n\nFollow the step to formulate the answer:\nFixed costs:\nProfit margin:\nTotal amount needed:\nPrice per subscriber:\nThe minimum subscription price per subscriber is:"
                                },
                                "tool_placeholder": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Tool Placeholder",
                                    "dynamic": false,
                                    "info": "A placeholder input for tool mode.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "tool_placeholder",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": true,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "Prompt"
                    },
                    "dragging": false,
                    "height": 693,
                    "id": "Prompt-TXNvz",
                    "measured": {
                        "height": 693,
                        "width": 360
                    },
                    "position": {
                        "x": 1349.861745038984,
                        "y": 347.90475109976467
                    },
                    "positionAbsolute": {
                        "x": 1349.861745038984,
                        "y": 347.90475109976467
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "description": "Display a chat message in the Playground.",
                        "display_name": "Chat Output",
                        "id": "ChatOutput-BabAw",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Display a chat message in the Playground.",
                            "display_name": "Chat Output",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "input_value",
                                "should_store_message",
                                "sender",
                                "sender_name",
                                "session_id",
                                "data_template",
                                "background_color",
                                "chat_icon",
                                "text_color"
                            ],
                            "frozen": false,
                            "icon": "MessagesSquare",
                            "legacy": false,
                            "lf_version": "1.0.19.post2",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "message_response",
                                    "name": "message",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "background_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Background Color",
                                    "dynamic": false,
                                    "info": "The background color of the icon.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "background_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "chat_icon": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Icon",
                                    "dynamic": false,
                                    "info": "The icon of the message.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "chat_icon",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, MessageInput, MessageTextInput, Output\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        MessageInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            source_dict[\"source\"] = source\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n        background_color = self.background_color\n        text_color = self.text_color\n        if self.chat_icon:\n            icon = self.chat_icon\n        message = self.input_value if isinstance(self.input_value, Message) else Message(text=self.input_value)\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n        message.properties.icon = icon\n        message.properties.background_color = background_color\n        message.properties.text_color = text_color\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n"
                                },
                                "data_template": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Data Template",
                                    "dynamic": false,
                                    "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "data_template",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "{text}"
                                },
                                "input_value": {
                                    "_input_type": "MessageInput",
                                    "advanced": false,
                                    "display_name": "Text",
                                    "dynamic": false,
                                    "info": "Message to be passed as output.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "sender": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Sender Type",
                                    "dynamic": false,
                                    "info": "Type of sender.",
                                    "name": "sender",
                                    "options": [
                                        "Machine",
                                        "User"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Machine"
                                },
                                "sender_name": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Sender Name",
                                    "dynamic": false,
                                    "info": "Name of the sender.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "sender_name",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "AI"
                                },
                                "session_id": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Session ID",
                                    "dynamic": false,
                                    "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "session_id",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "should_store_message": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Store Messages",
                                    "dynamic": false,
                                    "info": "Store the message in the history.",
                                    "list": false,
                                    "name": "should_store_message",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "text_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Text Color",
                                    "dynamic": false,
                                    "info": "The text color of the name",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "text_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "ChatOutput"
                    },
                    "dragging": false,
                    "height": 234,
                    "id": "ChatOutput-BabAw",
                    "measured": {
                        "height": 234,
                        "width": 360
                    },
                    "position": {
                        "x": 2240.3625274769397,
                        "y": 355.16302699218204
                    },
                    "positionAbsolute": {
                        "x": 2240.3625274769397,
                        "y": 355.16302699218204
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "id": "note-ux8AH",
                        "node": {
                            "description": "# SaaS Pricing Calculator\n\nWelcome to the SaaS Pricing Calculator! This flow helps you determine the optimal monthly subscription price for your software service.\n\n## Instructions\n\n1. Prepare Your Data\n   - Gather information on monthly infrastructure costs\n   - Calculate customer support expenses\n   - Estimate continuous development costs\n   - Decide on your desired profit margin\n   - Determine the estimated number of subscribers\n\n2. Input Values\n   - Enter the gathered data into the respective fields in the Prompt node\n   - Double-check the accuracy of your inputs\n\n3. Run the Flow\n   - Click the \"Run\" button to start the calculation process\n   - The flow will use Chain-of-Thought prompting to guide the AI through the steps\n\n4. Review the Results\n   - Examine the output in the Chat Output node\n   - The result will show a breakdown of costs and the final subscription price\n\n5. Adjust and Refine\n   - If needed, modify your inputs to explore different pricing scenarios\n   - Re-run the flow to see how changes affect the final price\n\nRemember: Regularly update your costs and subscriber estimates to keep your pricing model accurate and competitive! \ud83d\udcbc\ud83d\udcca",
                            "display_name": "",
                            "documentation": "",
                            "template": {}
                        },
                        "type": "note"
                    },
                    "dragging": false,
                    "height": 800,
                    "id": "note-ux8AH",
                    "measured": {
                        "height": 800,
                        "width": 328
                    },
                    "position": {
                        "x": 689.7659055360411,
                        "y": 68.95847391680593
                    },
                    "positionAbsolute": {
                        "x": 689.7659055360411,
                        "y": 68.95847391680593
                    },
                    "resizing": false,
                    "selected": false,
                    "style": {
                        "height": 800,
                        "width": 600
                    },
                    "type": "noteNode",
                    "width": 600
                },
                {
                    "data": {
                        "description": "Define the agent's instructions, then enter a task to complete using tools.",
                        "display_name": "Agent",
                        "id": "Agent-wKeIr",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Define the agent's instructions, then enter a task to complete using tools.",
                            "display_name": "Agent",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "agent_llm",
                                "max_tokens",
                                "model_kwargs",
                                "json_mode",
                                "output_schema",
                                "model_name",
                                "openai_api_base",
                                "api_key",
                                "temperature",
                                "seed",
                                "output_parser",
                                "system_prompt",
                                "tools",
                                "input_value",
                                "handle_parsing_errors",
                                "verbose",
                                "max_iterations",
                                "agent_description",
                                "memory",
                                "sender",
                                "sender_name",
                                "n_messages",
                                "session_id",
                                "order",
                                "template",
                                "add_current_date_tool"
                            ],
                            "frozen": false,
                            "icon": "bot",
                            "legacy": false,
                            "lf_version": "1.0.19.post2",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Response",
                                    "method": "message_response",
                                    "name": "response",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "add_current_date_tool": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Current Date",
                                    "dynamic": false,
                                    "info": "If true, will add a tool to the agent that returns the current date.",
                                    "list": false,
                                    "name": "add_current_date_tool",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "agent_description": {
                                    "_input_type": "MultilineInput",
                                    "advanced": true,
                                    "display_name": "Agent Description [Deprecated]",
                                    "dynamic": false,
                                    "info": "The description of the agent. This is only used when in Tool Mode. Defaults to 'A helpful assistant with access to the following tools:' and tools are added dynamically. This feature is deprecated and will be removed in future versions.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "agent_description",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "A helpful assistant with access to the following tools:"
                                },
                                "agent_llm": {
                                    "_input_type": "DropdownInput",
                                    "advanced": false,
                                    "combobox": false,
                                    "display_name": "Model Provider",
                                    "dynamic": false,
                                    "info": "The provider of the language model that the agent will use to generate responses.",
                                    "input_types": [],
                                    "name": "agent_llm",
                                    "options": [
                                        "Amazon Bedrock",
                                        "Anthropic",
                                        "Azure OpenAI",
                                        "Google Generative AI",
                                        "Groq",
                                        "NVIDIA",
                                        "OpenAI",
                                        "Custom"
                                    ],
                                    "placeholder": "",
                                    "real_time_refresh": true,
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "OpenAI"
                                },
                                "api_key": {
                                    "_input_type": "SecretStrInput",
                                    "advanced": false,
                                    "display_name": "OpenAI API Key",
                                    "dynamic": false,
                                    "info": "The OpenAI API Key to use for the OpenAI model.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "load_from_db": true,
                                    "name": "api_key",
                                    "password": true,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": "OPENAI_API_KEY"
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langchain_core.tools import StructuredTool\n\nfrom langflow.base.agents.agent import LCToolsAgentComponent\nfrom langflow.base.models.model_input_constants import (\n    ALL_PROVIDER_FIELDS,\n    MODEL_DYNAMIC_UPDATE_FIELDS,\n    MODEL_PROVIDERS_DICT,\n)\nfrom langflow.base.models.model_utils import get_model_name\nfrom langflow.components.helpers import CurrentDateComponent\nfrom langflow.components.helpers.memory import MemoryComponent\nfrom langflow.components.langchain_utilities.tool_calling import ToolCallingAgentComponent\nfrom langflow.custom.utils import update_component_build_config\nfrom langflow.io import BoolInput, DropdownInput, MultilineInput, Output\nfrom langflow.logging import logger\nfrom langflow.schema.dotdict import dotdict\nfrom langflow.schema.message import Message\n\n\ndef set_advanced_true(component_input):\n    component_input.advanced = True\n    return component_input\n\n\nclass AgentComponent(ToolCallingAgentComponent):\n    display_name: str = \"Agent\"\n    description: str = \"Define the agent's instructions, then enter a task to complete using tools.\"\n    icon = \"bot\"\n    beta = False\n    name = \"Agent\"\n\n    memory_inputs = [set_advanced_true(component_input) for component_input in MemoryComponent().inputs]\n\n    inputs = [\n        DropdownInput(\n            name=\"agent_llm\",\n            display_name=\"Model Provider\",\n            info=\"The provider of the language model that the agent will use to generate responses.\",\n            options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n            value=\"OpenAI\",\n            real_time_refresh=True,\n            input_types=[],\n        ),\n        *MODEL_PROVIDERS_DICT[\"OpenAI\"][\"inputs\"],\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=\"Agent Instructions\",\n            info=\"System Prompt: Initial instructions and context provided to guide the agent's behavior.\",\n            value=\"You are a helpful assistant that can use tools to answer questions and perform tasks.\",\n            advanced=False,\n        ),\n        *LCToolsAgentComponent._base_inputs,\n        *memory_inputs,\n        BoolInput(\n            name=\"add_current_date_tool\",\n            display_name=\"Current Date\",\n            advanced=True,\n            info=\"If true, will add a tool to the agent that returns the current date.\",\n            value=True,\n        ),\n    ]\n    outputs = [Output(name=\"response\", display_name=\"Response\", method=\"message_response\")]\n\n    async def message_response(self) -> Message:\n        try:\n            llm_model, display_name = self.get_llm()\n            if llm_model is None:\n                msg = \"No language model selected\"\n                raise ValueError(msg)\n            self.model_name = get_model_name(llm_model, display_name=display_name)\n        except Exception as e:\n            # Log the error for debugging purposes\n            logger.error(f\"Error retrieving language model: {e}\")\n            raise\n\n        try:\n            self.chat_history = await self.get_memory_data()\n        except Exception as e:\n            logger.error(f\"Error retrieving chat history: {e}\")\n            raise\n\n        if self.add_current_date_tool:\n            try:\n                if not isinstance(self.tools, list):  # type: ignore[has-type]\n                    self.tools = []\n                # Convert CurrentDateComponent to a StructuredTool\n                current_date_tool = (await CurrentDateComponent().to_toolkit()).pop(0)\n                # current_date_tool = CurrentDateComponent().to_toolkit()[0]\n                if isinstance(current_date_tool, StructuredTool):\n                    self.tools.append(current_date_tool)\n                else:\n                    msg = \"CurrentDateComponent must be converted to a StructuredTool\"\n                    raise TypeError(msg)\n            except Exception as e:\n                logger.error(f\"Error adding current date tool: {e}\")\n                raise\n\n        if not self.tools:\n            msg = \"Tools are required to run the agent.\"\n            logger.error(msg)\n            raise ValueError(msg)\n\n        try:\n            self.set(\n                llm=llm_model,\n                tools=self.tools,\n                chat_history=self.chat_history,\n                input_value=self.input_value,\n                system_prompt=self.system_prompt,\n            )\n            agent = self.create_agent_runnable()\n        except Exception as e:\n            logger.error(f\"Error setting up the agent: {e}\")\n            raise\n\n        return await self.run_agent(agent)\n\n    async def get_memory_data(self):\n        memory_kwargs = {\n            component_input.name: getattr(self, f\"{component_input.name}\") for component_input in self.memory_inputs\n        }\n        # filter out empty values\n        memory_kwargs = {k: v for k, v in memory_kwargs.items() if v}\n\n        return await MemoryComponent().set(**memory_kwargs).retrieve_messages()\n\n    def get_llm(self):\n        if isinstance(self.agent_llm, str):\n            try:\n                provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n                if provider_info:\n                    component_class = provider_info.get(\"component_class\")\n                    display_name = component_class.display_name\n                    inputs = provider_info.get(\"inputs\")\n                    prefix = provider_info.get(\"prefix\", \"\")\n                    return (\n                        self._build_llm_model(component_class, inputs, prefix),\n                        display_name,\n                    )\n            except Exception as e:\n                msg = f\"Error building {self.agent_llm} language model\"\n                raise ValueError(msg) from e\n        return self.agent_llm, None\n\n    def _build_llm_model(self, component, inputs, prefix=\"\"):\n        model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n        return component.set(**model_kwargs).build_model()\n\n    def set_component_params(self, component):\n        provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n        if provider_info:\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\")\n            model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n\n            return component.set(**model_kwargs)\n        return component\n\n    def delete_fields(self, build_config: dotdict, fields: dict | list[str]) -> None:\n        \"\"\"Delete specified fields from build_config.\"\"\"\n        for field in fields:\n            build_config.pop(field, None)\n\n    def update_input_types(self, build_config: dotdict) -> dotdict:\n        \"\"\"Update input types for all fields in build_config.\"\"\"\n        for key, value in build_config.items():\n            if isinstance(value, dict):\n                if value.get(\"input_types\") is None:\n                    build_config[key][\"input_types\"] = []\n            elif hasattr(value, \"input_types\") and value.input_types is None:\n                value.input_types = []\n        return build_config\n\n    async def update_build_config(\n        self, build_config: dotdict, field_value: str, field_name: str | None = None\n    ) -> dotdict:\n        # Iterate over all providers in the MODEL_PROVIDERS_DICT\n        # Existing logic for updating build_config\n        if field_name in (\"agent_llm\",):\n            build_config[\"agent_llm\"][\"value\"] = field_value\n            provider_info = MODEL_PROVIDERS_DICT.get(field_value)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call the component class's update_build_config method\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n\n            provider_configs: dict[str, tuple[dict, list[dict]]] = {\n                provider: (\n                    MODEL_PROVIDERS_DICT[provider][\"fields\"],\n                    [\n                        MODEL_PROVIDERS_DICT[other_provider][\"fields\"]\n                        for other_provider in MODEL_PROVIDERS_DICT\n                        if other_provider != provider\n                    ],\n                )\n                for provider in MODEL_PROVIDERS_DICT\n            }\n            if field_value in provider_configs:\n                fields_to_add, fields_to_delete = provider_configs[field_value]\n\n                # Delete fields from other providers\n                for fields in fields_to_delete:\n                    self.delete_fields(build_config, fields)\n\n                # Add provider-specific fields\n                if field_value == \"OpenAI\" and not any(field in build_config for field in fields_to_add):\n                    build_config.update(fields_to_add)\n                else:\n                    build_config.update(fields_to_add)\n                # Reset input types for agent_llm\n                build_config[\"agent_llm\"][\"input_types\"] = []\n            elif field_value == \"Custom\":\n                # Delete all provider fields\n                self.delete_fields(build_config, ALL_PROVIDER_FIELDS)\n                # Update with custom component\n                custom_component = DropdownInput(\n                    name=\"agent_llm\",\n                    display_name=\"Language Model\",\n                    options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n                    value=\"Custom\",\n                    real_time_refresh=True,\n                    input_types=[\"LanguageModel\"],\n                )\n                build_config.update({\"agent_llm\": custom_component.to_dict()})\n            # Update input types for all fields\n            build_config = self.update_input_types(build_config)\n\n            # Validate required keys\n            default_keys = [\n                \"code\",\n                \"_type\",\n                \"agent_llm\",\n                \"tools\",\n                \"input_value\",\n                \"add_current_date_tool\",\n                \"system_prompt\",\n                \"agent_description\",\n                \"max_iterations\",\n                \"handle_parsing_errors\",\n                \"verbose\",\n            ]\n            missing_keys = [key for key in default_keys if key not in build_config]\n            if missing_keys:\n                msg = f\"Missing required keys in build_config: {missing_keys}\"\n                raise ValueError(msg)\n        if (\n            isinstance(self.agent_llm, str)\n            and self.agent_llm in MODEL_PROVIDERS_DICT\n            and field_name in MODEL_DYNAMIC_UPDATE_FIELDS\n        ):\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                component_class = self.set_component_params(component_class)\n                prefix = provider_info.get(\"prefix\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call each component class's update_build_config method\n                    # remove the prefix from the field_name\n                    if isinstance(field_name, str) and isinstance(prefix, str):\n                        field_name = field_name.replace(prefix, \"\")\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n        return dotdict({k: v.to_dict() if hasattr(v, \"to_dict\") else v for k, v in build_config.items()})\n"
                                },
                                "handle_parsing_errors": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Handle Parse Errors",
                                    "dynamic": false,
                                    "info": "Should the Agent fix errors when reading user input for better processing?",
                                    "list": false,
                                    "name": "handle_parsing_errors",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "input_value": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": false,
                                    "display_name": "Input",
                                    "dynamic": false,
                                    "info": "The input provided by the user for the agent to process.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": true,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "json_mode": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "JSON Mode",
                                    "dynamic": false,
                                    "info": "If True, it will output JSON regardless of passing a schema.",
                                    "list": false,
                                    "name": "json_mode",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "max_iterations": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Max Iterations",
                                    "dynamic": false,
                                    "info": "The maximum number of attempts the agent can make to complete its task before it stops.",
                                    "list": false,
                                    "name": "max_iterations",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 15
                                },
                                "max_tokens": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Max Tokens",
                                    "dynamic": false,
                                    "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                                    "list": false,
                                    "name": "max_tokens",
                                    "placeholder": "",
                                    "range_spec": {
                                        "max": 128000,
                                        "min": 0,
                                        "step": 0.1,
                                        "step_type": "float"
                                    },
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": ""
                                },
                                "memory": {
                                    "_input_type": "HandleInput",
                                    "advanced": true,
                                    "display_name": "External Memory",
                                    "dynamic": false,
                                    "info": "Retrieve messages from an external memory. If empty, it will use the Langflow tables.",
                                    "input_types": [
                                        "Memory"
                                    ],
                                    "list": false,
                                    "name": "memory",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "other",
                                    "value": ""
                                },
                                "model_kwargs": {
                                    "_input_type": "DictInput",
                                    "advanced": true,
                                    "display_name": "Model Kwargs",
                                    "dynamic": false,
                                    "info": "Additional keyword arguments to pass to the model.",
                                    "list": false,
                                    "name": "model_kwargs",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "type": "dict",
                                    "value": {}
                                },
                                "model_name": {
                                    "_input_type": "DropdownInput",
                                    "advanced": false,
                                    "combobox": true,
                                    "display_name": "Model Name",
                                    "dynamic": false,
                                    "info": "To see the model names, first choose a provider. Then, enter your API key and click the refresh button next to the model name.",
                                    "name": "model_name",
                                    "options": [
                                        "gpt-4o-mini",
                                        "gpt-4o",
                                        "gpt-4-turbo",
                                        "gpt-4-turbo-preview",
                                        "gpt-4",
                                        "gpt-3.5-turbo",
                                        "gpt-3.5-turbo-0125"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "gpt-4o-mini"
                                },
                                "n_messages": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Number of Messages",
                                    "dynamic": false,
                                    "info": "Number of messages to retrieve.",
                                    "list": false,
                                    "name": "n_messages",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 100
                                },
                                "openai_api_base": {
                                    "_input_type": "StrInput",
                                    "advanced": true,
                                    "display_name": "OpenAI API Base",
                                    "dynamic": false,
                                    "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "openai_api_base",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "order": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Order",
                                    "dynamic": false,
                                    "info": "Order of the messages.",
                                    "name": "order",
                                    "options": [
                                        "Ascending",
                                        "Descending"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Ascending"
                                },
                                "seed": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Seed",
                                    "dynamic": false,
                                    "info": "The seed controls the reproducibility of the job.",
                                    "list": false,
                                    "name": "seed",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 1
                                },
                                "sender": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Sender Type",
                                    "dynamic": false,
                                    "info": "Filter by sender type.",
                                    "name": "sender",
                                    "options": [
                                        "Machine",
                                        "User",
                                        "Machine and User"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Machine and User"
                                },
                                "sender_name": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Sender Name",
                                    "dynamic": false,
                                    "info": "Filter by sender name.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "sender_name",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "session_id": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Session ID",
                                    "dynamic": false,
                                    "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "session_id",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "system_prompt": {
                                    "_input_type": "MultilineInput",
                                    "advanced": false,
                                    "display_name": "Agent Instructions",
                                    "dynamic": false,
                                    "info": "System Prompt: Initial instructions and context provided to guide the agent's behavior.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "system_prompt",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "# Subscription Pricing Calculator\n\n## Purpose\nCalculate the optimal monthly subscription price for a software product based on operational costs, desired profit margin, and estimated subscriber base.\n\n## Input Variables\nThe system requires the following inputs:\n- Monthly infrastructure costs (numeric)\n- Customer support costs (numeric)\n- Continuous development costs (numeric)\n- Desired profit margin (percentage)\n- Estimated number of subscribers (numeric)\n\n## Calculation Process\nFollow these steps to determine the subscription price:\n\n### Step 1: Total Monthly Costs\nCalculate the sum of all fixed operational costs:\n```\ntotal_monthly_costs = infrastructure_costs + support_costs + development_costs\n```\n\n### Step 2: Profit Margin Calculation\nCalculate the profit margin amount based on total costs:\n```\nprofit_amount = total_monthly_costs \u00d7 (profit_margin_percentage / 100)\n```\n\n### Step 3: Total Revenue Required\nCalculate the total monthly revenue needed:\n```\ntotal_revenue_needed = total_monthly_costs + profit_amount\n```\n\n### Step 4: Per-Subscriber Price\nCalculate the minimum price per subscriber:\n```\nsubscription_price = total_revenue_needed \u00f7 estimated_subscribers\n```\n\n## Output Format\nPresent the results in the following structure:\n\nFixed costs: [sum of all costs]\nProfit margin: [calculated profit amount]\nTotal amount needed: [total revenue required]\nPrice per subscriber: [calculated subscription price]\n\nFinal recommendation: \"The minimum subscription price per subscriber should be [price] to achieve the desired profit margin of [percentage]%\"\n\n## Notes\n- All monetary values should be rounded to 2 decimal places\n- Ensure all input values are positive numbers\n- Validate that the estimated subscribers count is greater than zero\n- The profit margin percentage should be between 0 and 100"
                                },
                                "temperature": {
                                    "_input_type": "FloatInput",
                                    "advanced": true,
                                    "display_name": "Temperature",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "name": "temperature",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "float",
                                    "value": 0.1
                                },
                                "template": {
                                    "_input_type": "MultilineInput",
                                    "advanced": true,
                                    "display_name": "Template",
                                    "dynamic": false,
                                    "info": "The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "template",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "{sender_name}: {text}"
                                },
                                "tools": {
                                    "_input_type": "HandleInput",
                                    "advanced": false,
                                    "display_name": "Tools",
                                    "dynamic": false,
                                    "info": "These are the tools that the agent can use to help with tasks.",
                                    "input_types": [
                                        "Tool"
                                    ],
                                    "list": true,
                                    "name": "tools",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "other",
                                    "value": ""
                                },
                                "verbose": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Verbose",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "name": "verbose",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "Agent"
                    },
                    "dragging": false,
                    "height": 650,
                    "id": "Agent-wKeIr",
                    "measured": {
                        "height": 650,
                        "width": 360
                    },
                    "position": {
                        "x": 1819.2633856623966,
                        "y": 138.32023808479687
                    },
                    "positionAbsolute": {
                        "x": 1819.2633856623966,
                        "y": 138.32023808479687
                    },
                    "selected": true,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "id": "CalculatorComponent-btXJ9",
                        "node": {
                            "base_classes": [
                                "Data"
                            ],
                            "beta": false,
                            "category": "tools",
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Perform basic arithmetic operations on a given expression.",
                            "display_name": "Calculator",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "expression"
                            ],
                            "frozen": false,
                            "icon": "calculator",
                            "key": "CalculatorComponent",
                            "legacy": false,
                            "metadata": {},
                            "minimized": false,
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Toolset",
                                    "hidden": null,
                                    "method": "to_toolkit",
                                    "name": "component_as_tool",
                                    "required_inputs": null,
                                    "selected": "Tool",
                                    "types": [
                                        "Tool"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "score": 0.001,
                            "template": {
                                "_type": "Component",
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "import ast\nimport operator\nfrom collections.abc import Callable\n\nfrom langflow.custom import Component\nfrom langflow.inputs import MessageTextInput\nfrom langflow.io import Output\nfrom langflow.schema import Data\n\n\nclass CalculatorComponent(Component):\n    display_name = \"Calculator\"\n    description = \"Perform basic arithmetic operations on a given expression.\"\n    icon = \"calculator\"\n\n    # Cache operators dictionary as a class variable\n    OPERATORS: dict[type[ast.operator], Callable] = {\n        ast.Add: operator.add,\n        ast.Sub: operator.sub,\n        ast.Mult: operator.mul,\n        ast.Div: operator.truediv,\n        ast.Pow: operator.pow,\n    }\n\n    inputs = [\n        MessageTextInput(\n            name=\"expression\",\n            display_name=\"Expression\",\n            info=\"The arithmetic expression to evaluate (e.g., '4*4*(33/22)+12-20').\",\n            tool_mode=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"result\", type_=Data, method=\"evaluate_expression\"),\n    ]\n\n    def _eval_expr(self, node: ast.AST) -> float:\n        \"\"\"Evaluate an AST node recursively.\"\"\"\n        if isinstance(node, ast.Constant):\n            if isinstance(node.value, int | float):\n                return float(node.value)\n            error_msg = f\"Unsupported constant type: {type(node.value).__name__}\"\n            raise TypeError(error_msg)\n        if isinstance(node, ast.Num):  # For backwards compatibility\n            if isinstance(node.n, int | float):\n                return float(node.n)\n            error_msg = f\"Unsupported number type: {type(node.n).__name__}\"\n            raise TypeError(error_msg)\n\n        if isinstance(node, ast.BinOp):\n            op_type = type(node.op)\n            if op_type not in self.OPERATORS:\n                error_msg = f\"Unsupported binary operator: {op_type.__name__}\"\n                raise TypeError(error_msg)\n\n            left = self._eval_expr(node.left)\n            right = self._eval_expr(node.right)\n            return self.OPERATORS[op_type](left, right)\n\n        error_msg = f\"Unsupported operation or expression type: {type(node).__name__}\"\n        raise TypeError(error_msg)\n\n    def evaluate_expression(self) -> Data:\n        \"\"\"Evaluate the mathematical expression and return the result.\"\"\"\n        try:\n            tree = ast.parse(self.expression, mode=\"eval\")\n            result = self._eval_expr(tree.body)\n\n            formatted_result = f\"{float(result):.6f}\".rstrip(\"0\").rstrip(\".\")\n            self.log(f\"Calculation result: {formatted_result}\")\n\n            self.status = formatted_result\n            return Data(data={\"result\": formatted_result})\n\n        except ZeroDivisionError:\n            error_message = \"Error: Division by zero\"\n            self.status = error_message\n            return Data(data={\"error\": error_message, \"input\": self.expression})\n\n        except (SyntaxError, TypeError, KeyError, ValueError, AttributeError, OverflowError) as e:\n            error_message = f\"Invalid expression: {e!s}\"\n            self.status = error_message\n            return Data(data={\"error\": error_message, \"input\": self.expression})\n\n    def build(self):\n        \"\"\"Return the main evaluation function.\"\"\"\n        return self.evaluate_expression\n"
                                },
                                "expression": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": false,
                                    "display_name": "Expression",
                                    "dynamic": false,
                                    "info": "The arithmetic expression to evaluate (e.g., '4*4*(33/22)+12-20').",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "name": "expression",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": true,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "tools_metadata": {
                                    "_input_type": "TableInput",
                                    "advanced": false,
                                    "display_name": "Edit tools",
                                    "dynamic": false,
                                    "info": "",
                                    "is_list": true,
                                    "list_add_label": "Add More",
                                    "name": "tools_metadata",
                                    "placeholder": "",
                                    "real_time_refresh": true,
                                    "required": false,
                                    "show": true,
                                    "table_icon": "Hammer",
                                    "table_options": {
                                        "block_add": true,
                                        "block_delete": true,
                                        "block_edit": true,
                                        "block_filter": true,
                                        "block_hide": true,
                                        "block_select": true,
                                        "block_sort": true,
                                        "description": "Modify tool names and descriptions to help agents understand when to use each tool.",
                                        "field_parsers": {
                                            "commands": "commands",
                                            "name": [
                                                "snake_case",
                                                "no_blank"
                                            ]
                                        },
                                        "hide_options": true
                                    },
                                    "table_schema": {
                                        "columns": [
                                            {
                                                "description": "Specify the name of the tool.",
                                                "disable_edit": false,
                                                "display_name": "Tool Name",
                                                "edit_mode": "inline",
                                                "filterable": false,
                                                "formatter": "text",
                                                "name": "name",
                                                "sortable": false,
                                                "type": "text"
                                            },
                                            {
                                                "description": "Describe the purpose of the tool.",
                                                "disable_edit": false,
                                                "display_name": "Tool Description",
                                                "edit_mode": "popover",
                                                "filterable": false,
                                                "formatter": "text",
                                                "name": "description",
                                                "sortable": false,
                                                "type": "text"
                                            },
                                            {
                                                "description": "The default identifiers for the tools and cannot be changed.",
                                                "disable_edit": true,
                                                "display_name": "Tool Identifiers",
                                                "edit_mode": "inline",
                                                "filterable": false,
                                                "formatter": "text",
                                                "name": "tags",
                                                "sortable": false,
                                                "type": "text"
                                            }
                                        ]
                                    },
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "trigger_icon": "Hammer",
                                    "trigger_text": "",
                                    "type": "table",
                                    "value": [
                                        {
                                            "description": "evaluate_expression() - Perform basic arithmetic operations on a given expression.",
                                            "name": "None-evaluate_expression",
                                            "tags": [
                                                "None-evaluate_expression"
                                            ]
                                        }
                                    ]
                                }
                            },
                            "tool_mode": true
                        },
                        "showNode": true,
                        "type": "CalculatorComponent"
                    },
                    "dragging": false,
                    "id": "CalculatorComponent-btXJ9",
                    "measured": {
                        "height": 374,
                        "width": 360
                    },
                    "position": {
                        "x": 1350.9477037257504,
                        "y": -45.351578570289234
                    },
                    "selected": false,
                    "type": "genericNode"
                }
            ],
            "viewport": {
                "x": -432.45261318505345,
                "y": 74.8182374148081,
                "zoom": 0.7507017664074155
            }
        },
        "is_component": false,
        "updated_at": "2025-01-25T04:58:24+00:00",
        "webhook": false,
        "endpoint_name": null,
        "tags": [
            "agents",
            "assistants"
        ],
        "locked": false,
        "id": "0d0d11fc-b5f4-4dd8-9d7b-c47b00ac0e55",
        "user_id": null,
        "folder_id": "c54584e6-88eb-4ac0-b70c-68aee37fdce2"
    },
    {
        "name": "Basic Prompting",
        "description": "Perform basic prompting with an OpenAI model.",
        "icon": "Braces",
        "icon_bg_color": null,
        "gradient": "2",
        "data": {
            "edges": [
                {
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "ChatInput",
                            "id": "ChatInput-sU0vL",
                            "name": "message",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "input_value",
                            "id": "OpenAIModel-6Uq9A",
                            "inputTypes": [
                                "Message"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "reactflow__edge-ChatInput-sU0vL{\u0153dataType\u0153:\u0153ChatInput\u0153,\u0153id\u0153:\u0153ChatInput-sU0vL\u0153,\u0153name\u0153:\u0153message\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-OpenAIModel-6Uq9A{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153OpenAIModel-6Uq9A\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "ChatInput-sU0vL",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153ChatInput\u0153, \u0153id\u0153: \u0153ChatInput-sU0vL\u0153, \u0153name\u0153: \u0153message\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "OpenAIModel-6Uq9A",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153input_value\u0153, \u0153id\u0153: \u0153OpenAIModel-6Uq9A\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "Prompt",
                            "id": "Prompt-a0CWD",
                            "name": "prompt",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "system_message",
                            "id": "OpenAIModel-6Uq9A",
                            "inputTypes": [
                                "Message"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "reactflow__edge-Prompt-a0CWD{\u0153dataType\u0153:\u0153Prompt\u0153,\u0153id\u0153:\u0153Prompt-a0CWD\u0153,\u0153name\u0153:\u0153prompt\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-OpenAIModel-6Uq9A{\u0153fieldName\u0153:\u0153system_message\u0153,\u0153id\u0153:\u0153OpenAIModel-6Uq9A\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "Prompt-a0CWD",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153Prompt\u0153, \u0153id\u0153: \u0153Prompt-a0CWD\u0153, \u0153name\u0153: \u0153prompt\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "OpenAIModel-6Uq9A",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153system_message\u0153, \u0153id\u0153: \u0153OpenAIModel-6Uq9A\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "OpenAIModel",
                            "id": "OpenAIModel-6Uq9A",
                            "name": "text_output",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "input_value",
                            "id": "ChatOutput-S56f5",
                            "inputTypes": [
                                "Message"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "reactflow__edge-OpenAIModel-6Uq9A{\u0153dataType\u0153:\u0153OpenAIModel\u0153,\u0153id\u0153:\u0153OpenAIModel-6Uq9A\u0153,\u0153name\u0153:\u0153text_output\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-ChatOutput-S56f5{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153ChatOutput-S56f5\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "OpenAIModel-6Uq9A",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153OpenAIModel\u0153, \u0153id\u0153: \u0153OpenAIModel-6Uq9A\u0153, \u0153name\u0153: \u0153text_output\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "ChatOutput-S56f5",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153input_value\u0153, \u0153id\u0153: \u0153ChatOutput-S56f5\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153], \u0153type\u0153: \u0153str\u0153}"
                }
            ],
            "nodes": [
                {
                    "data": {
                        "description": "Get chat inputs from the Playground.",
                        "display_name": "Chat Input",
                        "id": "ChatInput-sU0vL",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Get chat inputs from the Playground.",
                            "display_name": "Chat Input",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "input_value",
                                "store_message",
                                "sender",
                                "sender_name",
                                "session_id",
                                "files"
                            ],
                            "frozen": false,
                            "icon": "MessagesSquare",
                            "legacy": false,
                            "lf_version": "1.0.19.post2",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "message_response",
                                    "name": "message",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "background_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Background Color",
                                    "dynamic": false,
                                    "info": "The background color of the icon.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "background_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "chat_icon": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Icon",
                                    "dynamic": false,
                                    "info": "The icon of the message.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "chat_icon",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import (\n    DropdownInput,\n    FileInput,\n    MessageTextInput,\n    MultilineInput,\n    Output,\n)\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_USER,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatInput\"\n    minimized = True\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n            input_types=[],\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    async def message_response(self) -> Message:\n        background_color = self.background_color\n        text_color = self.text_color\n        icon = self.chat_icon\n\n        message = await Message.create(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n            properties={\n                \"background_color\": background_color,\n                \"text_color\": text_color,\n                \"icon\": icon,\n            },\n        )\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n"
                                },
                                "files": {
                                    "advanced": true,
                                    "display_name": "Files",
                                    "dynamic": false,
                                    "fileTypes": [
                                        "txt",
                                        "md",
                                        "mdx",
                                        "csv",
                                        "json",
                                        "yaml",
                                        "yml",
                                        "xml",
                                        "html",
                                        "htm",
                                        "pdf",
                                        "docx",
                                        "py",
                                        "sh",
                                        "sql",
                                        "js",
                                        "ts",
                                        "tsx",
                                        "jpg",
                                        "jpeg",
                                        "png",
                                        "bmp",
                                        "image"
                                    ],
                                    "file_path": "",
                                    "info": "Files to be sent with the message.",
                                    "list": true,
                                    "name": "files",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "file",
                                    "value": ""
                                },
                                "input_value": {
                                    "advanced": false,
                                    "display_name": "Text",
                                    "dynamic": false,
                                    "info": "Message to be passed as input.",
                                    "input_types": [],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Hello"
                                },
                                "sender": {
                                    "advanced": true,
                                    "display_name": "Sender Type",
                                    "dynamic": false,
                                    "info": "Type of sender.",
                                    "name": "sender",
                                    "options": [
                                        "Machine",
                                        "User"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "User"
                                },
                                "sender_name": {
                                    "advanced": true,
                                    "display_name": "Sender Name",
                                    "dynamic": false,
                                    "info": "Name of the sender.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "sender_name",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "User"
                                },
                                "session_id": {
                                    "advanced": true,
                                    "display_name": "Session ID",
                                    "dynamic": false,
                                    "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "session_id",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "should_store_message": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Store Messages",
                                    "dynamic": false,
                                    "info": "Store the message in the history.",
                                    "list": false,
                                    "name": "should_store_message",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "text_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Text Color",
                                    "dynamic": false,
                                    "info": "The text color of the name",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "text_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                }
                            }
                        },
                        "type": "ChatInput"
                    },
                    "dragging": false,
                    "height": 234,
                    "id": "ChatInput-sU0vL",
                    "measured": {
                        "height": 234,
                        "width": 360
                    },
                    "position": {
                        "x": 689.5720422421635,
                        "y": 765.155834131403
                    },
                    "positionAbsolute": {
                        "x": 689.5720422421635,
                        "y": 765.155834131403
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "description": "Create a prompt template with dynamic variables.",
                        "display_name": "Prompt",
                        "id": "Prompt-a0CWD",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {
                                "template": []
                            },
                            "description": "Create a prompt template with dynamic variables.",
                            "display_name": "Prompt",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "template"
                            ],
                            "frozen": false,
                            "icon": "prompts",
                            "legacy": false,
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Prompt Message",
                                    "method": "build_prompt",
                                    "name": "prompt",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import MessageTextInput, Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            tool_mode=True,\n            advanced=True,\n            info=\"A placeholder input for tool mode.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    async def update_frontend_node(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = await super().update_frontend_node(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n"
                                },
                                "template": {
                                    "_input_type": "PromptInput",
                                    "advanced": false,
                                    "display_name": "Template",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "template",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "type": "prompt",
                                    "value": "Answer the user as if you were a GenAI expert, enthusiastic about helping them get started building something fresh."
                                },
                                "tool_placeholder": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Tool Placeholder",
                                    "dynamic": false,
                                    "info": "A placeholder input for tool mode.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "tool_placeholder",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": true,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "Prompt"
                    },
                    "dragging": false,
                    "height": 260,
                    "id": "Prompt-a0CWD",
                    "measured": {
                        "height": 260,
                        "width": 360
                    },
                    "position": {
                        "x": 690.2015147036818,
                        "y": 1040.6625705470924
                    },
                    "positionAbsolute": {
                        "x": 690.2015147036818,
                        "y": 1018.5443911764344
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "id": "undefined-omGwP",
                        "node": {
                            "description": "## \ud83d\udcd6 README\n\nPerform basic prompting with an OpenAI model.\n\n#### Quick Start\n- Add your **OpenAI API key** to the **OpenAI Model**\n- Open the **Playground** to chat with your bot.\n\n#### Next steps:\n Experiment by changing the prompt and the OpenAI model temperature to see how the bot's responses change.",
                            "display_name": "Read Me",
                            "documentation": "",
                            "template": {
                                "backgroundColor": "neutral"
                            }
                        }
                    },
                    "dragging": false,
                    "height": 250,
                    "id": "undefined-omGwP",
                    "measured": {
                        "height": 250,
                        "width": 328
                    },
                    "position": {
                        "x": 66.38770028934243,
                        "y": 749.744424427066
                    },
                    "positionAbsolute": {
                        "x": 66.38770028934243,
                        "y": 749.744424427066
                    },
                    "resizing": false,
                    "selected": false,
                    "style": {
                        "height": 250,
                        "width": 600
                    },
                    "type": "noteNode",
                    "width": 600
                },
                {
                    "data": {
                        "id": "note-bk1gl",
                        "node": {
                            "description": "### \ud83d\udca1 Add your OpenAI API key here \ud83d\udc47",
                            "display_name": "",
                            "documentation": "",
                            "template": {
                                "backgroundColor": "transparent"
                            }
                        },
                        "type": "note"
                    },
                    "dragging": false,
                    "height": 324,
                    "id": "note-bk1gl",
                    "measured": {
                        "height": 324,
                        "width": 326
                    },
                    "position": {
                        "x": 1075.829573520873,
                        "y": 657.2057655038416
                    },
                    "positionAbsolute": {
                        "x": 1075.829573520873,
                        "y": 657.2057655038416
                    },
                    "resizing": false,
                    "selected": false,
                    "style": {
                        "height": 324,
                        "width": 324
                    },
                    "type": "noteNode",
                    "width": 324
                },
                {
                    "data": {
                        "id": "ChatOutput-S56f5",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Display a chat message in the Playground.",
                            "display_name": "Chat Output",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "input_value",
                                "should_store_message",
                                "sender",
                                "sender_name",
                                "session_id",
                                "data_template",
                                "background_color",
                                "chat_icon",
                                "text_color"
                            ],
                            "frozen": false,
                            "icon": "MessagesSquare",
                            "legacy": false,
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "message_response",
                                    "name": "message",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "background_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Background Color",
                                    "dynamic": false,
                                    "info": "The background color of the icon.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "background_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "chat_icon": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Icon",
                                    "dynamic": false,
                                    "info": "The icon of the message.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "chat_icon",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, MessageInput, MessageTextInput, Output\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        MessageInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            source_dict[\"source\"] = source\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n        background_color = self.background_color\n        text_color = self.text_color\n        if self.chat_icon:\n            icon = self.chat_icon\n        message = self.input_value if isinstance(self.input_value, Message) else Message(text=self.input_value)\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n        message.properties.icon = icon\n        message.properties.background_color = background_color\n        message.properties.text_color = text_color\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n"
                                },
                                "data_template": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Data Template",
                                    "dynamic": false,
                                    "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "data_template",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "{text}"
                                },
                                "input_value": {
                                    "_input_type": "MessageInput",
                                    "advanced": false,
                                    "display_name": "Text",
                                    "dynamic": false,
                                    "info": "Message to be passed as output.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "sender": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Sender Type",
                                    "dynamic": false,
                                    "info": "Type of sender.",
                                    "name": "sender",
                                    "options": [
                                        "Machine",
                                        "User"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Machine"
                                },
                                "sender_name": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Sender Name",
                                    "dynamic": false,
                                    "info": "Name of the sender.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "sender_name",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "AI"
                                },
                                "session_id": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Session ID",
                                    "dynamic": false,
                                    "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "session_id",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "should_store_message": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Store Messages",
                                    "dynamic": false,
                                    "info": "Store the message in the history.",
                                    "list": false,
                                    "name": "should_store_message",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "text_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Text Color",
                                    "dynamic": false,
                                    "info": "The text color of the name",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "text_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "ChatOutput"
                    },
                    "dragging": false,
                    "height": 234,
                    "id": "ChatOutput-S56f5",
                    "measured": {
                        "height": 234,
                        "width": 360
                    },
                    "position": {
                        "x": 1460.070372772908,
                        "y": 872.7273956769025
                    },
                    "positionAbsolute": {
                        "x": 1444.936881624563,
                        "y": 872.7273956769025
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "id": "OpenAIModel-6Uq9A",
                        "node": {
                            "base_classes": [
                                "LanguageModel",
                                "Message"
                            ],
                            "beta": false,
                            "category": "models",
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Generates text using OpenAI LLMs.",
                            "display_name": "OpenAI",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "input_value",
                                "system_message",
                                "stream",
                                "max_tokens",
                                "model_kwargs",
                                "json_mode",
                                "model_name",
                                "openai_api_base",
                                "api_key",
                                "temperature",
                                "seed"
                            ],
                            "frozen": false,
                            "icon": "OpenAI",
                            "key": "OpenAIModel",
                            "legacy": false,
                            "metadata": {},
                            "minimized": false,
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "text_response",
                                    "name": "text_output",
                                    "required_inputs": [],
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                },
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Language Model",
                                    "method": "build_model",
                                    "name": "model_output",
                                    "required_inputs": [
                                        "api_key"
                                    ],
                                    "selected": "LanguageModel",
                                    "types": [
                                        "LanguageModel"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "score": 0.14285714285714285,
                            "template": {
                                "_type": "Component",
                                "api_key": {
                                    "_input_type": "SecretStrInput",
                                    "advanced": false,
                                    "display_name": "OpenAI API Key",
                                    "dynamic": false,
                                    "info": "The OpenAI API Key to use for the OpenAI model.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "load_from_db": true,
                                    "name": "api_key",
                                    "password": true,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": "OPENAI_API_KEY"
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.openai_constants import OPENAI_MODEL_NAMES\nfrom langflow.field_typing import LanguageModel\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.inputs import BoolInput, DictInput, DropdownInput, IntInput, SecretStrInput, SliderInput, StrInput\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIModel\"\n\n    inputs = [\n        *LCModelComponent._base_inputs,\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            range_spec=RangeSpec(min=0, max=128000),\n        ),\n        DictInput(\n            name=\"model_kwargs\",\n            display_name=\"Model Kwargs\",\n            advanced=True,\n            info=\"Additional keyword arguments to pass to the model.\",\n        ),\n        BoolInput(\n            name=\"json_mode\",\n            display_name=\"JSON Mode\",\n            advanced=True,\n            info=\"If True, it will output JSON regardless of passing a schema.\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            advanced=False,\n            options=OPENAI_MODEL_NAMES,\n            value=OPENAI_MODEL_NAMES[0],\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. \"\n            \"Defaults to https://api.openai.com/v1. \"\n            \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n            required=True,\n        ),\n        SliderInput(\n            name=\"temperature\", display_name=\"Temperature\", value=0.1, range_spec=RangeSpec(min=0, max=2, step=0.01)\n        ),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        openai_api_key = self.api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\n        json_mode = self.json_mode\n        seed = self.seed\n\n        api_key = SecretStr(openai_api_key).get_secret_value() if openai_api_key else None\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature if temperature is not None else 0.1,\n            seed=seed,\n        )\n        if json_mode:\n            output = output.bind(response_format={\"type\": \"json_object\"})\n\n        return output\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"Get a message from an OpenAI exception.\n\n        Args:\n            e (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return None\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")\n            if message:\n                return message\n        return None\n"
                                },
                                "input_value": {
                                    "_input_type": "MessageInput",
                                    "advanced": false,
                                    "display_name": "Input",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "json_mode": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "JSON Mode",
                                    "dynamic": false,
                                    "info": "If True, it will output JSON regardless of passing a schema.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "json_mode",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "max_tokens": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Max Tokens",
                                    "dynamic": false,
                                    "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "max_tokens",
                                    "placeholder": "",
                                    "range_spec": {
                                        "max": 128000,
                                        "min": 0,
                                        "step": 0.1,
                                        "step_type": "float"
                                    },
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": ""
                                },
                                "model_kwargs": {
                                    "_input_type": "DictInput",
                                    "advanced": true,
                                    "display_name": "Model Kwargs",
                                    "dynamic": false,
                                    "info": "Additional keyword arguments to pass to the model.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "model_kwargs",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "type": "dict",
                                    "value": {}
                                },
                                "model_name": {
                                    "_input_type": "DropdownInput",
                                    "advanced": false,
                                    "combobox": false,
                                    "dialog_inputs": {},
                                    "display_name": "Model Name",
                                    "dynamic": false,
                                    "info": "",
                                    "name": "model_name",
                                    "options": [
                                        "gpt-4o-mini",
                                        "gpt-4o",
                                        "gpt-4-turbo",
                                        "gpt-4-turbo-preview",
                                        "gpt-4",
                                        "gpt-3.5-turbo",
                                        "gpt-3.5-turbo-0125"
                                    ],
                                    "options_metadata": [],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "gpt-4o-mini"
                                },
                                "openai_api_base": {
                                    "_input_type": "StrInput",
                                    "advanced": true,
                                    "display_name": "OpenAI API Base",
                                    "dynamic": false,
                                    "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "name": "openai_api_base",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "seed": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Seed",
                                    "dynamic": false,
                                    "info": "The seed controls the reproducibility of the job.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "seed",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 1
                                },
                                "stream": {
                                    "_input_type": "BoolInput",
                                    "advanced": false,
                                    "display_name": "Stream",
                                    "dynamic": false,
                                    "info": "Stream the response from the model. Streaming works only in Chat.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "stream",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "system_message": {
                                    "_input_type": "MultilineInput",
                                    "advanced": false,
                                    "display_name": "System Message",
                                    "dynamic": false,
                                    "info": "System message to pass to the model.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "system_message",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "temperature": {
                                    "_input_type": "SliderInput",
                                    "advanced": false,
                                    "display_name": "Temperature",
                                    "dynamic": false,
                                    "info": "",
                                    "max_label": "",
                                    "max_label_icon": "",
                                    "min_label": "",
                                    "min_label_icon": "",
                                    "name": "temperature",
                                    "placeholder": "",
                                    "range_spec": {
                                        "max": 2,
                                        "min": 0,
                                        "step": 0.01,
                                        "step_type": "float"
                                    },
                                    "required": false,
                                    "show": true,
                                    "slider_buttons": false,
                                    "slider_buttons_options": [],
                                    "slider_input": false,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "type": "slider",
                                    "value": 0.1
                                }
                            },
                            "tool_mode": false
                        },
                        "showNode": true,
                        "type": "OpenAIModel"
                    },
                    "dragging": false,
                    "id": "OpenAIModel-6Uq9A",
                    "measured": {
                        "height": 734,
                        "width": 360
                    },
                    "position": {
                        "x": 1071.3015591664102,
                        "y": 724.6650363109242
                    },
                    "selected": true,
                    "type": "genericNode"
                }
            ],
            "viewport": {
                "x": 17.718959514444805,
                "y": -430.8864814643483,
                "zoom": 0.8320153537381677
            }
        },
        "is_component": false,
        "updated_at": "2025-01-25T04:58:24+00:00",
        "webhook": false,
        "endpoint_name": null,
        "tags": [
            "chatbots"
        ],
        "locked": false,
        "id": "b030ee25-933e-45a5-824e-6c07be3281e1",
        "user_id": null,
        "folder_id": "c54584e6-88eb-4ac0-b70c-68aee37fdce2"
    },
    {
        "name": "Twitter Thread Generator",
        "description": "Transform structured inputs into engaging Twitter threads with this prompt-based flow, maintaining brand voice and technical accuracy.",
        "icon": "TwitterLogoIcon",
        "icon_bg_color": null,
        "gradient": "4",
        "data": {
            "edges": [
                {
                    "animated": false,
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "TextInput",
                            "id": "TextInput-Bg8zz",
                            "name": "text",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "CONTENT_GUIDELINES",
                            "id": "Prompt-atb3f",
                            "inputTypes": [
                                "Message",
                                "Text"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "reactflow__edge-TextInput-Bg8zz{\u0153dataType\u0153:\u0153TextInput\u0153,\u0153id\u0153:\u0153TextInput-Bg8zz\u0153,\u0153name\u0153:\u0153text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-Prompt-atb3f{\u0153fieldName\u0153:\u0153CONTENT_GUIDELINES\u0153,\u0153id\u0153:\u0153Prompt-atb3f\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153,\u0153Text\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "TextInput-Bg8zz",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153TextInput\u0153, \u0153id\u0153: \u0153TextInput-Bg8zz\u0153, \u0153name\u0153: \u0153text\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "Prompt-atb3f",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153CONTENT_GUIDELINES\u0153, \u0153id\u0153: \u0153Prompt-atb3f\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153, \u0153Text\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "animated": false,
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "TextInput",
                            "id": "TextInput-00Lsi",
                            "name": "text",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "OUTPUT_FORMAT",
                            "id": "Prompt-atb3f",
                            "inputTypes": [
                                "Message",
                                "Text"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "reactflow__edge-TextInput-00Lsi{\u0153dataType\u0153:\u0153TextInput\u0153,\u0153id\u0153:\u0153TextInput-00Lsi\u0153,\u0153name\u0153:\u0153text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-Prompt-atb3f{\u0153fieldName\u0153:\u0153OUTPUT_FORMAT\u0153,\u0153id\u0153:\u0153Prompt-atb3f\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153,\u0153Text\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "TextInput-00Lsi",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153TextInput\u0153, \u0153id\u0153: \u0153TextInput-00Lsi\u0153, \u0153name\u0153: \u0153text\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "Prompt-atb3f",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153OUTPUT_FORMAT\u0153, \u0153id\u0153: \u0153Prompt-atb3f\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153, \u0153Text\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "animated": false,
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "TextInput",
                            "id": "TextInput-rmIDO",
                            "name": "text",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "OUTPUT_LANGUAGE",
                            "id": "Prompt-atb3f",
                            "inputTypes": [
                                "Message",
                                "Text"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "reactflow__edge-TextInput-rmIDO{\u0153dataType\u0153:\u0153TextInput\u0153,\u0153id\u0153:\u0153TextInput-rmIDO\u0153,\u0153name\u0153:\u0153text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-Prompt-atb3f{\u0153fieldName\u0153:\u0153OUTPUT_LANGUAGE\u0153,\u0153id\u0153:\u0153Prompt-atb3f\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153,\u0153Text\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "TextInput-rmIDO",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153TextInput\u0153, \u0153id\u0153: \u0153TextInput-rmIDO\u0153, \u0153name\u0153: \u0153text\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "Prompt-atb3f",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153OUTPUT_LANGUAGE\u0153, \u0153id\u0153: \u0153Prompt-atb3f\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153, \u0153Text\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "animated": false,
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "TextInput",
                            "id": "TextInput-7RHoM",
                            "name": "text",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "PROFILE_DETAILS",
                            "id": "Prompt-atb3f",
                            "inputTypes": [
                                "Message",
                                "Text"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "reactflow__edge-TextInput-7RHoM{\u0153dataType\u0153:\u0153TextInput\u0153,\u0153id\u0153:\u0153TextInput-7RHoM\u0153,\u0153name\u0153:\u0153text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-Prompt-atb3f{\u0153fieldName\u0153:\u0153PROFILE_DETAILS\u0153,\u0153id\u0153:\u0153Prompt-atb3f\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153,\u0153Text\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "TextInput-7RHoM",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153TextInput\u0153, \u0153id\u0153: \u0153TextInput-7RHoM\u0153, \u0153name\u0153: \u0153text\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "Prompt-atb3f",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153PROFILE_DETAILS\u0153, \u0153id\u0153: \u0153Prompt-atb3f\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153, \u0153Text\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "animated": false,
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "TextInput",
                            "id": "TextInput-qidre",
                            "name": "text",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "PROFILE_TYPE",
                            "id": "Prompt-atb3f",
                            "inputTypes": [
                                "Message",
                                "Text"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "reactflow__edge-TextInput-qidre{\u0153dataType\u0153:\u0153TextInput\u0153,\u0153id\u0153:\u0153TextInput-qidre\u0153,\u0153name\u0153:\u0153text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-Prompt-atb3f{\u0153fieldName\u0153:\u0153PROFILE_TYPE\u0153,\u0153id\u0153:\u0153Prompt-atb3f\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153,\u0153Text\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "TextInput-qidre",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153TextInput\u0153, \u0153id\u0153: \u0153TextInput-qidre\u0153, \u0153name\u0153: \u0153text\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "Prompt-atb3f",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153PROFILE_TYPE\u0153, \u0153id\u0153: \u0153Prompt-atb3f\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153, \u0153Text\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "animated": false,
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "TextInput",
                            "id": "TextInput-pf6qC",
                            "name": "text",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "TONE_AND_STYLE",
                            "id": "Prompt-atb3f",
                            "inputTypes": [
                                "Message",
                                "Text"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "reactflow__edge-TextInput-pf6qC{\u0153dataType\u0153:\u0153TextInput\u0153,\u0153id\u0153:\u0153TextInput-pf6qC\u0153,\u0153name\u0153:\u0153text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-Prompt-atb3f{\u0153fieldName\u0153:\u0153TONE_AND_STYLE\u0153,\u0153id\u0153:\u0153Prompt-atb3f\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153,\u0153Text\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "TextInput-pf6qC",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153TextInput\u0153, \u0153id\u0153: \u0153TextInput-pf6qC\u0153, \u0153name\u0153: \u0153text\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "Prompt-atb3f",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153TONE_AND_STYLE\u0153, \u0153id\u0153: \u0153Prompt-atb3f\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153, \u0153Text\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "data": {
                        "sourceHandle": {
                            "dataType": "ChatInput",
                            "id": "ChatInput-AQpbG",
                            "name": "message",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "input_value",
                            "id": "OpenAIModel-RvdWl",
                            "inputTypes": [
                                "Message"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "xy-edge__ChatInput-AQpbG{\u0153dataType\u0153:\u0153ChatInput\u0153,\u0153id\u0153:\u0153ChatInput-AQpbG\u0153,\u0153name\u0153:\u0153message\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-OpenAIModel-RvdWl{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153OpenAIModel-RvdWl\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "ChatInput-AQpbG",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153ChatInput\u0153, \u0153id\u0153: \u0153ChatInput-AQpbG\u0153, \u0153name\u0153: \u0153message\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "OpenAIModel-RvdWl",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153input_value\u0153, \u0153id\u0153: \u0153OpenAIModel-RvdWl\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "data": {
                        "sourceHandle": {
                            "dataType": "Prompt",
                            "id": "Prompt-atb3f",
                            "name": "prompt",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "system_message",
                            "id": "OpenAIModel-RvdWl",
                            "inputTypes": [
                                "Message"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "xy-edge__Prompt-atb3f{\u0153dataType\u0153:\u0153Prompt\u0153,\u0153id\u0153:\u0153Prompt-atb3f\u0153,\u0153name\u0153:\u0153prompt\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-OpenAIModel-RvdWl{\u0153fieldName\u0153:\u0153system_message\u0153,\u0153id\u0153:\u0153OpenAIModel-RvdWl\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "Prompt-atb3f",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153Prompt\u0153, \u0153id\u0153: \u0153Prompt-atb3f\u0153, \u0153name\u0153: \u0153prompt\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "OpenAIModel-RvdWl",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153system_message\u0153, \u0153id\u0153: \u0153OpenAIModel-RvdWl\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "data": {
                        "sourceHandle": {
                            "dataType": "OpenAIModel",
                            "id": "OpenAIModel-RvdWl",
                            "name": "text_output",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "input_value",
                            "id": "ChatOutput-17n9v",
                            "inputTypes": [
                                "Message"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "xy-edge__OpenAIModel-RvdWl{\u0153dataType\u0153:\u0153OpenAIModel\u0153,\u0153id\u0153:\u0153OpenAIModel-RvdWl\u0153,\u0153name\u0153:\u0153text_output\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-ChatOutput-17n9v{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153ChatOutput-17n9v\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "OpenAIModel-RvdWl",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153OpenAIModel\u0153, \u0153id\u0153: \u0153OpenAIModel-RvdWl\u0153, \u0153name\u0153: \u0153text_output\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "ChatOutput-17n9v",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153input_value\u0153, \u0153id\u0153: \u0153ChatOutput-17n9v\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153], \u0153type\u0153: \u0153str\u0153}"
                }
            ],
            "nodes": [
                {
                    "data": {
                        "id": "ChatInput-AQpbG",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Get chat inputs from the Playground.",
                            "display_name": "Chat Input",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "input_value",
                                "should_store_message",
                                "sender",
                                "sender_name",
                                "session_id",
                                "files",
                                "background_color",
                                "chat_icon",
                                "text_color"
                            ],
                            "frozen": false,
                            "icon": "MessagesSquare",
                            "legacy": false,
                            "lf_version": "1.0.19.post2",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "message_response",
                                    "name": "message",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "background_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Background Color",
                                    "dynamic": false,
                                    "info": "The background color of the icon.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "background_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "chat_icon": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Icon",
                                    "dynamic": false,
                                    "info": "The icon of the message.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "chat_icon",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import (\n    DropdownInput,\n    FileInput,\n    MessageTextInput,\n    MultilineInput,\n    Output,\n)\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_USER,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatInput\"\n    minimized = True\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n            input_types=[],\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    async def message_response(self) -> Message:\n        background_color = self.background_color\n        text_color = self.text_color\n        icon = self.chat_icon\n\n        message = await Message.create(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n            properties={\n                \"background_color\": background_color,\n                \"text_color\": text_color,\n                \"icon\": icon,\n            },\n        )\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n"
                                },
                                "files": {
                                    "_input_type": "FileInput",
                                    "advanced": true,
                                    "display_name": "Files",
                                    "dynamic": false,
                                    "fileTypes": [
                                        "txt",
                                        "md",
                                        "mdx",
                                        "csv",
                                        "json",
                                        "yaml",
                                        "yml",
                                        "xml",
                                        "html",
                                        "htm",
                                        "pdf",
                                        "docx",
                                        "py",
                                        "sh",
                                        "sql",
                                        "js",
                                        "ts",
                                        "tsx",
                                        "jpg",
                                        "jpeg",
                                        "png",
                                        "bmp",
                                        "image"
                                    ],
                                    "file_path": "",
                                    "info": "Files to be sent with the message.",
                                    "list": true,
                                    "name": "files",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "file",
                                    "value": ""
                                },
                                "input_value": {
                                    "_input_type": "MultilineInput",
                                    "advanced": false,
                                    "display_name": "Text",
                                    "dynamic": false,
                                    "info": "Message to be passed as input.",
                                    "input_types": [],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "*Objective:* Create an engaging Twitter thread that narrates the innovative journey of our LangFlow project, highlighting how we created a specialized flow for generating dynamic prompts for other flows, culminating in a model specialized in writing tweets/threads.  *Project Stages:* 1. *Development in LangFlow:*  - Created a flow focused on generating dynamic prompts - System serves as foundation for optimizing prompt generation in other flows  2. *Template Creation:* - Developed specific templates for tweets/threads - Focus on engagement and message clarity  3. *Results:* - 60% reduction in content creation time - Greater message consistency - Better social media engagement - Fully automated process  *Thread Objectives:* - Educate about LangFlow's capabilities in content creation - Demonstrate the development process step by step - Inspire other developers to explore LangFlow - Strengthen the developer community"
                                },
                                "sender": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Sender Type",
                                    "dynamic": false,
                                    "info": "Type of sender.",
                                    "name": "sender",
                                    "options": [
                                        "Machine",
                                        "User"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "User"
                                },
                                "sender_name": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Sender Name",
                                    "dynamic": false,
                                    "info": "Name of the sender.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "sender_name",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "User"
                                },
                                "session_id": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Session ID",
                                    "dynamic": false,
                                    "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "session_id",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "should_store_message": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Store Messages",
                                    "dynamic": false,
                                    "info": "Store the message in the history.",
                                    "list": false,
                                    "name": "should_store_message",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "text_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Text Color",
                                    "dynamic": false,
                                    "info": "The text color of the name",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "text_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                }
                            }
                        },
                        "type": "ChatInput"
                    },
                    "dragging": false,
                    "height": 234,
                    "id": "ChatInput-AQpbG",
                    "measured": {
                        "height": 234,
                        "width": 360
                    },
                    "position": {
                        "x": 863.3241377184722,
                        "y": 1053.9324095084933
                    },
                    "positionAbsolute": {
                        "x": 863.3241377184722,
                        "y": 1053.9324095084933
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "id": "TextInput-Bg8zz",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Get text inputs from the Playground.",
                            "display_name": "Content Guidelines",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "input_value"
                            ],
                            "frozen": false,
                            "icon": "type",
                            "legacy": false,
                            "lf_version": "1.0.19.post2",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "text_response",
                                    "name": "text",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.base.io.text import TextComponent\nfrom langflow.io import MultilineInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        return Message(\n            text=self.input_value,\n        )\n"
                                },
                                "input_value": {
                                    "_input_type": "MultilineInput",
                                    "advanced": false,
                                    "display_name": "Text",
                                    "dynamic": false,
                                    "info": "Text to be passed as input.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "- Thread must be 5-7 tweets long - Each tweet should be self-contained but flow naturally to the next - Include relevant technical details while keeping language accessible - Use emojis sparingly but effectively - Include a clear call-to-action in the final tweet - Highlight key benefits and innovative aspects - Maintain professional but engaging tone"
                                }
                            }
                        },
                        "type": "TextInput"
                    },
                    "dragging": false,
                    "height": 234,
                    "id": "TextInput-Bg8zz",
                    "measured": {
                        "height": 234,
                        "width": 360
                    },
                    "position": {
                        "x": 1300.291760633212,
                        "y": 417.7819626108867
                    },
                    "positionAbsolute": {
                        "x": 1300.291760633212,
                        "y": 417.7819626108867
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "description": "Display a chat message in the Playground.",
                        "display_name": "Chat Output",
                        "id": "ChatOutput-17n9v",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Display a chat message in the Playground.",
                            "display_name": "Chat Output",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "input_value",
                                "should_store_message",
                                "sender",
                                "sender_name",
                                "session_id",
                                "data_template",
                                "background_color",
                                "chat_icon",
                                "text_color"
                            ],
                            "frozen": false,
                            "icon": "MessagesSquare",
                            "legacy": false,
                            "lf_version": "1.0.19.post2",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "message_response",
                                    "name": "message",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "background_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Background Color",
                                    "dynamic": false,
                                    "info": "The background color of the icon.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "background_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "chat_icon": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Icon",
                                    "dynamic": false,
                                    "info": "The icon of the message.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "chat_icon",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, MessageInput, MessageTextInput, Output\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        MessageInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            source_dict[\"source\"] = source\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n        background_color = self.background_color\n        text_color = self.text_color\n        if self.chat_icon:\n            icon = self.chat_icon\n        message = self.input_value if isinstance(self.input_value, Message) else Message(text=self.input_value)\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n        message.properties.icon = icon\n        message.properties.background_color = background_color\n        message.properties.text_color = text_color\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n"
                                },
                                "data_template": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Data Template",
                                    "dynamic": false,
                                    "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "data_template",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "{text}"
                                },
                                "input_value": {
                                    "_input_type": "MessageInput",
                                    "advanced": false,
                                    "display_name": "Text",
                                    "dynamic": false,
                                    "info": "Message to be passed as output.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "sender": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Sender Type",
                                    "dynamic": false,
                                    "info": "Type of sender.",
                                    "name": "sender",
                                    "options": [
                                        "Machine",
                                        "User"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Machine"
                                },
                                "sender_name": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Sender Name",
                                    "dynamic": false,
                                    "info": "Name of the sender.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "sender_name",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "AI"
                                },
                                "session_id": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Session ID",
                                    "dynamic": false,
                                    "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "session_id",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "should_store_message": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Store Messages",
                                    "dynamic": false,
                                    "info": "Store the message in the history.",
                                    "list": false,
                                    "name": "should_store_message",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "text_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Text Color",
                                    "dynamic": false,
                                    "info": "The text color of the name",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "text_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "ChatOutput"
                    },
                    "dragging": true,
                    "height": 234,
                    "id": "ChatOutput-17n9v",
                    "measured": {
                        "height": 234,
                        "width": 360
                    },
                    "position": {
                        "x": 2451.4525968502526,
                        "y": 1049.1470151171268
                    },
                    "positionAbsolute": {
                        "x": 2470.223353127597,
                        "y": 1055.4039338762416
                    },
                    "selected": true,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "id": "TextInput-00Lsi",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Get text inputs from the Playground.",
                            "display_name": "Output Format",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "input_value"
                            ],
                            "frozen": false,
                            "icon": "type",
                            "legacy": false,
                            "lf_version": "1.0.19.post2",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "text_response",
                                    "name": "text",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.base.io.text import TextComponent\nfrom langflow.io import MultilineInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        return Message(\n            text=self.input_value,\n        )\n"
                                },
                                "input_value": {
                                    "_input_type": "MultilineInput",
                                    "advanced": false,
                                    "display_name": "Text",
                                    "dynamic": false,
                                    "info": "Text to be passed as input.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "thread"
                                }
                            }
                        },
                        "type": "TextInput"
                    },
                    "dragging": false,
                    "height": 234,
                    "id": "TextInput-00Lsi",
                    "measured": {
                        "height": 234,
                        "width": 360
                    },
                    "position": {
                        "x": 1300.639277084099,
                        "y": 665.0274048594538
                    },
                    "positionAbsolute": {
                        "x": 1300.639277084099,
                        "y": 665.0274048594538
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "id": "TextInput-rmIDO",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Get text inputs from the Playground.",
                            "display_name": "Output Language",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "input_value"
                            ],
                            "frozen": false,
                            "icon": "type",
                            "legacy": false,
                            "lf_version": "1.0.19.post2",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "text_response",
                                    "name": "text",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.base.io.text import TextComponent\nfrom langflow.io import MultilineInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        return Message(\n            text=self.input_value,\n        )\n"
                                },
                                "input_value": {
                                    "_input_type": "MultilineInput",
                                    "advanced": false,
                                    "display_name": "Text",
                                    "dynamic": false,
                                    "info": "Text to be passed as input.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "English"
                                }
                            }
                        },
                        "type": "TextInput"
                    },
                    "dragging": false,
                    "height": 234,
                    "id": "TextInput-rmIDO",
                    "measured": {
                        "height": 234,
                        "width": 360
                    },
                    "position": {
                        "x": 1302.1321888373375,
                        "y": 910.3592488005739
                    },
                    "positionAbsolute": {
                        "x": 1302.1321888373375,
                        "y": 910.3592488005739
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "id": "TextInput-7RHoM",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Get text inputs from the Playground.",
                            "display_name": "Profile Details",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "input_value"
                            ],
                            "frozen": false,
                            "icon": "type",
                            "legacy": false,
                            "lf_version": "1.0.19.post2",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "text_response",
                                    "name": "text",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.base.io.text import TextComponent\nfrom langflow.io import MultilineInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        return Message(\n            text=self.input_value,\n        )\n"
                                },
                                "input_value": {
                                    "_input_type": "MultilineInput",
                                    "advanced": false,
                                    "display_name": "Text",
                                    "dynamic": false,
                                    "info": "Text to be passed as input.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "- Tech startup focused on AI/ML innovation - Active in open-source community - Experienced in building developer tools - Known for clear technical communication - Engaged audience of developers and AI enthusiasts"
                                }
                            }
                        },
                        "type": "TextInput"
                    },
                    "dragging": false,
                    "height": 234,
                    "id": "TextInput-7RHoM",
                    "measured": {
                        "height": 234,
                        "width": 360
                    },
                    "position": {
                        "x": 1302.0774628387737,
                        "y": 1167.3244357663511
                    },
                    "positionAbsolute": {
                        "x": 1302.0774628387737,
                        "y": 1167.3244357663511
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "id": "TextInput-pf6qC",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Get text inputs from the Playground.",
                            "display_name": "Tone And Style",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "input_value"
                            ],
                            "frozen": false,
                            "icon": "type",
                            "legacy": false,
                            "lf_version": "1.0.19.post2",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "text_response",
                                    "name": "text",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.base.io.text import TextComponent\nfrom langflow.io import MultilineInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        return Message(\n            text=self.input_value,\n        )\n"
                                },
                                "input_value": {
                                    "_input_type": "MultilineInput",
                                    "advanced": false,
                                    "display_name": "Text",
                                    "dynamic": false,
                                    "info": "Text to be passed as input.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "- Professional yet approachable - Technical but accessible - Enthusiastic about innovation - Educational and informative - Collaborative and community-focused - Clear and concise - Solution-oriented"
                                }
                            }
                        },
                        "type": "TextInput"
                    },
                    "dragging": false,
                    "height": 234,
                    "id": "TextInput-pf6qC",
                    "measured": {
                        "height": 234,
                        "width": 360
                    },
                    "position": {
                        "x": 1301.68182643676,
                        "y": 1699.978793221378
                    },
                    "positionAbsolute": {
                        "x": 1301.68182643676,
                        "y": 1699.978793221378
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "id": "TextInput-qidre",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Get text inputs from the Playground.",
                            "display_name": "Profile Type",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "input_value"
                            ],
                            "frozen": false,
                            "icon": "type",
                            "legacy": false,
                            "lf_version": "1.0.19.post2",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "text_response",
                                    "name": "text",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.base.io.text import TextComponent\nfrom langflow.io import MultilineInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        return Message(\n            text=self.input_value,\n        )\n"
                                },
                                "input_value": {
                                    "_input_type": "MultilineInput",
                                    "advanced": false,
                                    "display_name": "Text",
                                    "dynamic": false,
                                    "info": "Text to be passed as input.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Tech Company / AI Developer Platform"
                                }
                            }
                        },
                        "type": "TextInput"
                    },
                    "dragging": false,
                    "height": 234,
                    "id": "TextInput-qidre",
                    "measured": {
                        "height": 234,
                        "width": 360
                    },
                    "position": {
                        "x": 1301.4778537945892,
                        "y": 1428.1749742780207
                    },
                    "positionAbsolute": {
                        "x": 1301.4778537945892,
                        "y": 1428.1749742780207
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "id": "note-dplZB",
                        "node": {
                            "description": "# Twitter Thread Generator\n\nWelcome to the Twitter Thread Generator! This flow helps you create compelling Twitter threads by transforming your structured inputs into engaging content.\n\n## Instructions\n\n1. Prepare Your Inputs\n   - Fill in the \"Context\" with your main message or story\n   - Define \"Content Guidelines\" for thread structure and style\n   - Specify \"Profile Type\" and \"Profile Details\" to reflect your brand identity\n   - Set \"Tone and Style\" to guide the communication approach\n   - Choose \"Output Format\" (thread) and desired language\n\n2. Configure the Prompt\n   - The flow uses a specialized prompt template to generate content\n   - Ensure all input fields are connected to the prompt node\n\n3. Run the Generation\n   - Execute the flow to process your inputs\n   - The OpenAI model will create the thread based on your specifications\n\n4. Review and Refine\n   - Examine the output in the Chat Output node\n   - If needed, adjust your inputs and re-run for better results\n\n5. Finalize and Post\n   - Once satisfied, copy the generated thread\n   - Post to Twitter, maintaining the structure and flow\n\nRemember: Be specific in your context and guidelines for the best results! \ud83d\ude80\n",
                            "display_name": "",
                            "documentation": "",
                            "template": {
                                "backgroundColor": "amber"
                            }
                        },
                        "type": "note"
                    },
                    "dragging": false,
                    "height": 800,
                    "id": "note-dplZB",
                    "measured": {
                        "height": 800,
                        "width": 328
                    },
                    "position": {
                        "x": 675.0099418843004,
                        "y": 233.23451233469402
                    },
                    "positionAbsolute": {
                        "x": 675.0099418843004,
                        "y": 233.23451233469402
                    },
                    "resizing": false,
                    "selected": false,
                    "style": {
                        "height": 800,
                        "width": 600
                    },
                    "type": "noteNode",
                    "width": 600
                },
                {
                    "data": {
                        "description": "Create a prompt template with dynamic variables.",
                        "display_name": "Prompt",
                        "id": "Prompt-atb3f",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {
                                "template": [
                                    "PROFILE_TYPE",
                                    "PROFILE_DETAILS",
                                    "CONTENT_GUIDELINES",
                                    "TONE_AND_STYLE",
                                    "OUTPUT_FORMAT",
                                    "OUTPUT_LANGUAGE"
                                ]
                            },
                            "description": "Create a prompt template with dynamic variables.",
                            "display_name": "Prompt",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "template"
                            ],
                            "frozen": false,
                            "icon": "prompts",
                            "legacy": false,
                            "lf_version": "1.0.19.post2",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Prompt Message",
                                    "method": "build_prompt",
                                    "name": "prompt",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "CONTENT_GUIDELINES": {
                                    "advanced": false,
                                    "display_name": "CONTENT_GUIDELINES",
                                    "dynamic": false,
                                    "field_type": "str",
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "input_types": [
                                        "Message",
                                        "Text"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "CONTENT_GUIDELINES",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": ""
                                },
                                "OUTPUT_FORMAT": {
                                    "advanced": false,
                                    "display_name": "OUTPUT_FORMAT",
                                    "dynamic": false,
                                    "field_type": "str",
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "input_types": [
                                        "Message",
                                        "Text"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "OUTPUT_FORMAT",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": ""
                                },
                                "OUTPUT_LANGUAGE": {
                                    "advanced": false,
                                    "display_name": "OUTPUT_LANGUAGE",
                                    "dynamic": false,
                                    "field_type": "str",
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "input_types": [
                                        "Message",
                                        "Text"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "OUTPUT_LANGUAGE",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": ""
                                },
                                "PROFILE_DETAILS": {
                                    "advanced": false,
                                    "display_name": "PROFILE_DETAILS",
                                    "dynamic": false,
                                    "field_type": "str",
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "input_types": [
                                        "Message",
                                        "Text"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "PROFILE_DETAILS",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": ""
                                },
                                "PROFILE_TYPE": {
                                    "advanced": false,
                                    "display_name": "PROFILE_TYPE",
                                    "dynamic": false,
                                    "field_type": "str",
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "input_types": [
                                        "Message",
                                        "Text"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "PROFILE_TYPE",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": ""
                                },
                                "TONE_AND_STYLE": {
                                    "advanced": false,
                                    "display_name": "TONE_AND_STYLE",
                                    "dynamic": false,
                                    "field_type": "str",
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "input_types": [
                                        "Message",
                                        "Text"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "TONE_AND_STYLE",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": ""
                                },
                                "_type": "Component",
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import MessageTextInput, Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            tool_mode=True,\n            advanced=True,\n            info=\"A placeholder input for tool mode.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    async def update_frontend_node(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = await super().update_frontend_node(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n"
                                },
                                "template": {
                                    "_input_type": "PromptInput",
                                    "advanced": false,
                                    "display_name": "Template",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "template",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "type": "prompt",
                                    "value": "<Instructions Structure>\nIntroduce the task of generating tweets or tweet threads based on the provided inputs\n\nExplain each input variable:\n\n{{PROFILE_TYPE}}\n\n{{PROFILE_DETAILS}}\n\n{{CONTENT_GUIDELINES}}\n\n{{TONE_AND_STYLE}}\n\n{{CONTEXT}}\n\n{{OUTPUT_FORMAT}}\n\n{{OUTPUT_LANGUAGE}}\n\nProvide step-by-step instructions on how to analyze the inputs to determine if a single tweet or thread is appropriate\n\nGive guidance on generating tweet content that aligns with the profile, guidelines, tone, style, and context\n\nExplain how to format the output based on the {{OUTPUT_FORMAT}} value\n\nProvide tips for creating engaging, coherent tweet content\n\n</Instructions Structure>\n\n<Instructions>\nYou are an AI tweet generator that can create standalone tweets or multi-tweet threads based on a variety of inputs about the desired content. Here are the key inputs you will use to generate the tweet(s):\n\n<profile_type>\n\n{PROFILE_TYPE}\n\n</profile_type>\n\n<profile_details>\n\n{PROFILE_DETAILS}\n\n</profile_details>\n\n<content_guidelines>\n\n{CONTENT_GUIDELINES}\n\n</content_guidelines>\n\n<tone_and_style>\n\n{TONE_AND_STYLE}\n\n</tone_and_style>\n\n<output_format>\n\n{OUTPUT_FORMAT}\n\n</output_format>\n\n\n<output_language>\n\n{OUTPUT_LANGUAGE}\n\n</output_language>\n\nTo generate the appropriate tweet(s), follow these steps:\n\n<output_determination>\n\nCarefully analyze the {{PROFILE_TYPE}}, {{PROFILE_DETAILS}}, {{CONTENT_GUIDELINES}}, {{TONE_AND_STYLE}}, and {{CONTEXT}} to determine the depth and breadth of content needed.\n\nIf the {{OUTPUT_FORMAT}} is \"single_tweet\", plan to convey the key information in a concise, standalone tweet.\n\nIf the {{OUTPUT_FORMAT}} is \"thread\" or if the content seems too complex for a single tweet, outline a series of connected tweets that flow together to cover the topic.\n\n</output_determination>\n\n<content_generation>\n\nBrainstorm tweet content that aligns with the {{PROFILE_TYPE}} and {{PROFILE_DETAILS}}, adheres to the {{CONTENT_GUIDELINES}}, matches the {{TONE_AND_STYLE}}, and incorporates the {{CONTEXT}}.\n\nFor a single tweet, craft the most engaging, informative message possible within the 280 character limit.\n\nFor a thread, break down the content into distinct yet connected tweet-sized chunks. Ensure each tweet flows logically into the next to maintain reader engagement. Use transitional phrases as needed to link tweets.\n\n</content_generation>\n\n<formatting>\nFormat the output based on the {{OUTPUT_FORMAT}}:\n\nFor a single tweet, provide the content.\n\nFor a thread, include each tweet inside numbered markdown list.\n\n</formatting> <tips>\nFocus on creating original, engaging content that provides value to the intended audience.\n\nOptimize the tweet(s) for the 280 character limit. Be concise yet impactful.\n\nMaintain a consistent voice that matches the {{TONE_AND_STYLE}} throughout the tweet(s).\n\nInclude calls-to-action or questions to drive engagement when appropriate.\n\nDouble check that the final output aligns with the {{PROFILE_DETAILS}} and {{CONTENT_GUIDELINES}}.\n\n</tips>\n\nNow create a Tweet or Twitter Thread for this context:\n\n"
                                },
                                "tool_placeholder": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Tool Placeholder",
                                    "dynamic": false,
                                    "info": "A placeholder input for tool mode.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "tool_placeholder",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": true,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "Prompt"
                    },
                    "dragging": false,
                    "height": 779,
                    "id": "Prompt-atb3f",
                    "measured": {
                        "height": 779,
                        "width": 360
                    },
                    "position": {
                        "x": 1697.1682096049744,
                        "y": 675.4022940880462
                    },
                    "positionAbsolute": {
                        "x": 1697.1682096049744,
                        "y": 675.4022940880462
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "id": "OpenAIModel-RvdWl",
                        "node": {
                            "base_classes": [
                                "LanguageModel",
                                "Message"
                            ],
                            "beta": false,
                            "category": "models",
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Generates text using OpenAI LLMs.",
                            "display_name": "OpenAI",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "input_value",
                                "system_message",
                                "stream",
                                "max_tokens",
                                "model_kwargs",
                                "json_mode",
                                "model_name",
                                "openai_api_base",
                                "api_key",
                                "temperature",
                                "seed"
                            ],
                            "frozen": false,
                            "icon": "OpenAI",
                            "key": "OpenAIModel",
                            "legacy": false,
                            "metadata": {},
                            "minimized": false,
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "text_response",
                                    "name": "text_output",
                                    "required_inputs": [],
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                },
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Language Model",
                                    "method": "build_model",
                                    "name": "model_output",
                                    "required_inputs": [
                                        "api_key"
                                    ],
                                    "selected": "LanguageModel",
                                    "types": [
                                        "LanguageModel"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "score": 0.14285714285714285,
                            "template": {
                                "_type": "Component",
                                "api_key": {
                                    "_input_type": "SecretStrInput",
                                    "advanced": false,
                                    "display_name": "OpenAI API Key",
                                    "dynamic": false,
                                    "info": "The OpenAI API Key to use for the OpenAI model.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "load_from_db": true,
                                    "name": "api_key",
                                    "password": true,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": "OPENAI_API_KEY"
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.openai_constants import OPENAI_MODEL_NAMES\nfrom langflow.field_typing import LanguageModel\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.inputs import BoolInput, DictInput, DropdownInput, IntInput, SecretStrInput, SliderInput, StrInput\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIModel\"\n\n    inputs = [\n        *LCModelComponent._base_inputs,\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            range_spec=RangeSpec(min=0, max=128000),\n        ),\n        DictInput(\n            name=\"model_kwargs\",\n            display_name=\"Model Kwargs\",\n            advanced=True,\n            info=\"Additional keyword arguments to pass to the model.\",\n        ),\n        BoolInput(\n            name=\"json_mode\",\n            display_name=\"JSON Mode\",\n            advanced=True,\n            info=\"If True, it will output JSON regardless of passing a schema.\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            advanced=False,\n            options=OPENAI_MODEL_NAMES,\n            value=OPENAI_MODEL_NAMES[0],\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. \"\n            \"Defaults to https://api.openai.com/v1. \"\n            \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n            required=True,\n        ),\n        SliderInput(\n            name=\"temperature\", display_name=\"Temperature\", value=0.1, range_spec=RangeSpec(min=0, max=2, step=0.01)\n        ),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        openai_api_key = self.api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\n        json_mode = self.json_mode\n        seed = self.seed\n\n        api_key = SecretStr(openai_api_key).get_secret_value() if openai_api_key else None\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature if temperature is not None else 0.1,\n            seed=seed,\n        )\n        if json_mode:\n            output = output.bind(response_format={\"type\": \"json_object\"})\n\n        return output\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"Get a message from an OpenAI exception.\n\n        Args:\n            e (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return None\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")\n            if message:\n                return message\n        return None\n"
                                },
                                "input_value": {
                                    "_input_type": "MessageInput",
                                    "advanced": false,
                                    "display_name": "Input",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "json_mode": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "JSON Mode",
                                    "dynamic": false,
                                    "info": "If True, it will output JSON regardless of passing a schema.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "json_mode",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "max_tokens": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Max Tokens",
                                    "dynamic": false,
                                    "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "max_tokens",
                                    "placeholder": "",
                                    "range_spec": {
                                        "max": 128000,
                                        "min": 0,
                                        "step": 0.1,
                                        "step_type": "float"
                                    },
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": ""
                                },
                                "model_kwargs": {
                                    "_input_type": "DictInput",
                                    "advanced": true,
                                    "display_name": "Model Kwargs",
                                    "dynamic": false,
                                    "info": "Additional keyword arguments to pass to the model.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "model_kwargs",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "type": "dict",
                                    "value": {}
                                },
                                "model_name": {
                                    "_input_type": "DropdownInput",
                                    "advanced": false,
                                    "combobox": false,
                                    "dialog_inputs": {},
                                    "display_name": "Model Name",
                                    "dynamic": false,
                                    "info": "",
                                    "name": "model_name",
                                    "options": [
                                        "gpt-4o-mini",
                                        "gpt-4o",
                                        "gpt-4-turbo",
                                        "gpt-4-turbo-preview",
                                        "gpt-4",
                                        "gpt-3.5-turbo",
                                        "gpt-3.5-turbo-0125"
                                    ],
                                    "options_metadata": [],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "gpt-4o-mini"
                                },
                                "openai_api_base": {
                                    "_input_type": "StrInput",
                                    "advanced": true,
                                    "display_name": "OpenAI API Base",
                                    "dynamic": false,
                                    "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "name": "openai_api_base",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "seed": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Seed",
                                    "dynamic": false,
                                    "info": "The seed controls the reproducibility of the job.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "seed",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 1
                                },
                                "stream": {
                                    "_input_type": "BoolInput",
                                    "advanced": false,
                                    "display_name": "Stream",
                                    "dynamic": false,
                                    "info": "Stream the response from the model. Streaming works only in Chat.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "stream",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "system_message": {
                                    "_input_type": "MultilineInput",
                                    "advanced": false,
                                    "display_name": "System Message",
                                    "dynamic": false,
                                    "info": "System message to pass to the model.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "system_message",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "temperature": {
                                    "_input_type": "SliderInput",
                                    "advanced": false,
                                    "display_name": "Temperature",
                                    "dynamic": false,
                                    "info": "",
                                    "max_label": "",
                                    "max_label_icon": "",
                                    "min_label": "",
                                    "min_label_icon": "",
                                    "name": "temperature",
                                    "placeholder": "",
                                    "range_spec": {
                                        "max": 2,
                                        "min": 0,
                                        "step": 0.01,
                                        "step_type": "float"
                                    },
                                    "required": false,
                                    "show": true,
                                    "slider_buttons": false,
                                    "slider_buttons_options": [],
                                    "slider_input": false,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "type": "slider",
                                    "value": 0.1
                                }
                            },
                            "tool_mode": false
                        },
                        "showNode": true,
                        "type": "OpenAIModel"
                    },
                    "dragging": false,
                    "id": "OpenAIModel-RvdWl",
                    "measured": {
                        "height": 734,
                        "width": 360
                    },
                    "position": {
                        "x": 2077.6929601219513,
                        "y": 749.5994771046013
                    },
                    "selected": false,
                    "type": "genericNode"
                }
            ],
            "viewport": {
                "x": -37.82574897322547,
                "y": -72.05604403499899,
                "zoom": 0.47946922686660903
            }
        },
        "is_component": false,
        "updated_at": "2025-01-25T04:58:24+00:00",
        "webhook": false,
        "endpoint_name": null,
        "tags": [
            "chatbots",
            "content-generation"
        ],
        "locked": false,
        "id": "e905348b-0141-4f0a-86c1-ebe08ddbfb35",
        "user_id": null,
        "folder_id": "c54584e6-88eb-4ac0-b70c-68aee37fdce2"
    },
    {
        "name": "Document Q&A",
        "description": "Integrates PDF reading with a language model to answer document-specific questions. Ideal for small-scale texts, it facilitates direct queries with immediate insights.",
        "icon": "FileQuestion",
        "icon_bg_color": null,
        "gradient": "3",
        "data": {
            "edges": [
                {
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "File",
                            "id": "File-wUadf",
                            "name": "data",
                            "output_types": [
                                "Data"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "data",
                            "id": "ParseData-IJwYj",
                            "inputTypes": [
                                "Data"
                            ],
                            "type": "other"
                        }
                    },
                    "id": "reactflow__edge-File-wUadf{\u0153dataType\u0153:\u0153File\u0153,\u0153id\u0153:\u0153File-wUadf\u0153,\u0153name\u0153:\u0153data\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}-ParseData-IJwYj{\u0153fieldName\u0153:\u0153data\u0153,\u0153id\u0153:\u0153ParseData-IJwYj\u0153,\u0153inputTypes\u0153:[\u0153Data\u0153],\u0153type\u0153:\u0153other\u0153}",
                    "source": "File-wUadf",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153File\u0153, \u0153id\u0153: \u0153File-wUadf\u0153, \u0153name\u0153: \u0153data\u0153, \u0153output_types\u0153: [\u0153Data\u0153]}",
                    "target": "ParseData-IJwYj",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153data\u0153, \u0153id\u0153: \u0153ParseData-IJwYj\u0153, \u0153inputTypes\u0153: [\u0153Data\u0153], \u0153type\u0153: \u0153other\u0153}"
                },
                {
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "ParseData",
                            "id": "ParseData-IJwYj",
                            "name": "text",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "Document",
                            "id": "Prompt-5ubri",
                            "inputTypes": [
                                "Message",
                                "Text"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "reactflow__edge-ParseData-IJwYj{\u0153dataType\u0153:\u0153ParseData\u0153,\u0153id\u0153:\u0153ParseData-IJwYj\u0153,\u0153name\u0153:\u0153text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-Prompt-5ubri{\u0153fieldName\u0153:\u0153Document\u0153,\u0153id\u0153:\u0153Prompt-5ubri\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153,\u0153Text\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "ParseData-IJwYj",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153ParseData\u0153, \u0153id\u0153: \u0153ParseData-IJwYj\u0153, \u0153name\u0153: \u0153text\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "Prompt-5ubri",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153Document\u0153, \u0153id\u0153: \u0153Prompt-5ubri\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153, \u0153Text\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "data": {
                        "sourceHandle": {
                            "dataType": "ChatInput",
                            "id": "ChatInput-VApZJ",
                            "name": "message",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "input_value",
                            "id": "OpenAIModel-toIc8",
                            "inputTypes": [
                                "Message"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "xy-edge__ChatInput-VApZJ{\u0153dataType\u0153:\u0153ChatInput\u0153,\u0153id\u0153:\u0153ChatInput-VApZJ\u0153,\u0153name\u0153:\u0153message\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-OpenAIModel-toIc8{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153OpenAIModel-toIc8\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "ChatInput-VApZJ",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153ChatInput\u0153, \u0153id\u0153: \u0153ChatInput-VApZJ\u0153, \u0153name\u0153: \u0153message\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "OpenAIModel-toIc8",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153input_value\u0153, \u0153id\u0153: \u0153OpenAIModel-toIc8\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "data": {
                        "sourceHandle": {
                            "dataType": "Prompt",
                            "id": "Prompt-5ubri",
                            "name": "prompt",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "system_message",
                            "id": "OpenAIModel-toIc8",
                            "inputTypes": [
                                "Message"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "xy-edge__Prompt-5ubri{\u0153dataType\u0153:\u0153Prompt\u0153,\u0153id\u0153:\u0153Prompt-5ubri\u0153,\u0153name\u0153:\u0153prompt\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-OpenAIModel-toIc8{\u0153fieldName\u0153:\u0153system_message\u0153,\u0153id\u0153:\u0153OpenAIModel-toIc8\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "Prompt-5ubri",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153Prompt\u0153, \u0153id\u0153: \u0153Prompt-5ubri\u0153, \u0153name\u0153: \u0153prompt\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "OpenAIModel-toIc8",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153system_message\u0153, \u0153id\u0153: \u0153OpenAIModel-toIc8\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "data": {
                        "sourceHandle": {
                            "dataType": "OpenAIModel",
                            "id": "OpenAIModel-toIc8",
                            "name": "text_output",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "input_value",
                            "id": "ChatOutput-8lufz",
                            "inputTypes": [
                                "Message"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "xy-edge__OpenAIModel-toIc8{\u0153dataType\u0153:\u0153OpenAIModel\u0153,\u0153id\u0153:\u0153OpenAIModel-toIc8\u0153,\u0153name\u0153:\u0153text_output\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-ChatOutput-8lufz{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153ChatOutput-8lufz\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "OpenAIModel-toIc8",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153OpenAIModel\u0153, \u0153id\u0153: \u0153OpenAIModel-toIc8\u0153, \u0153name\u0153: \u0153text_output\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "ChatOutput-8lufz",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153input_value\u0153, \u0153id\u0153: \u0153ChatOutput-8lufz\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153], \u0153type\u0153: \u0153str\u0153}"
                }
            ],
            "nodes": [
                {
                    "data": {
                        "description": "Get chat inputs from the Playground.",
                        "display_name": "Chat Input",
                        "id": "ChatInput-VApZJ",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Get chat inputs from the Playground.",
                            "display_name": "Chat Input",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "input_value",
                                "store_message",
                                "sender",
                                "sender_name",
                                "session_id",
                                "files"
                            ],
                            "frozen": false,
                            "icon": "MessagesSquare",
                            "legacy": false,
                            "lf_version": "1.0.19.post2",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "message_response",
                                    "name": "message",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "background_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Background Color",
                                    "dynamic": false,
                                    "info": "The background color of the icon.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "background_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "chat_icon": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Icon",
                                    "dynamic": false,
                                    "info": "The icon of the message.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "chat_icon",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import (\n    DropdownInput,\n    FileInput,\n    MessageTextInput,\n    MultilineInput,\n    Output,\n)\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_USER,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatInput\"\n    minimized = True\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n            input_types=[],\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    async def message_response(self) -> Message:\n        background_color = self.background_color\n        text_color = self.text_color\n        icon = self.chat_icon\n\n        message = await Message.create(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n            properties={\n                \"background_color\": background_color,\n                \"text_color\": text_color,\n                \"icon\": icon,\n            },\n        )\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n"
                                },
                                "files": {
                                    "advanced": true,
                                    "display_name": "Files",
                                    "dynamic": false,
                                    "fileTypes": [
                                        "txt",
                                        "md",
                                        "mdx",
                                        "csv",
                                        "json",
                                        "yaml",
                                        "yml",
                                        "xml",
                                        "html",
                                        "htm",
                                        "pdf",
                                        "docx",
                                        "py",
                                        "sh",
                                        "sql",
                                        "js",
                                        "ts",
                                        "tsx",
                                        "jpg",
                                        "jpeg",
                                        "png",
                                        "bmp",
                                        "image"
                                    ],
                                    "file_path": "",
                                    "info": "Files to be sent with the message.",
                                    "list": true,
                                    "name": "files",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "file",
                                    "value": ""
                                },
                                "input_value": {
                                    "advanced": false,
                                    "display_name": "Text",
                                    "dynamic": false,
                                    "info": "Message to be passed as input.",
                                    "input_types": [],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "What is this document is about?"
                                },
                                "sender": {
                                    "advanced": true,
                                    "display_name": "Sender Type",
                                    "dynamic": false,
                                    "info": "Type of sender.",
                                    "name": "sender",
                                    "options": [
                                        "Machine",
                                        "User"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "User"
                                },
                                "sender_name": {
                                    "advanced": true,
                                    "display_name": "Sender Name",
                                    "dynamic": false,
                                    "info": "Name of the sender.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "sender_name",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "User"
                                },
                                "session_id": {
                                    "advanced": true,
                                    "display_name": "Session ID",
                                    "dynamic": false,
                                    "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "session_id",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "should_store_message": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Store Messages",
                                    "dynamic": false,
                                    "info": "Store the message in the history.",
                                    "list": false,
                                    "name": "should_store_message",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "text_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Text Color",
                                    "dynamic": false,
                                    "info": "The text color of the name",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "text_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                }
                            }
                        },
                        "type": "ChatInput"
                    },
                    "dragging": false,
                    "height": 234,
                    "id": "ChatInput-VApZJ",
                    "measured": {
                        "height": 234,
                        "width": 360
                    },
                    "position": {
                        "x": 516.7529480335185,
                        "y": 237.04967879541528
                    },
                    "positionAbsolute": {
                        "x": 516.7529480335185,
                        "y": 237.04967879541528
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "description": "Display a chat message in the Playground.",
                        "display_name": "Chat Output",
                        "id": "ChatOutput-8lufz",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Display a chat message in the Playground.",
                            "display_name": "Chat Output",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "input_value",
                                "should_store_message",
                                "sender",
                                "sender_name",
                                "session_id",
                                "data_template",
                                "background_color",
                                "chat_icon",
                                "text_color"
                            ],
                            "frozen": false,
                            "icon": "MessagesSquare",
                            "legacy": false,
                            "lf_version": "1.0.19.post2",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "message_response",
                                    "name": "message",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "background_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Background Color",
                                    "dynamic": false,
                                    "info": "The background color of the icon.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "background_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "chat_icon": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Icon",
                                    "dynamic": false,
                                    "info": "The icon of the message.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "chat_icon",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, MessageInput, MessageTextInput, Output\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        MessageInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            source_dict[\"source\"] = source\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n        background_color = self.background_color\n        text_color = self.text_color\n        if self.chat_icon:\n            icon = self.chat_icon\n        message = self.input_value if isinstance(self.input_value, Message) else Message(text=self.input_value)\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n        message.properties.icon = icon\n        message.properties.background_color = background_color\n        message.properties.text_color = text_color\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n"
                                },
                                "data_template": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Data Template",
                                    "dynamic": false,
                                    "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "data_template",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "{text}"
                                },
                                "input_value": {
                                    "_input_type": "MessageInput",
                                    "advanced": false,
                                    "display_name": "Text",
                                    "dynamic": false,
                                    "info": "Message to be passed as output.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "sender": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Sender Type",
                                    "dynamic": false,
                                    "info": "Type of sender.",
                                    "name": "sender",
                                    "options": [
                                        "Machine",
                                        "User"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Machine"
                                },
                                "sender_name": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Sender Name",
                                    "dynamic": false,
                                    "info": "Name of the sender.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "sender_name",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "AI"
                                },
                                "session_id": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Session ID",
                                    "dynamic": false,
                                    "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "session_id",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "should_store_message": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Store Messages",
                                    "dynamic": false,
                                    "info": "Store the message in the history.",
                                    "list": false,
                                    "name": "should_store_message",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "text_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Text Color",
                                    "dynamic": false,
                                    "info": "The text color of the name",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "text_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "ChatOutput"
                    },
                    "dragging": false,
                    "height": 234,
                    "id": "ChatOutput-8lufz",
                    "measured": {
                        "height": 234,
                        "width": 360
                    },
                    "position": {
                        "x": 1631.3766926569258,
                        "y": 136.66509468115308
                    },
                    "positionAbsolute": {
                        "x": 1631.3766926569258,
                        "y": 136.66509468115308
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "description": "Convert Data into plain text following a specified template.",
                        "display_name": "Parse Data",
                        "id": "ParseData-IJwYj",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Convert Data into plain text following a specified template.",
                            "display_name": "Parse Data",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "data",
                                "template",
                                "sep"
                            ],
                            "frozen": false,
                            "icon": "message-square",
                            "legacy": false,
                            "lf_version": "1.0.19.post2",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "parse_data",
                                    "name": "text",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                },
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Data List",
                                    "method": "parse_data_as_list",
                                    "name": "data_list",
                                    "selected": "Data",
                                    "types": [
                                        "Data"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text, data_to_text_list\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Data to Message\"\n    description = \"Convert Data objects into Messages using any {field_name} from input data.\"\n    icon = \"message-square\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\", is_list=True, required=True),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n            required=True,\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"text\",\n            info=\"Data as a single Message, with each input Data separated by Separator\",\n            method=\"parse_data\",\n        ),\n        Output(\n            display_name=\"Data List\",\n            name=\"data_list\",\n            info=\"Data as a list of new Data, each having `text` formatted by Template\",\n            method=\"parse_data_as_list\",\n        ),\n    ]\n\n    def _clean_args(self) -> tuple[list[Data], str, str]:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n        sep = self.sep\n        return data, template, sep\n\n    def parse_data(self) -> Message:\n        data, template, sep = self._clean_args()\n        result_string = data_to_text(template, data, sep)\n        self.status = result_string\n        return Message(text=result_string)\n\n    def parse_data_as_list(self) -> list[Data]:\n        data, template, _ = self._clean_args()\n        text_list, data_list = data_to_text_list(template, data)\n        for item, text in zip(data_list, text_list, strict=True):\n            item.set_text(text)\n        self.status = data_list\n        return data_list\n"
                                },
                                "data": {
                                    "advanced": false,
                                    "display_name": "Data",
                                    "dynamic": false,
                                    "info": "The data to convert to text.",
                                    "input_types": [
                                        "Data"
                                    ],
                                    "list": true,
                                    "name": "data",
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "other",
                                    "value": ""
                                },
                                "sep": {
                                    "advanced": true,
                                    "display_name": "Separator",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "sep",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "\n"
                                },
                                "template": {
                                    "advanced": false,
                                    "display_name": "Template",
                                    "dynamic": false,
                                    "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "template",
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "{text}"
                                }
                            }
                        },
                        "type": "ParseData"
                    },
                    "dragging": false,
                    "height": 302,
                    "id": "ParseData-IJwYj",
                    "measured": {
                        "height": 302,
                        "width": 360
                    },
                    "position": {
                        "x": 514.8054600415829,
                        "y": -117.1921617826383
                    },
                    "positionAbsolute": {
                        "x": 514.8054600415829,
                        "y": -117.1921617826383
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "id": "note-bAopU",
                        "node": {
                            "description": "## Get Your OpenAI API Key\n\n**Steps**:\n\n1. **Visit** [OpenAI's API Key Page](https://platform.openai.com/api-keys).\n\n2. **Log In/Sign Up**:\n   - Log in or create a new OpenAI account.\n\n3. **Generate API Key**:\n   - Click \"Create New Secret Key\" to obtain your key.\n\n4. **Store Your Key Securely**:\n   - Note it down as it will only display once.\n\n5. **Enter API Key**:\n   - Input your key in the OpenAI API Key field within the component setup.\n\nKeep your key safe and manage it responsibly!",
                            "display_name": "",
                            "documentation": "",
                            "template": {
                                "backgroundColor": "rose"
                            }
                        },
                        "type": "note"
                    },
                    "dragging": true,
                    "height": 325,
                    "id": "note-bAopU",
                    "measured": {
                        "height": 325,
                        "width": 328
                    },
                    "position": {
                        "x": 1253.2038187140245,
                        "y": -421.5721019678553
                    },
                    "positionAbsolute": {
                        "x": 1253.2038187140245,
                        "y": -421.5721019678553
                    },
                    "selected": false,
                    "type": "noteNode",
                    "width": 325
                },
                {
                    "data": {
                        "id": "note-XuFcb",
                        "node": {
                            "description": "# Document Q&A\n\n**Purpose:**\nThis flow leverages a language model to answer questions based on content from a loaded document. It's ideal for obtaining quick insights from PDFs or other text files by asking direct questions.\n\n**Components**:\n1. **File Component**: Loads and processes your document in supported formats.\n2. **Parse Data**: Converts the loaded document into text using a specified template for consistent processing.\n3. **Prompt Component**: Forms a structured query by combining the parsed document content with user questions.\n4. **OpenAI Model**: Engages OpenAI's language model to generate responses to queries based on the document context.\n5. **Chat Input/Output**: Facilitates user queries and displays AI-generated answers seamlessly.\n\n**Steps to Use**:\n1. **Upload Document**: Use the \"File\" component to upload a document or text file you want to query.\n2. **Enter Question**: Through the \"Chat Input\" field, type your question related to the document content.\n3. **Run the Flow**: Activate the flow to process the input and generate an answer using the OpenAI model.\n4. **View Response**: Read the generated answer in the \"Chat Output\" field for immediate insights.\n\n**Benefits**:\n- Simplifies the process of extracting information from documents.\n- Provides a user-friendly interface for interactive document exploration using AI.\n",
                            "display_name": "",
                            "documentation": "",
                            "template": {}
                        },
                        "type": "note"
                    },
                    "dragging": false,
                    "height": 452,
                    "id": "note-XuFcb",
                    "measured": {
                        "height": 452,
                        "width": 328
                    },
                    "position": {
                        "x": -338.7070086205371,
                        "y": -177.11912020709357
                    },
                    "positionAbsolute": {
                        "x": -338.7070086205371,
                        "y": -177.11912020709357
                    },
                    "resizing": false,
                    "selected": false,
                    "style": {
                        "height": 452,
                        "width": 469
                    },
                    "type": "noteNode",
                    "width": 469
                },
                {
                    "data": {
                        "id": "File-wUadf",
                        "node": {
                            "base_classes": [
                                "Data"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Load a file to be used in your project.",
                            "display_name": "File",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "path",
                                "silent_errors",
                                "use_multithreading",
                                "concurrency_multithreading"
                            ],
                            "frozen": false,
                            "icon": "file-text",
                            "legacy": false,
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Data",
                                    "method": "load_files",
                                    "name": "data",
                                    "required_inputs": [],
                                    "selected": "Data",
                                    "types": [
                                        "Data"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.base.data import BaseFileComponent\nfrom langflow.base.data.utils import TEXT_FILE_TYPES, parallel_load_data, parse_text_file_to_data\nfrom langflow.io import BoolInput, IntInput\nfrom langflow.schema import Data\n\n\nclass FileComponent(BaseFileComponent):\n    \"\"\"Handles loading and processing of individual or zipped text files.\n\n    This component supports processing multiple valid files within a zip archive,\n    resolving paths, validating file types, and optionally using multithreading for processing.\n    \"\"\"\n\n    display_name = \"File\"\n    description = \"Load a file to be used in your project.\"\n    icon = \"file-text\"\n    name = \"File\"\n\n    VALID_EXTENSIONS = TEXT_FILE_TYPES\n\n    inputs = [\n        *BaseFileComponent._base_inputs,\n        BoolInput(\n            name=\"use_multithreading\",\n            display_name=\"[Deprecated] Use Multithreading\",\n            advanced=True,\n            value=True,\n            info=\"Set 'Processing Concurrency' greater than 1 to enable multithreading.\",\n        ),\n        IntInput(\n            name=\"concurrency_multithreading\",\n            display_name=\"Processing Concurrency\",\n            advanced=True,\n            info=\"When multiple files are being processed, the number of files to process concurrently.\",\n            value=1,\n        ),\n    ]\n\n    outputs = [\n        *BaseFileComponent._base_outputs,\n    ]\n\n    def process_files(self, file_list: list[BaseFileComponent.BaseFile]) -> list[BaseFileComponent.BaseFile]:\n        \"\"\"Processes files either sequentially or in parallel, depending on concurrency settings.\n\n        Args:\n            file_list (list[BaseFileComponent.BaseFile]): List of files to process.\n\n        Returns:\n            list[BaseFileComponent.BaseFile]: Updated list of files with merged data.\n        \"\"\"\n\n        def process_file(file_path: str, *, silent_errors: bool = False) -> Data | None:\n            \"\"\"Processes a single file and returns its Data object.\"\"\"\n            try:\n                return parse_text_file_to_data(file_path, silent_errors=silent_errors)\n            except FileNotFoundError as e:\n                msg = f\"File not found: {file_path}. Error: {e}\"\n                self.log(msg)\n                if not silent_errors:\n                    raise\n                return None\n            except Exception as e:\n                msg = f\"Unexpected error processing {file_path}: {e}\"\n                self.log(msg)\n                if not silent_errors:\n                    raise\n                return None\n\n        if not file_list:\n            msg = \"No files to process.\"\n            raise ValueError(msg)\n\n        concurrency = 1 if not self.use_multithreading else max(1, self.concurrency_multithreading)\n        file_count = len(file_list)\n\n        parallel_processing_threshold = 2\n        if concurrency < parallel_processing_threshold or file_count < parallel_processing_threshold:\n            if file_count > 1:\n                self.log(f\"Processing {file_count} files sequentially.\")\n            processed_data = [process_file(str(file.path), silent_errors=self.silent_errors) for file in file_list]\n        else:\n            self.log(f\"Starting parallel processing of {file_count} files with concurrency: {concurrency}.\")\n            file_paths = [str(file.path) for file in file_list]\n            processed_data = parallel_load_data(\n                file_paths,\n                silent_errors=self.silent_errors,\n                load_function=process_file,\n                max_concurrency=concurrency,\n            )\n\n        # Use rollup_basefile_data to merge processed data with BaseFile objects\n        return self.rollup_data(file_list, processed_data)\n"
                                },
                                "concurrency_multithreading": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Processing Concurrency",
                                    "dynamic": false,
                                    "info": "When multiple files are being processed, the number of files to process concurrently.",
                                    "list": false,
                                    "name": "concurrency_multithreading",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 4
                                },
                                "delete_server_file_after_processing": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Delete Server File After Processing",
                                    "dynamic": false,
                                    "info": "If true, the Server File Path will be deleted after processing.",
                                    "list": false,
                                    "name": "delete_server_file_after_processing",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "file_path": {
                                    "_input_type": "HandleInput",
                                    "advanced": true,
                                    "display_name": "Server File Path",
                                    "dynamic": false,
                                    "info": "Data object with a 'file_path' property pointing to server file or a Message object with a path to the file. Supercedes 'Path' but supports same file types.",
                                    "input_types": [
                                        "Data",
                                        "Message"
                                    ],
                                    "list": true,
                                    "name": "file_path",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "other",
                                    "value": ""
                                },
                                "ignore_unspecified_files": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Ignore Unspecified Files",
                                    "dynamic": false,
                                    "info": "If true, Data with no 'file_path' property will be ignored.",
                                    "list": false,
                                    "name": "ignore_unspecified_files",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "ignore_unsupported_extensions": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Ignore Unsupported Extensions",
                                    "dynamic": false,
                                    "info": "If true, files with unsupported extensions will not be processed.",
                                    "list": false,
                                    "name": "ignore_unsupported_extensions",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "path": {
                                    "_input_type": "FileInput",
                                    "advanced": false,
                                    "display_name": "Path",
                                    "dynamic": false,
                                    "fileTypes": [
                                        "txt",
                                        "md",
                                        "mdx",
                                        "csv",
                                        "json",
                                        "yaml",
                                        "yml",
                                        "xml",
                                        "html",
                                        "htm",
                                        "pdf",
                                        "docx",
                                        "py",
                                        "sh",
                                        "sql",
                                        "js",
                                        "ts",
                                        "tsx",
                                        "zip",
                                        "tar",
                                        "tgz",
                                        "bz2",
                                        "gz"
                                    ],
                                    "file_path": "",
                                    "info": "Supported file extensions: txt, md, mdx, csv, json, yaml, yml, xml, html, htm, pdf, docx, py, sh, sql, js, ts, tsx; optionally bundled in file extensions: zip, tar, tgz, bz2, gz",
                                    "list": false,
                                    "name": "path",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "file",
                                    "value": ""
                                },
                                "silent_errors": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Silent Errors",
                                    "dynamic": false,
                                    "info": "If true, errors will not raise an exception.",
                                    "list": false,
                                    "name": "silent_errors",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "use_multithreading": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "[Deprecated] Use Multithreading",
                                    "dynamic": false,
                                    "info": "Set 'Processing Concurrency' greater than 1 to enable multithreading.",
                                    "list": false,
                                    "name": "use_multithreading",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": false
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "File"
                    },
                    "dragging": false,
                    "height": 232,
                    "id": "File-wUadf",
                    "measured": {
                        "height": 232,
                        "width": 360
                    },
                    "position": {
                        "x": 150.6029945346864,
                        "y": -88.71582365936283
                    },
                    "positionAbsolute": {
                        "x": 155.39382083637838,
                        "y": -82.32805525710685
                    },
                    "selected": true,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "description": "Create a prompt template with dynamic variables.",
                        "display_name": "Prompt",
                        "id": "Prompt-5ubri",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {
                                "template": [
                                    "Document"
                                ]
                            },
                            "description": "Create a prompt template with dynamic variables.",
                            "display_name": "Prompt",
                            "documentation": "",
                            "edited": false,
                            "error": null,
                            "field_order": [
                                "template"
                            ],
                            "frozen": false,
                            "full_path": null,
                            "icon": "prompts",
                            "is_composition": null,
                            "is_input": null,
                            "is_output": null,
                            "legacy": false,
                            "lf_version": "1.0.19.post2",
                            "metadata": {},
                            "name": "",
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Prompt Message",
                                    "method": "build_prompt",
                                    "name": "prompt",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "Document": {
                                    "advanced": false,
                                    "display_name": "Document",
                                    "dynamic": false,
                                    "field_type": "str",
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "input_types": [
                                        "Message",
                                        "Text"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "Document",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": ""
                                },
                                "_type": "Component",
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import MessageTextInput, Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            tool_mode=True,\n            advanced=True,\n            info=\"A placeholder input for tool mode.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    async def update_frontend_node(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = await super().update_frontend_node(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n"
                                },
                                "template": {
                                    "advanced": false,
                                    "display_name": "Template",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "template",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "type": "prompt",
                                    "value": "Answer user's questions based on the document below:\n\n---\n\n{Document}\n\n---\n\nQuestion:"
                                },
                                "tool_placeholder": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Tool Placeholder",
                                    "dynamic": false,
                                    "info": "A placeholder input for tool mode.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "tool_placeholder",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": true,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "Prompt"
                    },
                    "dragging": false,
                    "height": 347,
                    "id": "Prompt-5ubri",
                    "measured": {
                        "height": 347,
                        "width": 360
                    },
                    "position": {
                        "x": 882.4192413332464,
                        "y": -63.08797684105531
                    },
                    "positionAbsolute": {
                        "x": 895.1947781377585,
                        "y": -59.89409263992732
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "id": "OpenAIModel-toIc8",
                        "node": {
                            "base_classes": [
                                "LanguageModel",
                                "Message"
                            ],
                            "beta": false,
                            "category": "models",
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Generates text using OpenAI LLMs.",
                            "display_name": "OpenAI",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "input_value",
                                "system_message",
                                "stream",
                                "max_tokens",
                                "model_kwargs",
                                "json_mode",
                                "model_name",
                                "openai_api_base",
                                "api_key",
                                "temperature",
                                "seed"
                            ],
                            "frozen": false,
                            "icon": "OpenAI",
                            "key": "OpenAIModel",
                            "legacy": false,
                            "metadata": {},
                            "minimized": false,
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "text_response",
                                    "name": "text_output",
                                    "required_inputs": [],
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                },
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Language Model",
                                    "method": "build_model",
                                    "name": "model_output",
                                    "required_inputs": [
                                        "api_key"
                                    ],
                                    "selected": "LanguageModel",
                                    "types": [
                                        "LanguageModel"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "score": 0.14285714285714285,
                            "template": {
                                "_type": "Component",
                                "api_key": {
                                    "_input_type": "SecretStrInput",
                                    "advanced": false,
                                    "display_name": "OpenAI API Key",
                                    "dynamic": false,
                                    "info": "The OpenAI API Key to use for the OpenAI model.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "load_from_db": true,
                                    "name": "api_key",
                                    "password": true,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": "OPENAI_API_KEY"
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.openai_constants import OPENAI_MODEL_NAMES\nfrom langflow.field_typing import LanguageModel\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.inputs import BoolInput, DictInput, DropdownInput, IntInput, SecretStrInput, SliderInput, StrInput\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIModel\"\n\n    inputs = [\n        *LCModelComponent._base_inputs,\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            range_spec=RangeSpec(min=0, max=128000),\n        ),\n        DictInput(\n            name=\"model_kwargs\",\n            display_name=\"Model Kwargs\",\n            advanced=True,\n            info=\"Additional keyword arguments to pass to the model.\",\n        ),\n        BoolInput(\n            name=\"json_mode\",\n            display_name=\"JSON Mode\",\n            advanced=True,\n            info=\"If True, it will output JSON regardless of passing a schema.\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            advanced=False,\n            options=OPENAI_MODEL_NAMES,\n            value=OPENAI_MODEL_NAMES[0],\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. \"\n            \"Defaults to https://api.openai.com/v1. \"\n            \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n            required=True,\n        ),\n        SliderInput(\n            name=\"temperature\", display_name=\"Temperature\", value=0.1, range_spec=RangeSpec(min=0, max=2, step=0.01)\n        ),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        openai_api_key = self.api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\n        json_mode = self.json_mode\n        seed = self.seed\n\n        api_key = SecretStr(openai_api_key).get_secret_value() if openai_api_key else None\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature if temperature is not None else 0.1,\n            seed=seed,\n        )\n        if json_mode:\n            output = output.bind(response_format={\"type\": \"json_object\"})\n\n        return output\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"Get a message from an OpenAI exception.\n\n        Args:\n            e (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return None\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")\n            if message:\n                return message\n        return None\n"
                                },
                                "input_value": {
                                    "_input_type": "MessageInput",
                                    "advanced": false,
                                    "display_name": "Input",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "json_mode": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "JSON Mode",
                                    "dynamic": false,
                                    "info": "If True, it will output JSON regardless of passing a schema.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "json_mode",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "max_tokens": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Max Tokens",
                                    "dynamic": false,
                                    "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "max_tokens",
                                    "placeholder": "",
                                    "range_spec": {
                                        "max": 128000,
                                        "min": 0,
                                        "step": 0.1,
                                        "step_type": "float"
                                    },
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": ""
                                },
                                "model_kwargs": {
                                    "_input_type": "DictInput",
                                    "advanced": true,
                                    "display_name": "Model Kwargs",
                                    "dynamic": false,
                                    "info": "Additional keyword arguments to pass to the model.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "model_kwargs",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "type": "dict",
                                    "value": {}
                                },
                                "model_name": {
                                    "_input_type": "DropdownInput",
                                    "advanced": false,
                                    "combobox": false,
                                    "dialog_inputs": {},
                                    "display_name": "Model Name",
                                    "dynamic": false,
                                    "info": "",
                                    "name": "model_name",
                                    "options": [
                                        "gpt-4o-mini",
                                        "gpt-4o",
                                        "gpt-4-turbo",
                                        "gpt-4-turbo-preview",
                                        "gpt-4",
                                        "gpt-3.5-turbo",
                                        "gpt-3.5-turbo-0125"
                                    ],
                                    "options_metadata": [],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "gpt-4o-mini"
                                },
                                "openai_api_base": {
                                    "_input_type": "StrInput",
                                    "advanced": true,
                                    "display_name": "OpenAI API Base",
                                    "dynamic": false,
                                    "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "name": "openai_api_base",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "seed": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Seed",
                                    "dynamic": false,
                                    "info": "The seed controls the reproducibility of the job.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "seed",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 1
                                },
                                "stream": {
                                    "_input_type": "BoolInput",
                                    "advanced": false,
                                    "display_name": "Stream",
                                    "dynamic": false,
                                    "info": "Stream the response from the model. Streaming works only in Chat.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "stream",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "system_message": {
                                    "_input_type": "MultilineInput",
                                    "advanced": false,
                                    "display_name": "System Message",
                                    "dynamic": false,
                                    "info": "System message to pass to the model.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "system_message",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "temperature": {
                                    "_input_type": "SliderInput",
                                    "advanced": false,
                                    "display_name": "Temperature",
                                    "dynamic": false,
                                    "info": "",
                                    "max_label": "",
                                    "max_label_icon": "",
                                    "min_label": "",
                                    "min_label_icon": "",
                                    "name": "temperature",
                                    "placeholder": "",
                                    "range_spec": {
                                        "max": 2,
                                        "min": 0,
                                        "step": 0.01,
                                        "step_type": "float"
                                    },
                                    "required": false,
                                    "show": true,
                                    "slider_buttons": false,
                                    "slider_buttons_options": [],
                                    "slider_input": false,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "type": "slider",
                                    "value": 0.1
                                }
                            },
                            "tool_mode": false
                        },
                        "showNode": true,
                        "type": "OpenAIModel"
                    },
                    "dragging": false,
                    "id": "OpenAIModel-toIc8",
                    "measured": {
                        "height": 734,
                        "width": 360
                    },
                    "position": {
                        "x": 1257.1422612381514,
                        "y": -99.92567023810267
                    },
                    "selected": false,
                    "type": "genericNode"
                }
            ],
            "viewport": {
                "x": 285.05178335748246,
                "y": 410.84335125276027,
                "zoom": 0.6261967792362849
            }
        },
        "is_component": false,
        "updated_at": "2025-01-25T04:58:25+00:00",
        "webhook": false,
        "endpoint_name": null,
        "tags": [
            "rag",
            "q-a",
            "openai"
        ],
        "locked": false,
        "id": "995a494e-3670-46a7-9ac4-3317d812c6fc",
        "user_id": null,
        "folder_id": "c54584e6-88eb-4ac0-b70c-68aee37fdce2"
    },
    {
        "name": "Market Research",
        "description": "Researches companies, extracts key business data, and presents structured information for efficient analysis. ",
        "icon": "PieChart",
        "icon_bg_color": null,
        "gradient": "1",
        "data": {
            "edges": [
                {
                    "animated": false,
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "StructuredOutputComponent",
                            "id": "StructuredOutputComponent-y5YEE",
                            "name": "structured_output",
                            "output_types": [
                                "Data"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "data",
                            "id": "ParseData-8KK2E",
                            "inputTypes": [
                                "Data"
                            ],
                            "type": "other"
                        }
                    },
                    "id": "reactflow__edge-StructuredOutputComponent-y5YEE{\u0153dataType\u0153:\u0153StructuredOutputComponent\u0153,\u0153id\u0153:\u0153StructuredOutputComponent-y5YEE\u0153,\u0153name\u0153:\u0153structured_output\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}-ParseData-8KK2E{\u0153fieldName\u0153:\u0153data\u0153,\u0153id\u0153:\u0153ParseData-8KK2E\u0153,\u0153inputTypes\u0153:[\u0153Data\u0153],\u0153type\u0153:\u0153other\u0153}",
                    "selected": false,
                    "source": "StructuredOutputComponent-y5YEE",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153StructuredOutputComponent\u0153, \u0153id\u0153: \u0153StructuredOutputComponent-y5YEE\u0153, \u0153name\u0153: \u0153structured_output\u0153, \u0153output_types\u0153: [\u0153Data\u0153]}",
                    "target": "ParseData-8KK2E",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153data\u0153, \u0153id\u0153: \u0153ParseData-8KK2E\u0153, \u0153inputTypes\u0153: [\u0153Data\u0153], \u0153type\u0153: \u0153other\u0153}"
                },
                {
                    "animated": false,
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "ParseData",
                            "id": "ParseData-8KK2E",
                            "name": "text",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "input_value",
                            "id": "ChatOutput-gEsYh",
                            "inputTypes": [
                                "Message"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "reactflow__edge-ParseData-8KK2E{\u0153dataType\u0153:\u0153ParseData\u0153,\u0153id\u0153:\u0153ParseData-8KK2E\u0153,\u0153name\u0153:\u0153text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-ChatOutput-gEsYh{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153ChatOutput-gEsYh\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "selected": false,
                    "source": "ParseData-8KK2E",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153ParseData\u0153, \u0153id\u0153: \u0153ParseData-8KK2E\u0153, \u0153name\u0153: \u0153text\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "ChatOutput-gEsYh",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153input_value\u0153, \u0153id\u0153: \u0153ChatOutput-gEsYh\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "animated": false,
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "ChatInput",
                            "id": "ChatInput-vuvZ4",
                            "name": "message",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "input_value",
                            "id": "Agent-lyqby",
                            "inputTypes": [
                                "Message"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "reactflow__edge-ChatInput-vuvZ4{\u0153dataType\u0153:\u0153ChatInput\u0153,\u0153id\u0153:\u0153ChatInput-vuvZ4\u0153,\u0153name\u0153:\u0153message\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-Agent-lyqby{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153Agent-lyqby\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "selected": false,
                    "source": "ChatInput-vuvZ4",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153ChatInput\u0153, \u0153id\u0153: \u0153ChatInput-vuvZ4\u0153, \u0153name\u0153: \u0153message\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "Agent-lyqby",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153input_value\u0153, \u0153id\u0153: \u0153Agent-lyqby\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "animated": false,
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "Agent",
                            "id": "Agent-lyqby",
                            "name": "response",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "input_value",
                            "id": "StructuredOutputComponent-y5YEE",
                            "inputTypes": [
                                "Message"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "reactflow__edge-Agent-lyqby{\u0153dataType\u0153:\u0153Agent\u0153,\u0153id\u0153:\u0153Agent-lyqby\u0153,\u0153name\u0153:\u0153response\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-StructuredOutputComponent-y5YEE{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153StructuredOutputComponent-y5YEE\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "selected": false,
                    "source": "Agent-lyqby",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153Agent\u0153, \u0153id\u0153: \u0153Agent-lyqby\u0153, \u0153name\u0153: \u0153response\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "StructuredOutputComponent-y5YEE",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153input_value\u0153, \u0153id\u0153: \u0153StructuredOutputComponent-y5YEE\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "animated": false,
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "TavilySearchComponent",
                            "id": "TavilySearchComponent-Gv4zn",
                            "name": "component_as_tool",
                            "output_types": [
                                "Tool"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "tools",
                            "id": "Agent-lyqby",
                            "inputTypes": [
                                "Tool"
                            ],
                            "type": "other"
                        }
                    },
                    "id": "reactflow__edge-TavilySearchComponent-Gv4zn{\u0153dataType\u0153:\u0153TavilySearchComponent\u0153,\u0153id\u0153:\u0153TavilySearchComponent-Gv4zn\u0153,\u0153name\u0153:\u0153component_as_tool\u0153,\u0153output_types\u0153:[\u0153Tool\u0153]}-Agent-lyqby{\u0153fieldName\u0153:\u0153tools\u0153,\u0153id\u0153:\u0153Agent-lyqby\u0153,\u0153inputTypes\u0153:[\u0153Tool\u0153],\u0153type\u0153:\u0153other\u0153}",
                    "source": "TavilySearchComponent-Gv4zn",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153TavilySearchComponent\u0153, \u0153id\u0153: \u0153TavilySearchComponent-Gv4zn\u0153, \u0153name\u0153: \u0153component_as_tool\u0153, \u0153output_types\u0153: [\u0153Tool\u0153]}",
                    "target": "Agent-lyqby",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153tools\u0153, \u0153id\u0153: \u0153Agent-lyqby\u0153, \u0153inputTypes\u0153: [\u0153Tool\u0153], \u0153type\u0153: \u0153other\u0153}"
                },
                {
                    "data": {
                        "sourceHandle": {
                            "dataType": "OpenAIModel",
                            "id": "OpenAIModel-Yo7s2",
                            "name": "model_output",
                            "output_types": [
                                "LanguageModel"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "llm",
                            "id": "StructuredOutputComponent-y5YEE",
                            "inputTypes": [
                                "LanguageModel"
                            ],
                            "type": "other"
                        }
                    },
                    "id": "xy-edge__OpenAIModel-Yo7s2{\u0153dataType\u0153:\u0153OpenAIModel\u0153,\u0153id\u0153:\u0153OpenAIModel-Yo7s2\u0153,\u0153name\u0153:\u0153model_output\u0153,\u0153output_types\u0153:[\u0153LanguageModel\u0153]}-StructuredOutputComponent-y5YEE{\u0153fieldName\u0153:\u0153llm\u0153,\u0153id\u0153:\u0153StructuredOutputComponent-y5YEE\u0153,\u0153inputTypes\u0153:[\u0153LanguageModel\u0153],\u0153type\u0153:\u0153other\u0153}",
                    "source": "OpenAIModel-Yo7s2",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153OpenAIModel\u0153, \u0153id\u0153: \u0153OpenAIModel-Yo7s2\u0153, \u0153name\u0153: \u0153model_output\u0153, \u0153output_types\u0153: [\u0153LanguageModel\u0153]}",
                    "target": "StructuredOutputComponent-y5YEE",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153llm\u0153, \u0153id\u0153: \u0153StructuredOutputComponent-y5YEE\u0153, \u0153inputTypes\u0153: [\u0153LanguageModel\u0153], \u0153type\u0153: \u0153other\u0153}"
                }
            ],
            "nodes": [
                {
                    "data": {
                        "description": "Get chat inputs from the Playground.",
                        "display_name": "Chat Input",
                        "id": "ChatInput-vuvZ4",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Get chat inputs from the Playground.",
                            "display_name": "Chat Input",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "input_value",
                                "should_store_message",
                                "sender",
                                "sender_name",
                                "session_id",
                                "files",
                                "background_color",
                                "chat_icon",
                                "text_color"
                            ],
                            "frozen": false,
                            "icon": "MessagesSquare",
                            "legacy": false,
                            "lf_version": "1.1.1",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "message_response",
                                    "name": "message",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "background_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Background Color",
                                    "dynamic": false,
                                    "info": "The background color of the icon.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "background_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "chat_icon": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Icon",
                                    "dynamic": false,
                                    "info": "The icon of the message.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "chat_icon",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import (\n    DropdownInput,\n    FileInput,\n    MessageTextInput,\n    MultilineInput,\n    Output,\n)\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_USER,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatInput\"\n    minimized = True\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n            input_types=[],\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    async def message_response(self) -> Message:\n        background_color = self.background_color\n        text_color = self.text_color\n        icon = self.chat_icon\n\n        message = await Message.create(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n            properties={\n                \"background_color\": background_color,\n                \"text_color\": text_color,\n                \"icon\": icon,\n            },\n        )\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n"
                                },
                                "files": {
                                    "_input_type": "FileInput",
                                    "advanced": true,
                                    "display_name": "Files",
                                    "dynamic": false,
                                    "fileTypes": [
                                        "txt",
                                        "md",
                                        "mdx",
                                        "csv",
                                        "json",
                                        "yaml",
                                        "yml",
                                        "xml",
                                        "html",
                                        "htm",
                                        "pdf",
                                        "docx",
                                        "py",
                                        "sh",
                                        "sql",
                                        "js",
                                        "ts",
                                        "tsx",
                                        "jpg",
                                        "jpeg",
                                        "png",
                                        "bmp",
                                        "image"
                                    ],
                                    "file_path": "",
                                    "info": "Files to be sent with the message.",
                                    "list": true,
                                    "name": "files",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "file",
                                    "value": ""
                                },
                                "input_value": {
                                    "_input_type": "MultilineInput",
                                    "advanced": false,
                                    "display_name": "Text",
                                    "dynamic": false,
                                    "info": "Message to be passed as input.",
                                    "input_types": [],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Amazon"
                                },
                                "sender": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Sender Type",
                                    "dynamic": false,
                                    "info": "Type of sender.",
                                    "name": "sender",
                                    "options": [
                                        "Machine",
                                        "User"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "User"
                                },
                                "sender_name": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Sender Name",
                                    "dynamic": false,
                                    "info": "Name of the sender.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "sender_name",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "User"
                                },
                                "session_id": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Session ID",
                                    "dynamic": false,
                                    "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "session_id",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "should_store_message": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Store Messages",
                                    "dynamic": false,
                                    "info": "Store the message in the history.",
                                    "list": false,
                                    "name": "should_store_message",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "text_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Text Color",
                                    "dynamic": false,
                                    "info": "The text color of the name",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "text_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                }
                            }
                        },
                        "type": "ChatInput"
                    },
                    "dragging": false,
                    "height": 234,
                    "id": "ChatInput-vuvZ4",
                    "measured": {
                        "height": 234,
                        "width": 360
                    },
                    "position": {
                        "x": 472.38251755471583,
                        "y": 889.8398446936101
                    },
                    "positionAbsolute": {
                        "x": 472.38251755471583,
                        "y": 889.8398446936101
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "description": "Display a chat message in the Playground.",
                        "display_name": "Chat Output",
                        "id": "ChatOutput-gEsYh",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Display a chat message in the Playground.",
                            "display_name": "Chat Output",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "input_value",
                                "should_store_message",
                                "sender",
                                "sender_name",
                                "session_id",
                                "data_template",
                                "background_color",
                                "chat_icon",
                                "text_color"
                            ],
                            "frozen": false,
                            "icon": "MessagesSquare",
                            "legacy": false,
                            "lf_version": "1.1.1",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "message_response",
                                    "name": "message",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "background_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Background Color",
                                    "dynamic": false,
                                    "info": "The background color of the icon.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "background_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "chat_icon": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Icon",
                                    "dynamic": false,
                                    "info": "The icon of the message.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "chat_icon",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, MessageInput, MessageTextInput, Output\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        MessageInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            source_dict[\"source\"] = source\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n        background_color = self.background_color\n        text_color = self.text_color\n        if self.chat_icon:\n            icon = self.chat_icon\n        message = self.input_value if isinstance(self.input_value, Message) else Message(text=self.input_value)\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n        message.properties.icon = icon\n        message.properties.background_color = background_color\n        message.properties.text_color = text_color\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n"
                                },
                                "data_template": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Data Template",
                                    "dynamic": false,
                                    "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "data_template",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "{text}"
                                },
                                "input_value": {
                                    "_input_type": "MessageInput",
                                    "advanced": false,
                                    "display_name": "Text",
                                    "dynamic": false,
                                    "info": "Message to be passed as output.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "sender": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Sender Type",
                                    "dynamic": false,
                                    "info": "Type of sender.",
                                    "name": "sender",
                                    "options": [
                                        "Machine",
                                        "User"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Machine"
                                },
                                "sender_name": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Sender Name",
                                    "dynamic": false,
                                    "info": "Name of the sender.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "sender_name",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "AI"
                                },
                                "session_id": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Session ID",
                                    "dynamic": false,
                                    "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "session_id",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "should_store_message": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Store Messages",
                                    "dynamic": false,
                                    "info": "Store the message in the history.",
                                    "list": false,
                                    "name": "should_store_message",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "text_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Text Color",
                                    "dynamic": false,
                                    "info": "The text color of the name",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "text_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "ChatOutput"
                    },
                    "dragging": false,
                    "height": 234,
                    "id": "ChatOutput-gEsYh",
                    "measured": {
                        "height": 234,
                        "width": 360
                    },
                    "position": {
                        "x": 2518.282039019285,
                        "y": 855.3686932779933
                    },
                    "positionAbsolute": {
                        "x": 2518.282039019285,
                        "y": 855.3686932779933
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "id": "note-siDHB",
                        "node": {
                            "description": "The StructuredOutputComponent, when utilized with our company information schema, performs the following functions:\n\n1. Accepts an input query regarding a company.\n2. Employs a Language Model (LLM) to analyze the query.\n3. Instructs the LLM to generate a structured response adhering to the predefined schema:\n   - Domain\n   - LinkedIn URL\n   - Cheapest Plan\n   - Has Free Trial\n   - Has Enterprise Plan\n   - Has API\n   - Market\n   - Pricing Tiers\n   - Key Features\n   - Target Industries\n\n4. Validates the LLM output against this schema.\n5. Returns a Data object containing the company information structured according to the schema.\n\nIn essence, this component transforms a free-text query about a company into a structured, consistent dataset, facilitating subsequent analysis and application of the information.",
                            "display_name": "",
                            "documentation": "",
                            "template": {
                                "backgroundColor": "blue"
                            }
                        },
                        "type": "note"
                    },
                    "dragging": false,
                    "height": 403,
                    "id": "note-siDHB",
                    "measured": {
                        "height": 403,
                        "width": 328
                    },
                    "position": {
                        "x": 2089.5869930853464,
                        "y": 311.41660832449514
                    },
                    "positionAbsolute": {
                        "x": 2089.5869930853464,
                        "y": 311.41660832449514
                    },
                    "resizing": false,
                    "selected": false,
                    "style": {
                        "height": 403,
                        "width": 461
                    },
                    "type": "noteNode",
                    "width": 461
                },
                {
                    "data": {
                        "id": "note-gjsCT",
                        "node": {
                            "description": "PURPOSE:\nConverts unstructured company research into standardized JSON format\n\nKEY FUNCTIONS:\n- Extracts specific business data points\n- Validates and formats information\n- Ensures data consistency\n\nINPUT:\n- Raw company research data\n\nOUTPUT:\nStructured JSON with:\n- Domain information\n- Social links\n- Pricing details\n- Feature availability\n- Market classification\n- Product features\n- Industry focus\n\nRULES:\n1. Uses strict boolean values\n2. Standardizes pricing formats\n3. Validates market categories\n4. Handles missing data consistently",
                            "display_name": "",
                            "documentation": "",
                            "template": {
                                "backgroundColor": "blue"
                            }
                        },
                        "type": "note"
                    },
                    "dragging": false,
                    "height": 382,
                    "id": "note-gjsCT",
                    "measured": {
                        "height": 382,
                        "width": 328
                    },
                    "position": {
                        "x": 1237.6627823432912,
                        "y": 111.53860932079613
                    },
                    "positionAbsolute": {
                        "x": 1237.6627823432912,
                        "y": 169.53860932079613
                    },
                    "resizing": false,
                    "selected": false,
                    "style": {
                        "height": 382,
                        "width": 398
                    },
                    "type": "noteNode",
                    "width": 398
                },
                {
                    "data": {
                        "id": "note-IftyY",
                        "node": {
                            "description": "# Market Research\nThis flow helps you gather comprehensive information about companies for sales and business intelligence purposes.\n\n## Instructions\n\n1. Enter Company Name\n   - In the Chat Input node, type the name of the company you want to research\n   - Example inputs: \"Salesforce.com\", \"Shopify\", \"Zoom Video Communications\"\n\n2. Initiate Research\n   - The Agent will use the Tavily AI Search tool to gather information\n   - It will focus on key areas like pricing, features, and market positioning\n\n3. Review Structured Output\n   - The flow will generate a structured JSON output with standardized fields\n   - This includes domain, LinkedIn URL, pricing details, and key features\n\n4. Examine Formatted Results\n   - The Parse Data component will convert the JSON into a readable format\n   - You'll see a comprehensive company profile with organized sections\n\n5. Analyze and Use Data\n   - Use the generated information for sales prospecting, competitive analysis, or market research\n   - The structured format allows for easy comparison between different companies\n\nRemember: Always verify critical information from official sources before making business decisions! \ud83d\udd0d\ud83d\udcbc",
                            "display_name": "",
                            "documentation": "",
                            "template": {
                                "backgroundColor": "emerald"
                            }
                        },
                        "type": "note"
                    },
                    "dragging": false,
                    "height": 513,
                    "id": "note-IftyY",
                    "measured": {
                        "height": 513,
                        "width": 328
                    },
                    "position": {
                        "x": 244.92297036777086,
                        "y": 340.99805740871204
                    },
                    "positionAbsolute": {
                        "x": 244.92297036777086,
                        "y": 340.99805740871204
                    },
                    "resizing": false,
                    "selected": false,
                    "style": {
                        "height": 513,
                        "width": 567
                    },
                    "type": "noteNode",
                    "width": 567
                },
                {
                    "data": {
                        "description": "Transforms LLM responses into **structured data formats**. Ideal for extracting specific information or creating consistent outputs.",
                        "display_name": "Structured Output",
                        "id": "StructuredOutputComponent-y5YEE",
                        "node": {
                            "base_classes": [
                                "Data"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Transforms LLM responses into **structured data formats**. Ideal for extracting specific information or creating consistent outputs.",
                            "display_name": "Structured Output",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "llm",
                                "input_value",
                                "schema_name",
                                "output_schema",
                                "multiple"
                            ],
                            "frozen": false,
                            "icon": "braces",
                            "legacy": false,
                            "lf_version": "1.1.1",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "cache": true,
                                    "display_name": "Structured Output",
                                    "method": "build_structured_output",
                                    "name": "structured_output",
                                    "selected": "Data",
                                    "types": [
                                        "Data"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from typing import TYPE_CHECKING, cast\n\nfrom pydantic import BaseModel, Field, create_model\n\nfrom langflow.base.models.chat_result import get_chat_result\nfrom langflow.custom import Component\nfrom langflow.helpers.base_model import build_model_from_schema\nfrom langflow.io import BoolInput, HandleInput, MessageTextInput, Output, StrInput, TableInput\nfrom langflow.schema.data import Data\n\nif TYPE_CHECKING:\n    from langflow.field_typing.constants import LanguageModel\n\n\nclass StructuredOutputComponent(Component):\n    display_name = \"Structured Output\"\n    description = (\n        \"Transforms LLM responses into **structured data formats**. Ideal for extracting specific information \"\n        \"or creating consistent outputs.\"\n    )\n    icon = \"braces\"\n\n    inputs = [\n        HandleInput(\n            name=\"llm\",\n            display_name=\"Language Model\",\n            info=\"The language model to use to generate the structured output.\",\n            input_types=[\"LanguageModel\"],\n        ),\n        MessageTextInput(name=\"input_value\", display_name=\"Input message\"),\n        StrInput(\n            name=\"schema_name\",\n            display_name=\"Schema Name\",\n            info=\"Provide a name for the output data schema.\",\n        ),\n        TableInput(\n            name=\"output_schema\",\n            display_name=\"Output Schema\",\n            info=\"Define the structure and data types for the model's output.\",\n            table_schema=[\n                {\n                    \"name\": \"name\",\n                    \"display_name\": \"Name\",\n                    \"type\": \"str\",\n                    \"description\": \"Specify the name of the output field.\",\n                    \"default\": \"field\",\n                },\n                {\n                    \"name\": \"description\",\n                    \"display_name\": \"Description\",\n                    \"type\": \"str\",\n                    \"description\": \"Describe the purpose of the output field.\",\n                    \"default\": \"description of field\",\n                },\n                {\n                    \"name\": \"type\",\n                    \"display_name\": \"Type\",\n                    \"type\": \"str\",\n                    \"description\": (\n                        \"Indicate the data type of the output field (e.g., str, int, float, bool, list, dict).\"\n                    ),\n                    \"default\": \"text\",\n                },\n                {\n                    \"name\": \"multiple\",\n                    \"display_name\": \"Multiple\",\n                    \"type\": \"boolean\",\n                    \"description\": \"Set to True if this output field should be a list of the specified type.\",\n                    \"default\": \"False\",\n                },\n            ],\n            value=[{\"name\": \"field\", \"description\": \"description of field\", \"type\": \"text\", \"multiple\": \"False\"}],\n        ),\n        BoolInput(\n            name=\"multiple\",\n            display_name=\"Generate Multiple\",\n            info=\"Set to True if the model should generate a list of outputs instead of a single output.\",\n        ),\n    ]\n\n    outputs = [\n        Output(name=\"structured_output\", display_name=\"Structured Output\", method=\"build_structured_output\"),\n    ]\n\n    def build_structured_output(self) -> Data:\n        if not hasattr(self.llm, \"with_structured_output\"):\n            msg = \"Language model does not support structured output.\"\n            raise TypeError(msg)\n        if not self.output_schema:\n            msg = \"Output schema cannot be empty\"\n            raise ValueError(msg)\n\n        output_model_ = build_model_from_schema(self.output_schema)\n        if self.multiple:\n            output_model = create_model(\n                self.schema_name,\n                objects=(list[output_model_], Field(description=f\"A list of {self.schema_name}.\")),  # type: ignore[valid-type]\n            )\n        else:\n            output_model = output_model_\n        try:\n            llm_with_structured_output = cast(\"LanguageModel\", self.llm).with_structured_output(schema=output_model)  # type: ignore[valid-type, attr-defined]\n\n        except NotImplementedError as exc:\n            msg = f\"{self.llm.__class__.__name__} does not support structured output.\"\n            raise TypeError(msg) from exc\n        config_dict = {\n            \"run_name\": self.display_name,\n            \"project_name\": self.get_project_name(),\n            \"callbacks\": self.get_langchain_callbacks(),\n        }\n        output = get_chat_result(runnable=llm_with_structured_output, input_value=self.input_value, config=config_dict)\n        if isinstance(output, BaseModel):\n            output_dict = output.model_dump()\n        else:\n            msg = f\"Output should be a Pydantic BaseModel, got {type(output)} ({output})\"\n            raise TypeError(msg)\n        return Data(data=output_dict)\n"
                                },
                                "input_value": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": false,
                                    "display_name": "Input message",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "llm": {
                                    "_input_type": "HandleInput",
                                    "advanced": false,
                                    "display_name": "Language Model",
                                    "dynamic": false,
                                    "info": "The language model to use to generate the structured output.",
                                    "input_types": [
                                        "LanguageModel"
                                    ],
                                    "list": false,
                                    "name": "llm",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "other",
                                    "value": ""
                                },
                                "multiple": {
                                    "_input_type": "BoolInput",
                                    "advanced": false,
                                    "display_name": "Generate Multiple",
                                    "dynamic": false,
                                    "info": "Set to True if the model should generate a list of outputs instead of a single output.",
                                    "list": false,
                                    "name": "multiple",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "output_schema": {
                                    "_input_type": "TableInput",
                                    "advanced": false,
                                    "display_name": "Output Schema",
                                    "dynamic": false,
                                    "info": "Define the structure and data types for the model's output.",
                                    "is_list": true,
                                    "load_from_db": false,
                                    "name": "output_schema",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "table_schema": {
                                        "columns": [
                                            {
                                                "description": "Specify the name of the output field.",
                                                "display_name": "Name",
                                                "filterable": true,
                                                "formatter": "text",
                                                "name": "name",
                                                "sortable": true,
                                                "type": "text"
                                            },
                                            {
                                                "description": "Describe the purpose of the output field.",
                                                "display_name": "Description",
                                                "filterable": true,
                                                "formatter": "text",
                                                "name": "description",
                                                "sortable": true,
                                                "type": "text"
                                            },
                                            {
                                                "default": "text",
                                                "description": "Indicate the data type of the output field (e.g., str, int, float, bool, list, dict).",
                                                "display_name": "Type",
                                                "filterable": true,
                                                "formatter": "text",
                                                "name": "type",
                                                "sortable": true,
                                                "type": "text"
                                            },
                                            {
                                                "default": "False",
                                                "description": "Set to True if this output field should be a list of the specified type.",
                                                "display_name": "Multiple",
                                                "filterable": true,
                                                "formatter": "text",
                                                "name": "multiple",
                                                "sortable": true,
                                                "type": "boolean"
                                            }
                                        ]
                                    },
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "table",
                                    "value": [
                                        {
                                            "description": "Primary company domain name",
                                            "multiple": "False",
                                            "name": "domain",
                                            "type": "text"
                                        },
                                        {
                                            "description": "Company's LinkedIn URL",
                                            "multiple": "False",
                                            "name": "linkedinUrl",
                                            "type": "text"
                                        },
                                        {
                                            "description": "Lowest priced plan in USD (number only)",
                                            "multiple": "False",
                                            "name": "cheapestPlan",
                                            "type": "text"
                                        },
                                        {
                                            "description": "Boolean indicating if they offer a free trial",
                                            "multiple": "False",
                                            "name": "hasFreeTrial",
                                            "type": "bool"
                                        },
                                        {
                                            "description": "Boolean indicating if they have enterprise options",
                                            "multiple": "False",
                                            "name": "hasEnterprisePlan",
                                            "type": "bool"
                                        },
                                        {
                                            "description": "Boolean indicating if they offer API access",
                                            "multiple": "False",
                                            "name": "hasAPI",
                                            "type": "bool"
                                        },
                                        {
                                            "description": "Either 'B2B' or 'B2C' or 'Both",
                                            "multiple": "False",
                                            "name": "market",
                                            "type": "text"
                                        },
                                        {
                                            "description": "List of available pricing tiers",
                                            "multiple": "True",
                                            "name": "pricingTiers",
                                            "type": "text"
                                        },
                                        {
                                            "description": "List of main features",
                                            "multiple": "True",
                                            "name": "KeyFeatures",
                                            "type": "text"
                                        },
                                        {
                                            "description": "List of target industries",
                                            "multiple": "True",
                                            "name": "targetIndustries",
                                            "type": "text"
                                        }
                                    ]
                                },
                                "schema_name": {
                                    "_input_type": "StrInput",
                                    "advanced": false,
                                    "display_name": "Schema Name",
                                    "dynamic": false,
                                    "info": "Provide a name for the output data schema.",
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "schema_name",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "output_schema"
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "StructuredOutputComponent"
                    },
                    "dragging": false,
                    "height": 541,
                    "id": "StructuredOutputComponent-y5YEE",
                    "measured": {
                        "height": 541,
                        "width": 360
                    },
                    "position": {
                        "x": 1716.7237308033855,
                        "y": 459.2476214962564
                    },
                    "positionAbsolute": {
                        "x": 1770.7096106546323,
                        "y": 518.8182475390113
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "id": "ParseData-8KK2E",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "category": "helpers",
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Convert Data into plain text following a specified template.",
                            "display_name": "Parse Data",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "data",
                                "template",
                                "sep"
                            ],
                            "frozen": false,
                            "icon": "message-square",
                            "key": "ParseData",
                            "legacy": false,
                            "lf_version": "1.1.1",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "parse_data",
                                    "name": "text",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                },
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Data List",
                                    "method": "parse_data_as_list",
                                    "name": "data_list",
                                    "selected": "Data",
                                    "types": [
                                        "Data"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text, data_to_text_list\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Data to Message\"\n    description = \"Convert Data objects into Messages using any {field_name} from input data.\"\n    icon = \"message-square\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\", is_list=True, required=True),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n            required=True,\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"text\",\n            info=\"Data as a single Message, with each input Data separated by Separator\",\n            method=\"parse_data\",\n        ),\n        Output(\n            display_name=\"Data List\",\n            name=\"data_list\",\n            info=\"Data as a list of new Data, each having `text` formatted by Template\",\n            method=\"parse_data_as_list\",\n        ),\n    ]\n\n    def _clean_args(self) -> tuple[list[Data], str, str]:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n        sep = self.sep\n        return data, template, sep\n\n    def parse_data(self) -> Message:\n        data, template, sep = self._clean_args()\n        result_string = data_to_text(template, data, sep)\n        self.status = result_string\n        return Message(text=result_string)\n\n    def parse_data_as_list(self) -> list[Data]:\n        data, template, _ = self._clean_args()\n        text_list, data_list = data_to_text_list(template, data)\n        for item, text in zip(data_list, text_list, strict=True):\n            item.set_text(text)\n        self.status = data_list\n        return data_list\n"
                                },
                                "data": {
                                    "_input_type": "DataInput",
                                    "advanced": false,
                                    "display_name": "Data",
                                    "dynamic": false,
                                    "info": "The data to convert to text.",
                                    "input_types": [
                                        "Data"
                                    ],
                                    "list": true,
                                    "name": "data",
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "other",
                                    "value": ""
                                },
                                "sep": {
                                    "_input_type": "StrInput",
                                    "advanced": true,
                                    "display_name": "Separator",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "sep",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "\n"
                                },
                                "template": {
                                    "_input_type": "MultilineInput",
                                    "advanced": false,
                                    "display_name": "Template",
                                    "dynamic": false,
                                    "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "template",
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "# Company Profile\n\n## Basic Information\n- **Domain:** {domain}\n- **LinkedIn URL:** {linkedinUrl}\n\n## Pricing and Plans\n- **Cheapest Plan:** {cheapestPlan}\n- **Has Free Trial:** {hasFreeTrial}\n- **Has Enterprise Plan:** {hasEnterprisePlan}\n\n## Technical Capabilities\n- **Has API:** {hasAPI}\n\n## Market and Target Audience\n- **Market:** {market}\n- **Target Industries:** {targetIndustries}\n\n## Pricing Structure\n{pricingTiers}\n\n## Key Features\n{KeyFeatures}\n"
                                }
                            }
                        },
                        "type": "ParseData"
                    },
                    "dragging": false,
                    "height": 302,
                    "id": "ParseData-8KK2E",
                    "measured": {
                        "height": 302,
                        "width": 360
                    },
                    "position": {
                        "x": 2139.05558520377,
                        "y": 780.6849187394922
                    },
                    "positionAbsolute": {
                        "x": 2139.05558520377,
                        "y": 780.6849187394922
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "description": "Define the agent's instructions, then enter a task to complete using tools.",
                        "display_name": "Agent",
                        "id": "Agent-lyqby",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Define the agent's instructions, then enter a task to complete using tools.",
                            "display_name": "Agent",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "agent_llm",
                                "max_tokens",
                                "model_kwargs",
                                "json_mode",
                                "output_schema",
                                "model_name",
                                "openai_api_base",
                                "api_key",
                                "temperature",
                                "seed",
                                "output_parser",
                                "system_prompt",
                                "tools",
                                "input_value",
                                "handle_parsing_errors",
                                "verbose",
                                "max_iterations",
                                "agent_description",
                                "memory",
                                "sender",
                                "sender_name",
                                "n_messages",
                                "session_id",
                                "order",
                                "template",
                                "add_current_date_tool"
                            ],
                            "frozen": false,
                            "icon": "bot",
                            "legacy": false,
                            "lf_version": "1.1.1",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Response",
                                    "method": "message_response",
                                    "name": "response",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "add_current_date_tool": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Current Date",
                                    "dynamic": false,
                                    "info": "If true, will add a tool to the agent that returns the current date.",
                                    "list": false,
                                    "name": "add_current_date_tool",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "agent_description": {
                                    "_input_type": "MultilineInput",
                                    "advanced": true,
                                    "display_name": "Agent Description [Deprecated]",
                                    "dynamic": false,
                                    "info": "The description of the agent. This is only used when in Tool Mode. Defaults to 'A helpful assistant with access to the following tools:' and tools are added dynamically. This feature is deprecated and will be removed in future versions.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "agent_description",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "A helpful assistant with access to the following tools:"
                                },
                                "agent_llm": {
                                    "_input_type": "DropdownInput",
                                    "advanced": false,
                                    "combobox": false,
                                    "display_name": "Model Provider",
                                    "dynamic": false,
                                    "info": "The provider of the language model that the agent will use to generate responses.",
                                    "input_types": [],
                                    "name": "agent_llm",
                                    "options": [
                                        "Amazon Bedrock",
                                        "Anthropic",
                                        "Azure OpenAI",
                                        "Google Generative AI",
                                        "Groq",
                                        "NVIDIA",
                                        "OpenAI",
                                        "Custom"
                                    ],
                                    "placeholder": "",
                                    "real_time_refresh": true,
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "OpenAI"
                                },
                                "api_key": {
                                    "_input_type": "SecretStrInput",
                                    "advanced": false,
                                    "display_name": "OpenAI API Key",
                                    "dynamic": false,
                                    "info": "The OpenAI API Key to use for the OpenAI model.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "load_from_db": true,
                                    "name": "api_key",
                                    "password": true,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": "OPENAI_API_KEY"
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langchain_core.tools import StructuredTool\n\nfrom langflow.base.agents.agent import LCToolsAgentComponent\nfrom langflow.base.models.model_input_constants import (\n    ALL_PROVIDER_FIELDS,\n    MODEL_DYNAMIC_UPDATE_FIELDS,\n    MODEL_PROVIDERS_DICT,\n)\nfrom langflow.base.models.model_utils import get_model_name\nfrom langflow.components.helpers import CurrentDateComponent\nfrom langflow.components.helpers.memory import MemoryComponent\nfrom langflow.components.langchain_utilities.tool_calling import ToolCallingAgentComponent\nfrom langflow.custom.utils import update_component_build_config\nfrom langflow.io import BoolInput, DropdownInput, MultilineInput, Output\nfrom langflow.logging import logger\nfrom langflow.schema.dotdict import dotdict\nfrom langflow.schema.message import Message\n\n\ndef set_advanced_true(component_input):\n    component_input.advanced = True\n    return component_input\n\n\nclass AgentComponent(ToolCallingAgentComponent):\n    display_name: str = \"Agent\"\n    description: str = \"Define the agent's instructions, then enter a task to complete using tools.\"\n    icon = \"bot\"\n    beta = False\n    name = \"Agent\"\n\n    memory_inputs = [set_advanced_true(component_input) for component_input in MemoryComponent().inputs]\n\n    inputs = [\n        DropdownInput(\n            name=\"agent_llm\",\n            display_name=\"Model Provider\",\n            info=\"The provider of the language model that the agent will use to generate responses.\",\n            options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n            value=\"OpenAI\",\n            real_time_refresh=True,\n            input_types=[],\n        ),\n        *MODEL_PROVIDERS_DICT[\"OpenAI\"][\"inputs\"],\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=\"Agent Instructions\",\n            info=\"System Prompt: Initial instructions and context provided to guide the agent's behavior.\",\n            value=\"You are a helpful assistant that can use tools to answer questions and perform tasks.\",\n            advanced=False,\n        ),\n        *LCToolsAgentComponent._base_inputs,\n        *memory_inputs,\n        BoolInput(\n            name=\"add_current_date_tool\",\n            display_name=\"Current Date\",\n            advanced=True,\n            info=\"If true, will add a tool to the agent that returns the current date.\",\n            value=True,\n        ),\n    ]\n    outputs = [Output(name=\"response\", display_name=\"Response\", method=\"message_response\")]\n\n    async def message_response(self) -> Message:\n        try:\n            llm_model, display_name = self.get_llm()\n            if llm_model is None:\n                msg = \"No language model selected\"\n                raise ValueError(msg)\n            self.model_name = get_model_name(llm_model, display_name=display_name)\n        except Exception as e:\n            # Log the error for debugging purposes\n            logger.error(f\"Error retrieving language model: {e}\")\n            raise\n\n        try:\n            self.chat_history = await self.get_memory_data()\n        except Exception as e:\n            logger.error(f\"Error retrieving chat history: {e}\")\n            raise\n\n        if self.add_current_date_tool:\n            try:\n                if not isinstance(self.tools, list):  # type: ignore[has-type]\n                    self.tools = []\n                # Convert CurrentDateComponent to a StructuredTool\n                current_date_tool = (await CurrentDateComponent().to_toolkit()).pop(0)\n                # current_date_tool = CurrentDateComponent().to_toolkit()[0]\n                if isinstance(current_date_tool, StructuredTool):\n                    self.tools.append(current_date_tool)\n                else:\n                    msg = \"CurrentDateComponent must be converted to a StructuredTool\"\n                    raise TypeError(msg)\n            except Exception as e:\n                logger.error(f\"Error adding current date tool: {e}\")\n                raise\n\n        if not self.tools:\n            msg = \"Tools are required to run the agent.\"\n            logger.error(msg)\n            raise ValueError(msg)\n\n        try:\n            self.set(\n                llm=llm_model,\n                tools=self.tools,\n                chat_history=self.chat_history,\n                input_value=self.input_value,\n                system_prompt=self.system_prompt,\n            )\n            agent = self.create_agent_runnable()\n        except Exception as e:\n            logger.error(f\"Error setting up the agent: {e}\")\n            raise\n\n        return await self.run_agent(agent)\n\n    async def get_memory_data(self):\n        memory_kwargs = {\n            component_input.name: getattr(self, f\"{component_input.name}\") for component_input in self.memory_inputs\n        }\n        # filter out empty values\n        memory_kwargs = {k: v for k, v in memory_kwargs.items() if v}\n\n        return await MemoryComponent().set(**memory_kwargs).retrieve_messages()\n\n    def get_llm(self):\n        if isinstance(self.agent_llm, str):\n            try:\n                provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n                if provider_info:\n                    component_class = provider_info.get(\"component_class\")\n                    display_name = component_class.display_name\n                    inputs = provider_info.get(\"inputs\")\n                    prefix = provider_info.get(\"prefix\", \"\")\n                    return (\n                        self._build_llm_model(component_class, inputs, prefix),\n                        display_name,\n                    )\n            except Exception as e:\n                msg = f\"Error building {self.agent_llm} language model\"\n                raise ValueError(msg) from e\n        return self.agent_llm, None\n\n    def _build_llm_model(self, component, inputs, prefix=\"\"):\n        model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n        return component.set(**model_kwargs).build_model()\n\n    def set_component_params(self, component):\n        provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n        if provider_info:\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\")\n            model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n\n            return component.set(**model_kwargs)\n        return component\n\n    def delete_fields(self, build_config: dotdict, fields: dict | list[str]) -> None:\n        \"\"\"Delete specified fields from build_config.\"\"\"\n        for field in fields:\n            build_config.pop(field, None)\n\n    def update_input_types(self, build_config: dotdict) -> dotdict:\n        \"\"\"Update input types for all fields in build_config.\"\"\"\n        for key, value in build_config.items():\n            if isinstance(value, dict):\n                if value.get(\"input_types\") is None:\n                    build_config[key][\"input_types\"] = []\n            elif hasattr(value, \"input_types\") and value.input_types is None:\n                value.input_types = []\n        return build_config\n\n    async def update_build_config(\n        self, build_config: dotdict, field_value: str, field_name: str | None = None\n    ) -> dotdict:\n        # Iterate over all providers in the MODEL_PROVIDERS_DICT\n        # Existing logic for updating build_config\n        if field_name in (\"agent_llm\",):\n            build_config[\"agent_llm\"][\"value\"] = field_value\n            provider_info = MODEL_PROVIDERS_DICT.get(field_value)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call the component class's update_build_config method\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n\n            provider_configs: dict[str, tuple[dict, list[dict]]] = {\n                provider: (\n                    MODEL_PROVIDERS_DICT[provider][\"fields\"],\n                    [\n                        MODEL_PROVIDERS_DICT[other_provider][\"fields\"]\n                        for other_provider in MODEL_PROVIDERS_DICT\n                        if other_provider != provider\n                    ],\n                )\n                for provider in MODEL_PROVIDERS_DICT\n            }\n            if field_value in provider_configs:\n                fields_to_add, fields_to_delete = provider_configs[field_value]\n\n                # Delete fields from other providers\n                for fields in fields_to_delete:\n                    self.delete_fields(build_config, fields)\n\n                # Add provider-specific fields\n                if field_value == \"OpenAI\" and not any(field in build_config for field in fields_to_add):\n                    build_config.update(fields_to_add)\n                else:\n                    build_config.update(fields_to_add)\n                # Reset input types for agent_llm\n                build_config[\"agent_llm\"][\"input_types\"] = []\n            elif field_value == \"Custom\":\n                # Delete all provider fields\n                self.delete_fields(build_config, ALL_PROVIDER_FIELDS)\n                # Update with custom component\n                custom_component = DropdownInput(\n                    name=\"agent_llm\",\n                    display_name=\"Language Model\",\n                    options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n                    value=\"Custom\",\n                    real_time_refresh=True,\n                    input_types=[\"LanguageModel\"],\n                )\n                build_config.update({\"agent_llm\": custom_component.to_dict()})\n            # Update input types for all fields\n            build_config = self.update_input_types(build_config)\n\n            # Validate required keys\n            default_keys = [\n                \"code\",\n                \"_type\",\n                \"agent_llm\",\n                \"tools\",\n                \"input_value\",\n                \"add_current_date_tool\",\n                \"system_prompt\",\n                \"agent_description\",\n                \"max_iterations\",\n                \"handle_parsing_errors\",\n                \"verbose\",\n            ]\n            missing_keys = [key for key in default_keys if key not in build_config]\n            if missing_keys:\n                msg = f\"Missing required keys in build_config: {missing_keys}\"\n                raise ValueError(msg)\n        if (\n            isinstance(self.agent_llm, str)\n            and self.agent_llm in MODEL_PROVIDERS_DICT\n            and field_name in MODEL_DYNAMIC_UPDATE_FIELDS\n        ):\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                component_class = self.set_component_params(component_class)\n                prefix = provider_info.get(\"prefix\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call each component class's update_build_config method\n                    # remove the prefix from the field_name\n                    if isinstance(field_name, str) and isinstance(prefix, str):\n                        field_name = field_name.replace(prefix, \"\")\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n        return dotdict({k: v.to_dict() if hasattr(v, \"to_dict\") else v for k, v in build_config.items()})\n"
                                },
                                "handle_parsing_errors": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Handle Parse Errors",
                                    "dynamic": false,
                                    "info": "Should the Agent fix errors when reading user input for better processing?",
                                    "list": false,
                                    "name": "handle_parsing_errors",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "input_value": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": false,
                                    "display_name": "Input",
                                    "dynamic": false,
                                    "info": "The input provided by the user for the agent to process.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": true,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "json_mode": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "JSON Mode",
                                    "dynamic": false,
                                    "info": "If True, it will output JSON regardless of passing a schema.",
                                    "list": false,
                                    "name": "json_mode",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "max_iterations": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Max Iterations",
                                    "dynamic": false,
                                    "info": "The maximum number of attempts the agent can make to complete its task before it stops.",
                                    "list": false,
                                    "name": "max_iterations",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 15
                                },
                                "max_tokens": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Max Tokens",
                                    "dynamic": false,
                                    "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                                    "list": false,
                                    "name": "max_tokens",
                                    "placeholder": "",
                                    "range_spec": {
                                        "max": 128000,
                                        "min": 0,
                                        "step": 0.1,
                                        "step_type": "float"
                                    },
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": ""
                                },
                                "memory": {
                                    "_input_type": "HandleInput",
                                    "advanced": true,
                                    "display_name": "External Memory",
                                    "dynamic": false,
                                    "info": "Retrieve messages from an external memory. If empty, it will use the Langflow tables.",
                                    "input_types": [
                                        "Memory"
                                    ],
                                    "list": false,
                                    "name": "memory",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "other",
                                    "value": ""
                                },
                                "model_kwargs": {
                                    "_input_type": "DictInput",
                                    "advanced": true,
                                    "display_name": "Model Kwargs",
                                    "dynamic": false,
                                    "info": "Additional keyword arguments to pass to the model.",
                                    "list": false,
                                    "name": "model_kwargs",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "type": "dict",
                                    "value": {}
                                },
                                "model_name": {
                                    "_input_type": "DropdownInput",
                                    "advanced": false,
                                    "combobox": true,
                                    "display_name": "Model Name",
                                    "dynamic": false,
                                    "info": "To see the model names, first choose a provider. Then, enter your API key and click the refresh button next to the model name.",
                                    "name": "model_name",
                                    "options": [
                                        "gpt-4o-mini",
                                        "gpt-4o",
                                        "gpt-4-turbo",
                                        "gpt-4-turbo-preview",
                                        "gpt-4",
                                        "gpt-3.5-turbo",
                                        "gpt-3.5-turbo-0125"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "gpt-4o-mini"
                                },
                                "n_messages": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Number of Messages",
                                    "dynamic": false,
                                    "info": "Number of messages to retrieve.",
                                    "list": false,
                                    "name": "n_messages",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 100
                                },
                                "openai_api_base": {
                                    "_input_type": "StrInput",
                                    "advanced": true,
                                    "display_name": "OpenAI API Base",
                                    "dynamic": false,
                                    "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "openai_api_base",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "order": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Order",
                                    "dynamic": false,
                                    "info": "Order of the messages.",
                                    "name": "order",
                                    "options": [
                                        "Ascending",
                                        "Descending"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Ascending"
                                },
                                "seed": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Seed",
                                    "dynamic": false,
                                    "info": "The seed controls the reproducibility of the job.",
                                    "list": false,
                                    "name": "seed",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 1
                                },
                                "sender": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Sender Type",
                                    "dynamic": false,
                                    "info": "Filter by sender type.",
                                    "name": "sender",
                                    "options": [
                                        "Machine",
                                        "User",
                                        "Machine and User"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Machine and User"
                                },
                                "sender_name": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Sender Name",
                                    "dynamic": false,
                                    "info": "Filter by sender name.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "sender_name",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "session_id": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Session ID",
                                    "dynamic": false,
                                    "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "session_id",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "system_prompt": {
                                    "_input_type": "MultilineInput",
                                    "advanced": false,
                                    "display_name": "Agent Instructions",
                                    "dynamic": false,
                                    "info": "System Prompt: Initial instructions and context provided to guide the agent's behavior.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "system_prompt",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "You are an expert business research agent. Your task is to gather comprehensive information about companies.   When researching a company, focus on the following key areas: 1. Basic company information (website, domain, social presence) 2. Product and pricing information 3. Technical capabilities and integrations 4. Market positioning and target audience 5. Key features and offerings  For the company/domain provided, search thoroughly and provide detailed information about: - Their main website and domain - Their pricing structure - Product features and capabilities - Market presence and focus - Technical offerings like APIs - Social media presence, especially LinkedIn  Search comprehensively and provide detailed, factual information that will help determine: - Pricing tiers and structure - Whether they offer free trials - If they have enterprise solutions - Their technical capabilities - Their primary market (B2B/B2C)  INPUT: {input}  Respond with detailed, factual information about these aspects, avoiding speculation. Include direct quotes or specific information you find."
                                },
                                "temperature": {
                                    "_input_type": "FloatInput",
                                    "advanced": true,
                                    "display_name": "Temperature",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "name": "temperature",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "float",
                                    "value": 0.1
                                },
                                "template": {
                                    "_input_type": "MultilineInput",
                                    "advanced": true,
                                    "display_name": "Template",
                                    "dynamic": false,
                                    "info": "The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "template",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "{sender_name}: {text}"
                                },
                                "tools": {
                                    "_input_type": "HandleInput",
                                    "advanced": false,
                                    "display_name": "Tools",
                                    "dynamic": false,
                                    "info": "These are the tools that the agent can use to help with tasks.",
                                    "input_types": [
                                        "Tool"
                                    ],
                                    "list": true,
                                    "name": "tools",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "other",
                                    "value": ""
                                },
                                "verbose": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Verbose",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "name": "verbose",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "Agent"
                    },
                    "dragging": false,
                    "height": 650,
                    "id": "Agent-lyqby",
                    "measured": {
                        "height": 650,
                        "width": 360
                    },
                    "position": {
                        "x": 1287.5681517817056,
                        "y": 519.8701526087884
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "id": "note-Z3HC2",
                        "node": {
                            "description": "# \ud83d\udd11 Tavily AI Search Needs API Key\n\nYou can get 1000 searches/month free [here](https://tavily.com/) ",
                            "display_name": "",
                            "documentation": "",
                            "template": {
                                "backgroundColor": "lime"
                            }
                        },
                        "type": "note"
                    },
                    "dragging": false,
                    "height": 325,
                    "id": "note-Z3HC2",
                    "measured": {
                        "height": 325,
                        "width": 328
                    },
                    "position": {
                        "x": 878.7898510090017,
                        "y": 640.2524241641511
                    },
                    "positionAbsolute": {
                        "x": 921.6062384772317,
                        "y": 642.1140062279873
                    },
                    "selected": false,
                    "type": "noteNode",
                    "width": 325
                },
                {
                    "data": {
                        "id": "TavilySearchComponent-Gv4zn",
                        "node": {
                            "base_classes": [
                                "Data",
                                "Message"
                            ],
                            "beta": false,
                            "category": "tools",
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "**Tavily AI** is a search engine optimized for LLMs and RAG,         aimed at efficient, quick, and persistent search results.",
                            "display_name": "Tavily AI Search",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "api_key",
                                "query",
                                "search_depth",
                                "topic",
                                "max_results",
                                "include_images",
                                "include_answer"
                            ],
                            "frozen": false,
                            "icon": "TavilyIcon",
                            "key": "TavilySearchComponent",
                            "legacy": false,
                            "lf_version": "1.1.1",
                            "metadata": {},
                            "minimized": false,
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Toolset",
                                    "hidden": null,
                                    "method": "to_toolkit",
                                    "name": "component_as_tool",
                                    "required_inputs": null,
                                    "selected": "Tool",
                                    "types": [
                                        "Tool"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "score": 0.0075846556637275304,
                            "template": {
                                "_type": "Component",
                                "api_key": {
                                    "_input_type": "SecretStrInput",
                                    "advanced": false,
                                    "display_name": "Tavily API Key",
                                    "dynamic": false,
                                    "info": "Your Tavily API Key.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "load_from_db": true,
                                    "name": "api_key",
                                    "password": true,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": ""
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "import httpx\nfrom loguru import logger\n\nfrom langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import BoolInput, DropdownInput, IntInput, MessageTextInput, Output, SecretStrInput\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\n\n\nclass TavilySearchComponent(Component):\n    display_name = \"Tavily AI Search\"\n    description = \"\"\"**Tavily AI** is a search engine optimized for LLMs and RAG, \\\n        aimed at efficient, quick, and persistent search results.\"\"\"\n    icon = \"TavilyIcon\"\n\n    inputs = [\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"Tavily API Key\",\n            required=True,\n            info=\"Your Tavily API Key.\",\n        ),\n        MessageTextInput(\n            name=\"query\",\n            display_name=\"Search Query\",\n            info=\"The search query you want to execute with Tavily.\",\n            tool_mode=True,\n        ),\n        DropdownInput(\n            name=\"search_depth\",\n            display_name=\"Search Depth\",\n            info=\"The depth of the search.\",\n            options=[\"basic\", \"advanced\"],\n            value=\"advanced\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"topic\",\n            display_name=\"Search Topic\",\n            info=\"The category of the search.\",\n            options=[\"general\", \"news\"],\n            value=\"general\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"max_results\",\n            display_name=\"Max Results\",\n            info=\"The maximum number of search results to return.\",\n            value=5,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"include_images\",\n            display_name=\"Include Images\",\n            info=\"Include a list of query-related images in the response.\",\n            value=True,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"include_answer\",\n            display_name=\"Include Answer\",\n            info=\"Include a short answer to original query.\",\n            value=True,\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"fetch_content\"),\n        Output(display_name=\"Text\", name=\"text\", method=\"fetch_content_text\"),\n    ]\n\n    def fetch_content(self) -> list[Data]:\n        try:\n            url = \"https://api.tavily.com/search\"\n            headers = {\n                \"content-type\": \"application/json\",\n                \"accept\": \"application/json\",\n            }\n            payload = {\n                \"api_key\": self.api_key,\n                \"query\": self.query,\n                \"search_depth\": self.search_depth,\n                \"topic\": self.topic,\n                \"max_results\": self.max_results,\n                \"include_images\": self.include_images,\n                \"include_answer\": self.include_answer,\n            }\n\n            with httpx.Client() as client:\n                response = client.post(url, json=payload, headers=headers)\n\n            response.raise_for_status()\n            search_results = response.json()\n\n            data_results = []\n\n            if self.include_answer and search_results.get(\"answer\"):\n                data_results.append(Data(text=search_results[\"answer\"]))\n\n            for result in search_results.get(\"results\", []):\n                content = result.get(\"content\", \"\")\n                data_results.append(\n                    Data(\n                        text=content,\n                        data={\n                            \"title\": result.get(\"title\"),\n                            \"url\": result.get(\"url\"),\n                            \"content\": content,\n                            \"score\": result.get(\"score\"),\n                        },\n                    )\n                )\n\n            if self.include_images and search_results.get(\"images\"):\n                data_results.append(Data(text=\"Images found\", data={\"images\": search_results[\"images\"]}))\n        except httpx.HTTPStatusError as exc:\n            error_message = f\"HTTP error occurred: {exc.response.status_code} - {exc.response.text}\"\n            logger.error(error_message)\n            return [Data(text=error_message, data={\"error\": error_message})]\n        except httpx.RequestError as exc:\n            error_message = f\"Request error occurred: {exc}\"\n            logger.error(error_message)\n            return [Data(text=error_message, data={\"error\": error_message})]\n        except ValueError as exc:\n            error_message = f\"Invalid response format: {exc}\"\n            logger.error(error_message)\n            return [Data(text=error_message, data={\"error\": error_message})]\n        else:\n            self.status = data_results\n            return data_results\n\n    def fetch_content_text(self) -> Message:\n        data = self.fetch_content()\n        result_string = data_to_text(\"{text}\", data)\n        self.status = result_string\n        return Message(text=result_string)\n"
                                },
                                "include_answer": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Include Answer",
                                    "dynamic": false,
                                    "info": "Include a short answer to original query.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "include_answer",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "include_images": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Include Images",
                                    "dynamic": false,
                                    "info": "Include a list of query-related images in the response.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "include_images",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "max_results": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Max Results",
                                    "dynamic": false,
                                    "info": "The maximum number of search results to return.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "max_results",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 5
                                },
                                "query": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": false,
                                    "display_name": "Search Query",
                                    "dynamic": false,
                                    "info": "The search query you want to execute with Tavily.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "name": "query",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": true,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "search_depth": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Search Depth",
                                    "dynamic": false,
                                    "info": "The depth of the search.",
                                    "name": "search_depth",
                                    "options": [
                                        "basic",
                                        "advanced"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "advanced"
                                },
                                "tools_metadata": {
                                    "_input_type": "TableInput",
                                    "advanced": false,
                                    "display_name": "Edit tools",
                                    "dynamic": false,
                                    "info": "",
                                    "is_list": true,
                                    "list_add_label": "Add More",
                                    "name": "tools_metadata",
                                    "placeholder": "",
                                    "real_time_refresh": true,
                                    "required": false,
                                    "show": true,
                                    "table_icon": "Hammer",
                                    "table_options": {
                                        "block_add": true,
                                        "block_delete": true,
                                        "block_edit": true,
                                        "block_filter": true,
                                        "block_hide": true,
                                        "block_select": true,
                                        "block_sort": true,
                                        "description": "Modify tool names and descriptions to help agents understand when to use each tool.",
                                        "field_parsers": {
                                            "commands": "commands",
                                            "name": [
                                                "snake_case",
                                                "no_blank"
                                            ]
                                        },
                                        "hide_options": true
                                    },
                                    "table_schema": {
                                        "columns": [
                                            {
                                                "description": "Specify the name of the tool.",
                                                "disable_edit": false,
                                                "display_name": "Tool Name",
                                                "edit_mode": "inline",
                                                "filterable": false,
                                                "formatter": "text",
                                                "name": "name",
                                                "sortable": false,
                                                "type": "text"
                                            },
                                            {
                                                "description": "Describe the purpose of the tool.",
                                                "disable_edit": false,
                                                "display_name": "Tool Description",
                                                "edit_mode": "popover",
                                                "filterable": false,
                                                "formatter": "text",
                                                "name": "description",
                                                "sortable": false,
                                                "type": "text"
                                            },
                                            {
                                                "description": "The default identifiers for the tools and cannot be changed.",
                                                "disable_edit": true,
                                                "display_name": "Tool Identifiers",
                                                "edit_mode": "inline",
                                                "filterable": false,
                                                "formatter": "text",
                                                "name": "tags",
                                                "sortable": false,
                                                "type": "text"
                                            }
                                        ]
                                    },
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "trigger_icon": "Hammer",
                                    "trigger_text": "",
                                    "type": "table",
                                    "value": [
                                        {
                                            "description": "fetch_content(api_key: Message) - **Tavily AI** is a search engine optimized for LLMs and RAG,         aimed at efficient, quick, and persistent search results.",
                                            "name": "None-fetch_content",
                                            "tags": [
                                                "None-fetch_content"
                                            ]
                                        },
                                        {
                                            "description": "fetch_content_text(api_key: Message) - **Tavily AI** is a search engine optimized for LLMs and RAG,         aimed at efficient, quick, and persistent search results.",
                                            "name": "None-fetch_content_text",
                                            "tags": [
                                                "None-fetch_content_text"
                                            ]
                                        }
                                    ]
                                },
                                "topic": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Search Topic",
                                    "dynamic": false,
                                    "info": "The category of the search.",
                                    "name": "topic",
                                    "options": [
                                        "general",
                                        "news"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "general"
                                }
                            },
                            "tool_mode": true
                        },
                        "showNode": true,
                        "type": "TavilySearchComponent"
                    },
                    "dragging": false,
                    "id": "TavilySearchComponent-Gv4zn",
                    "measured": {
                        "height": 489,
                        "width": 360
                    },
                    "position": {
                        "x": 875.7686789989679,
                        "y": 798.478848045035
                    },
                    "selected": false,
                    "type": "genericNode"
                },
                {
                    "data": {
                        "id": "OpenAIModel-Yo7s2",
                        "node": {
                            "base_classes": [
                                "LanguageModel",
                                "Message"
                            ],
                            "beta": false,
                            "category": "models",
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Generates text using OpenAI LLMs.",
                            "display_name": "OpenAI",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "input_value",
                                "system_message",
                                "stream",
                                "max_tokens",
                                "model_kwargs",
                                "json_mode",
                                "model_name",
                                "openai_api_base",
                                "api_key",
                                "temperature",
                                "seed"
                            ],
                            "frozen": false,
                            "icon": "OpenAI",
                            "key": "OpenAIModel",
                            "legacy": false,
                            "metadata": {},
                            "minimized": false,
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "text_response",
                                    "name": "text_output",
                                    "required_inputs": [],
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                },
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Language Model",
                                    "method": "build_model",
                                    "name": "model_output",
                                    "required_inputs": [
                                        "api_key"
                                    ],
                                    "selected": "LanguageModel",
                                    "types": [
                                        "LanguageModel"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "score": 0.14285714285714285,
                            "template": {
                                "_type": "Component",
                                "api_key": {
                                    "_input_type": "SecretStrInput",
                                    "advanced": false,
                                    "display_name": "OpenAI API Key",
                                    "dynamic": false,
                                    "info": "The OpenAI API Key to use for the OpenAI model.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "load_from_db": true,
                                    "name": "api_key",
                                    "password": true,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": "OPENAI_API_KEY"
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.openai_constants import OPENAI_MODEL_NAMES\nfrom langflow.field_typing import LanguageModel\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.inputs import BoolInput, DictInput, DropdownInput, IntInput, SecretStrInput, SliderInput, StrInput\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIModel\"\n\n    inputs = [\n        *LCModelComponent._base_inputs,\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            range_spec=RangeSpec(min=0, max=128000),\n        ),\n        DictInput(\n            name=\"model_kwargs\",\n            display_name=\"Model Kwargs\",\n            advanced=True,\n            info=\"Additional keyword arguments to pass to the model.\",\n        ),\n        BoolInput(\n            name=\"json_mode\",\n            display_name=\"JSON Mode\",\n            advanced=True,\n            info=\"If True, it will output JSON regardless of passing a schema.\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            advanced=False,\n            options=OPENAI_MODEL_NAMES,\n            value=OPENAI_MODEL_NAMES[0],\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. \"\n            \"Defaults to https://api.openai.com/v1. \"\n            \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n            required=True,\n        ),\n        SliderInput(\n            name=\"temperature\", display_name=\"Temperature\", value=0.1, range_spec=RangeSpec(min=0, max=2, step=0.01)\n        ),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        openai_api_key = self.api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\n        json_mode = self.json_mode\n        seed = self.seed\n\n        api_key = SecretStr(openai_api_key).get_secret_value() if openai_api_key else None\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature if temperature is not None else 0.1,\n            seed=seed,\n        )\n        if json_mode:\n            output = output.bind(response_format={\"type\": \"json_object\"})\n\n        return output\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"Get a message from an OpenAI exception.\n\n        Args:\n            e (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return None\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")\n            if message:\n                return message\n        return None\n"
                                },
                                "input_value": {
                                    "_input_type": "MessageInput",
                                    "advanced": false,
                                    "display_name": "Input",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "json_mode": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "JSON Mode",
                                    "dynamic": false,
                                    "info": "If True, it will output JSON regardless of passing a schema.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "json_mode",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "max_tokens": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Max Tokens",
                                    "dynamic": false,
                                    "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "max_tokens",
                                    "placeholder": "",
                                    "range_spec": {
                                        "max": 128000,
                                        "min": 0,
                                        "step": 0.1,
                                        "step_type": "float"
                                    },
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": ""
                                },
                                "model_kwargs": {
                                    "_input_type": "DictInput",
                                    "advanced": true,
                                    "display_name": "Model Kwargs",
                                    "dynamic": false,
                                    "info": "Additional keyword arguments to pass to the model.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "model_kwargs",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "type": "dict",
                                    "value": {}
                                },
                                "model_name": {
                                    "_input_type": "DropdownInput",
                                    "advanced": false,
                                    "combobox": false,
                                    "dialog_inputs": {},
                                    "display_name": "Model Name",
                                    "dynamic": false,
                                    "info": "",
                                    "name": "model_name",
                                    "options": [
                                        "gpt-4o-mini",
                                        "gpt-4o",
                                        "gpt-4-turbo",
                                        "gpt-4-turbo-preview",
                                        "gpt-4",
                                        "gpt-3.5-turbo",
                                        "gpt-3.5-turbo-0125"
                                    ],
                                    "options_metadata": [],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "gpt-4o-mini"
                                },
                                "openai_api_base": {
                                    "_input_type": "StrInput",
                                    "advanced": true,
                                    "display_name": "OpenAI API Base",
                                    "dynamic": false,
                                    "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "name": "openai_api_base",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "seed": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Seed",
                                    "dynamic": false,
                                    "info": "The seed controls the reproducibility of the job.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "seed",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 1
                                },
                                "stream": {
                                    "_input_type": "BoolInput",
                                    "advanced": false,
                                    "display_name": "Stream",
                                    "dynamic": false,
                                    "info": "Stream the response from the model. Streaming works only in Chat.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "stream",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "system_message": {
                                    "_input_type": "MultilineInput",
                                    "advanced": false,
                                    "display_name": "System Message",
                                    "dynamic": false,
                                    "info": "System message to pass to the model.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "system_message",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "temperature": {
                                    "_input_type": "SliderInput",
                                    "advanced": false,
                                    "display_name": "Temperature",
                                    "dynamic": false,
                                    "info": "",
                                    "max_label": "",
                                    "max_label_icon": "",
                                    "min_label": "",
                                    "min_label_icon": "",
                                    "name": "temperature",
                                    "placeholder": "",
                                    "range_spec": {
                                        "max": 2,
                                        "min": 0,
                                        "step": 0.01,
                                        "step_type": "float"
                                    },
                                    "required": false,
                                    "show": true,
                                    "slider_buttons": false,
                                    "slider_buttons_options": [],
                                    "slider_input": false,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "type": "slider",
                                    "value": 0.1
                                }
                            },
                            "tool_mode": false
                        },
                        "showNode": true,
                        "type": "OpenAIModel"
                    },
                    "dragging": false,
                    "id": "OpenAIModel-Yo7s2",
                    "measured": {
                        "height": 734,
                        "width": 360
                    },
                    "position": {
                        "x": 1718.9581068990763,
                        "y": 1081.137733422722
                    },
                    "selected": true,
                    "type": "genericNode"
                }
            ],
            "viewport": {
                "x": -84.19731102880883,
                "y": -179.36393502789429,
                "zoom": 0.5492417618766154
            }
        },
        "is_component": false,
        "updated_at": "2025-01-25T04:58:25+00:00",
        "webhook": false,
        "endpoint_name": null,
        "tags": [
            "assistants",
            "agents"
        ],
        "locked": false,
        "id": "9b677fce-74a8-479a-8f79-f87cb33dcf4b",
        "user_id": null,
        "folder_id": "c54584e6-88eb-4ac0-b70c-68aee37fdce2"
    },
    {
        "name": "Research Agent",
        "description": "Agent that generates focused plans, conducts web searches, and synthesizes findings into comprehensive reports.",
        "icon": "TextSearchIcon",
        "icon_bg_color": null,
        "gradient": "5",
        "data": {
            "edges": [
                {
                    "animated": false,
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "ChatInput",
                            "id": "ChatInput-JfaSH",
                            "name": "message",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "input_value",
                            "id": "Prompt-QF5LF",
                            "inputTypes": [
                                "Message",
                                "Text"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "reactflow__edge-ChatInput-JfaSH{\u0153dataType\u0153:\u0153ChatInput\u0153,\u0153id\u0153:\u0153ChatInput-JfaSH\u0153,\u0153name\u0153:\u0153message\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-Prompt-QF5LF{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153Prompt-QF5LF\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153,\u0153Text\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "selected": false,
                    "source": "ChatInput-JfaSH",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153ChatInput\u0153, \u0153id\u0153: \u0153ChatInput-JfaSH\u0153, \u0153name\u0153: \u0153message\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "Prompt-QF5LF",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153input_value\u0153, \u0153id\u0153: \u0153Prompt-QF5LF\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153, \u0153Text\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "animated": false,
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "Prompt",
                            "id": "Prompt-vnTcM",
                            "name": "prompt",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "input_value",
                            "id": "Agent-yGw6Q",
                            "inputTypes": [
                                "Message"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "reactflow__edge-Prompt-vnTcM{\u0153dataType\u0153:\u0153Prompt\u0153,\u0153id\u0153:\u0153Prompt-vnTcM\u0153,\u0153name\u0153:\u0153prompt\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-Agent-yGw6Q{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153Agent-yGw6Q\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "selected": false,
                    "source": "Prompt-vnTcM",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153Prompt\u0153, \u0153id\u0153: \u0153Prompt-vnTcM\u0153, \u0153name\u0153: \u0153prompt\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "Agent-yGw6Q",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153input_value\u0153, \u0153id\u0153: \u0153Agent-yGw6Q\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "animated": false,
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "Agent",
                            "id": "Agent-yGw6Q",
                            "name": "response",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "search_results",
                            "id": "Prompt-QF5LF",
                            "inputTypes": [
                                "Message",
                                "Text"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "reactflow__edge-Agent-yGw6Q{\u0153dataType\u0153:\u0153Agent\u0153,\u0153id\u0153:\u0153Agent-yGw6Q\u0153,\u0153name\u0153:\u0153response\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-Prompt-QF5LF{\u0153fieldName\u0153:\u0153search_results\u0153,\u0153id\u0153:\u0153Prompt-QF5LF\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153,\u0153Text\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "selected": false,
                    "source": "Agent-yGw6Q",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153Agent\u0153, \u0153id\u0153: \u0153Agent-yGw6Q\u0153, \u0153name\u0153: \u0153response\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "Prompt-QF5LF",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153search_results\u0153, \u0153id\u0153: \u0153Prompt-QF5LF\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153, \u0153Text\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "TavilySearchComponent",
                            "id": "TavilySearchComponent-ChvwJ",
                            "name": "component_as_tool",
                            "output_types": [
                                "Tool"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "tools",
                            "id": "Agent-yGw6Q",
                            "inputTypes": [
                                "Tool"
                            ],
                            "type": "other"
                        }
                    },
                    "id": "reactflow__edge-TavilySearchComponent-ChvwJ{\u0153dataType\u0153:\u0153TavilySearchComponent\u0153,\u0153id\u0153:\u0153TavilySearchComponent-ChvwJ\u0153,\u0153name\u0153:\u0153component_as_tool\u0153,\u0153output_types\u0153:[\u0153Tool\u0153]}-Agent-yGw6Q{\u0153fieldName\u0153:\u0153tools\u0153,\u0153id\u0153:\u0153Agent-yGw6Q\u0153,\u0153inputTypes\u0153:[\u0153Tool\u0153],\u0153type\u0153:\u0153other\u0153}",
                    "source": "TavilySearchComponent-ChvwJ",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153TavilySearchComponent\u0153, \u0153id\u0153: \u0153TavilySearchComponent-ChvwJ\u0153, \u0153name\u0153: \u0153component_as_tool\u0153, \u0153output_types\u0153: [\u0153Tool\u0153]}",
                    "target": "Agent-yGw6Q",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153tools\u0153, \u0153id\u0153: \u0153Agent-yGw6Q\u0153, \u0153inputTypes\u0153: [\u0153Tool\u0153], \u0153type\u0153: \u0153other\u0153}"
                },
                {
                    "data": {
                        "sourceHandle": {
                            "dataType": "Prompt",
                            "id": "Prompt-D14S9",
                            "name": "prompt",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "system_message",
                            "id": "OpenAIModel-FVlqP",
                            "inputTypes": [
                                "Message"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "xy-edge__Prompt-D14S9{\u0153dataType\u0153:\u0153Prompt\u0153,\u0153id\u0153:\u0153Prompt-D14S9\u0153,\u0153name\u0153:\u0153prompt\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-OpenAIModel-FVlqP{\u0153fieldName\u0153:\u0153system_message\u0153,\u0153id\u0153:\u0153OpenAIModel-FVlqP\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "Prompt-D14S9",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153Prompt\u0153, \u0153id\u0153: \u0153Prompt-D14S9\u0153, \u0153name\u0153: \u0153prompt\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "OpenAIModel-FVlqP",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153system_message\u0153, \u0153id\u0153: \u0153OpenAIModel-FVlqP\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "data": {
                        "sourceHandle": {
                            "dataType": "ChatInput",
                            "id": "ChatInput-JfaSH",
                            "name": "message",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "input_value",
                            "id": "OpenAIModel-FVlqP",
                            "inputTypes": [
                                "Message"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "xy-edge__ChatInput-JfaSH{\u0153dataType\u0153:\u0153ChatInput\u0153,\u0153id\u0153:\u0153ChatInput-JfaSH\u0153,\u0153name\u0153:\u0153message\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-OpenAIModel-FVlqP{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153OpenAIModel-FVlqP\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "ChatInput-JfaSH",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153ChatInput\u0153, \u0153id\u0153: \u0153ChatInput-JfaSH\u0153, \u0153name\u0153: \u0153message\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "OpenAIModel-FVlqP",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153input_value\u0153, \u0153id\u0153: \u0153OpenAIModel-FVlqP\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "data": {
                        "sourceHandle": {
                            "dataType": "OpenAIModel",
                            "id": "OpenAIModel-FVlqP",
                            "name": "text_output",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "previous_response",
                            "id": "Prompt-vnTcM",
                            "inputTypes": [
                                "Message",
                                "Text"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "xy-edge__OpenAIModel-FVlqP{\u0153dataType\u0153:\u0153OpenAIModel\u0153,\u0153id\u0153:\u0153OpenAIModel-FVlqP\u0153,\u0153name\u0153:\u0153text_output\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-Prompt-vnTcM{\u0153fieldName\u0153:\u0153previous_response\u0153,\u0153id\u0153:\u0153Prompt-vnTcM\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153,\u0153Text\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "OpenAIModel-FVlqP",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153OpenAIModel\u0153, \u0153id\u0153: \u0153OpenAIModel-FVlqP\u0153, \u0153name\u0153: \u0153text_output\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "Prompt-vnTcM",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153previous_response\u0153, \u0153id\u0153: \u0153Prompt-vnTcM\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153, \u0153Text\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "data": {
                        "sourceHandle": {
                            "dataType": "Prompt",
                            "id": "Prompt-QF5LF",
                            "name": "prompt",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "input_value",
                            "id": "OpenAIModel-MhnGV",
                            "inputTypes": [
                                "Message"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "xy-edge__Prompt-QF5LF{\u0153dataType\u0153:\u0153Prompt\u0153,\u0153id\u0153:\u0153Prompt-QF5LF\u0153,\u0153name\u0153:\u0153prompt\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-OpenAIModel-MhnGV{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153OpenAIModel-MhnGV\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "Prompt-QF5LF",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153Prompt\u0153, \u0153id\u0153: \u0153Prompt-QF5LF\u0153, \u0153name\u0153: \u0153prompt\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "OpenAIModel-MhnGV",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153input_value\u0153, \u0153id\u0153: \u0153OpenAIModel-MhnGV\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "data": {
                        "sourceHandle": {
                            "dataType": "Prompt",
                            "id": "Prompt-Lqvw5",
                            "name": "prompt",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "system_message",
                            "id": "OpenAIModel-MhnGV",
                            "inputTypes": [
                                "Message"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "xy-edge__Prompt-Lqvw5{\u0153dataType\u0153:\u0153Prompt\u0153,\u0153id\u0153:\u0153Prompt-Lqvw5\u0153,\u0153name\u0153:\u0153prompt\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-OpenAIModel-MhnGV{\u0153fieldName\u0153:\u0153system_message\u0153,\u0153id\u0153:\u0153OpenAIModel-MhnGV\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "Prompt-Lqvw5",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153Prompt\u0153, \u0153id\u0153: \u0153Prompt-Lqvw5\u0153, \u0153name\u0153: \u0153prompt\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "OpenAIModel-MhnGV",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153system_message\u0153, \u0153id\u0153: \u0153OpenAIModel-MhnGV\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "data": {
                        "sourceHandle": {
                            "dataType": "OpenAIModel",
                            "id": "OpenAIModel-MhnGV",
                            "name": "text_output",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "input_value",
                            "id": "ChatOutput-dc1aC",
                            "inputTypes": [
                                "Message"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "xy-edge__OpenAIModel-MhnGV{\u0153dataType\u0153:\u0153OpenAIModel\u0153,\u0153id\u0153:\u0153OpenAIModel-MhnGV\u0153,\u0153name\u0153:\u0153text_output\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-ChatOutput-dc1aC{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153ChatOutput-dc1aC\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "OpenAIModel-MhnGV",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153OpenAIModel\u0153, \u0153id\u0153: \u0153OpenAIModel-MhnGV\u0153, \u0153name\u0153: \u0153text_output\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "ChatOutput-dc1aC",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153input_value\u0153, \u0153id\u0153: \u0153ChatOutput-dc1aC\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153], \u0153type\u0153: \u0153str\u0153}"
                }
            ],
            "nodes": [
                {
                    "data": {
                        "description": "Create a prompt template with dynamic variables.",
                        "display_name": "Prompt",
                        "id": "Prompt-vnTcM",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {
                                "template": [
                                    "previous_response"
                                ]
                            },
                            "description": "Create a prompt template with dynamic variables.",
                            "display_name": "Prompt",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "template"
                            ],
                            "frozen": false,
                            "icon": "prompts",
                            "legacy": false,
                            "lf_version": "1.0.19.post2",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Prompt Message",
                                    "method": "build_prompt",
                                    "name": "prompt",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import MessageTextInput, Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            tool_mode=True,\n            advanced=True,\n            info=\"A placeholder input for tool mode.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    async def update_frontend_node(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = await super().update_frontend_node(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n"
                                },
                                "previous_response": {
                                    "advanced": false,
                                    "display_name": "previous_response",
                                    "dynamic": false,
                                    "field_type": "str",
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "input_types": [
                                        "Message",
                                        "Text"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "previous_response",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": ""
                                },
                                "template": {
                                    "_input_type": "PromptInput",
                                    "advanced": false,
                                    "display_name": "Template",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "template",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "type": "prompt",
                                    "value": "\n\nRESEARCH PLAN: {previous_response}\n\nUse Tavily Search to investigate the queries and analyze the findings.\nFocus on academic and reliable sources.\n\nSteps:\n1. Search using provided queries\n2. Analyze search results\n3. Verify source credibility\n4. Extract key findings\n\nFormat findings as:\n\nSEARCH RESULTS:\n[Key findings from searches]\n\nSOURCE ANALYSIS:\n[Credibility assessment]\n\nMAIN INSIGHTS:\n[Critical discoveries]\n\nEVIDENCE QUALITY:\n[Evaluation of findings]"
                                },
                                "tool_placeholder": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Tool Placeholder",
                                    "dynamic": false,
                                    "info": "A placeholder input for tool mode.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "tool_placeholder",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": true,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "Prompt"
                    },
                    "dragging": false,
                    "height": 347,
                    "id": "Prompt-vnTcM",
                    "measured": {
                        "height": 347,
                        "width": 360
                    },
                    "position": {
                        "x": 1818.6564755787988,
                        "y": 857.0380982792217
                    },
                    "positionAbsolute": {
                        "x": 1803.2315476328304,
                        "y": 839.0423490089254
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "id": "ChatInput-JfaSH",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "category": "inputs",
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Get chat inputs from the Playground.",
                            "display_name": "Chat Input",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "input_value",
                                "should_store_message",
                                "sender",
                                "sender_name",
                                "session_id",
                                "files",
                                "background_color",
                                "chat_icon",
                                "text_color"
                            ],
                            "frozen": false,
                            "icon": "MessagesSquare",
                            "key": "ChatInput",
                            "legacy": false,
                            "lf_version": "1.0.19.post2",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "message_response",
                                    "name": "message",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "background_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Background Color",
                                    "dynamic": false,
                                    "info": "The background color of the icon.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "background_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "chat_icon": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Icon",
                                    "dynamic": false,
                                    "info": "The icon of the message.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "chat_icon",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import (\n    DropdownInput,\n    FileInput,\n    MessageTextInput,\n    MultilineInput,\n    Output,\n)\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_USER,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatInput\"\n    minimized = True\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n            input_types=[],\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    async def message_response(self) -> Message:\n        background_color = self.background_color\n        text_color = self.text_color\n        icon = self.chat_icon\n\n        message = await Message.create(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n            properties={\n                \"background_color\": background_color,\n                \"text_color\": text_color,\n                \"icon\": icon,\n            },\n        )\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n"
                                },
                                "files": {
                                    "_input_type": "FileInput",
                                    "advanced": true,
                                    "display_name": "Files",
                                    "dynamic": false,
                                    "fileTypes": [
                                        "txt",
                                        "md",
                                        "mdx",
                                        "csv",
                                        "json",
                                        "yaml",
                                        "yml",
                                        "xml",
                                        "html",
                                        "htm",
                                        "pdf",
                                        "docx",
                                        "py",
                                        "sh",
                                        "sql",
                                        "js",
                                        "ts",
                                        "tsx",
                                        "jpg",
                                        "jpeg",
                                        "png",
                                        "bmp",
                                        "image"
                                    ],
                                    "file_path": "",
                                    "info": "Files to be sent with the message.",
                                    "list": true,
                                    "name": "files",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "file",
                                    "value": ""
                                },
                                "input_value": {
                                    "_input_type": "MultilineInput",
                                    "advanced": false,
                                    "display_name": "Text",
                                    "dynamic": false,
                                    "info": "Message to be passed as input.",
                                    "input_types": [],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Research the effectiveness of different prompt engineering techniques in controlling AI hallucinations, with focus on real-world applications and empirical studies."
                                },
                                "sender": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Sender Type",
                                    "dynamic": false,
                                    "info": "Type of sender.",
                                    "name": "sender",
                                    "options": [
                                        "Machine",
                                        "User"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "User"
                                },
                                "sender_name": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Sender Name",
                                    "dynamic": false,
                                    "info": "Name of the sender.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "sender_name",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "User"
                                },
                                "session_id": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Session ID",
                                    "dynamic": false,
                                    "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "session_id",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "should_store_message": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Store Messages",
                                    "dynamic": false,
                                    "info": "Store the message in the history.",
                                    "list": false,
                                    "name": "should_store_message",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "text_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Text Color",
                                    "dynamic": false,
                                    "info": "The text color of the name",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "text_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                }
                            }
                        },
                        "type": "ChatInput"
                    },
                    "dragging": false,
                    "height": 234,
                    "id": "ChatInput-JfaSH",
                    "measured": {
                        "height": 234,
                        "width": 360
                    },
                    "position": {
                        "x": 756.0075981758582,
                        "y": 756.7423476254241
                    },
                    "positionAbsolute": {
                        "x": 756.0075981758582,
                        "y": 756.7423476254241
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "description": "Display a chat message in the Playground.",
                        "display_name": "Chat Output",
                        "id": "ChatOutput-dc1aC",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Display a chat message in the Playground.",
                            "display_name": "Chat Output",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "input_value",
                                "should_store_message",
                                "sender",
                                "sender_name",
                                "session_id",
                                "data_template",
                                "background_color",
                                "chat_icon",
                                "text_color"
                            ],
                            "frozen": false,
                            "icon": "MessagesSquare",
                            "legacy": false,
                            "lf_version": "1.0.19.post2",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "message_response",
                                    "name": "message",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "background_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Background Color",
                                    "dynamic": false,
                                    "info": "The background color of the icon.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "background_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "chat_icon": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Icon",
                                    "dynamic": false,
                                    "info": "The icon of the message.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "chat_icon",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, MessageInput, MessageTextInput, Output\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        MessageInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            source_dict[\"source\"] = source\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n        background_color = self.background_color\n        text_color = self.text_color\n        if self.chat_icon:\n            icon = self.chat_icon\n        message = self.input_value if isinstance(self.input_value, Message) else Message(text=self.input_value)\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n        message.properties.icon = icon\n        message.properties.background_color = background_color\n        message.properties.text_color = text_color\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n"
                                },
                                "data_template": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Data Template",
                                    "dynamic": false,
                                    "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "data_template",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "{text}"
                                },
                                "input_value": {
                                    "_input_type": "MessageInput",
                                    "advanced": false,
                                    "display_name": "Text",
                                    "dynamic": false,
                                    "info": "Message to be passed as output.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "sender": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Sender Type",
                                    "dynamic": false,
                                    "info": "Type of sender.",
                                    "name": "sender",
                                    "options": [
                                        "Machine",
                                        "User"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Machine"
                                },
                                "sender_name": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Sender Name",
                                    "dynamic": false,
                                    "info": "Name of the sender.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "sender_name",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "AI"
                                },
                                "session_id": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Session ID",
                                    "dynamic": false,
                                    "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "session_id",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "should_store_message": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Store Messages",
                                    "dynamic": false,
                                    "info": "Store the message in the history.",
                                    "list": false,
                                    "name": "should_store_message",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "text_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Text Color",
                                    "dynamic": false,
                                    "info": "The text color of the name",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "text_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "ChatOutput"
                    },
                    "dragging": true,
                    "height": 234,
                    "id": "ChatOutput-dc1aC",
                    "measured": {
                        "height": 234,
                        "width": 360
                    },
                    "position": {
                        "x": 3235.4806463111895,
                        "y": 851.4173191525891
                    },
                    "positionAbsolute": {
                        "x": 3200.774558432761,
                        "y": 853.9881404769172
                    },
                    "selected": true,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "description": "Create a prompt template with dynamic variables.",
                        "display_name": "Prompt",
                        "id": "Prompt-QF5LF",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {
                                "template": [
                                    "search_results",
                                    "input_value"
                                ]
                            },
                            "description": "Create a prompt template with dynamic variables.",
                            "display_name": "Prompt",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "template"
                            ],
                            "frozen": false,
                            "icon": "prompts",
                            "legacy": false,
                            "lf_version": "1.0.19.post2",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Prompt Message",
                                    "method": "build_prompt",
                                    "name": "prompt",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import MessageTextInput, Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            tool_mode=True,\n            advanced=True,\n            info=\"A placeholder input for tool mode.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    async def update_frontend_node(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = await super().update_frontend_node(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n"
                                },
                                "input_value": {
                                    "advanced": false,
                                    "display_name": "input_value",
                                    "dynamic": false,
                                    "field_type": "str",
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "input_types": [
                                        "Message",
                                        "Text"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": ""
                                },
                                "search_results": {
                                    "advanced": false,
                                    "display_name": "search_results",
                                    "dynamic": false,
                                    "field_type": "str",
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "input_types": [
                                        "Message",
                                        "Text"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "search_results",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": ""
                                },
                                "template": {
                                    "_input_type": "PromptInput",
                                    "advanced": false,
                                    "display_name": "Template",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "template",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "type": "prompt",
                                    "value": "RESEARCH FINDINGS: {search_results}\nORIGINAL QUERY: {input_value}\n"
                                },
                                "tool_placeholder": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Tool Placeholder",
                                    "dynamic": false,
                                    "info": "A placeholder input for tool mode.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "tool_placeholder",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": true,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "Prompt"
                    },
                    "dragging": false,
                    "height": 433,
                    "id": "Prompt-QF5LF",
                    "measured": {
                        "height": 433,
                        "width": 360
                    },
                    "position": {
                        "x": 2504.138359606453,
                        "y": 434.061360540584
                    },
                    "positionAbsolute": {
                        "x": 2504.138359606453,
                        "y": 434.061360540584
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "id": "note-OmVXD",
                        "node": {
                            "description": "# Research Agent \n\nWelcome to the Research Agent! This flow helps you conduct in-depth research on various topics using AI-powered tools and analysis.\n\n## Instructions\n1. Enter Your Research Query\n   - Type your research question or topic into the Chat Input node.\n   - Be specific and clear about what you want to investigate.\n\n2. Generate Research Plan\n   - The system will create a focused research plan based on your query.\n   - This plan includes key search queries and priorities.\n\n3. Conduct Web Search\n   - The Tavily AI Search tool will perform web searches using the generated queries.\n   - It focuses on finding academic and reliable sources.\n\n4. Analyze and Synthesize\n   - The AI agent will review the search results and create a comprehensive synthesis.\n   - The report includes an executive summary, methodology, findings, and conclusions.\n\n5. Review the Output\n   - Read the final report in the Chat Output node.\n   - Use this information as a starting point for further research or decision-making.\n\nRemember: You can refine your initial query for more specific results! \ud83d\udd0d\ud83d\udcca",
                            "display_name": "",
                            "documentation": "",
                            "template": {
                                "backgroundColor": "emerald"
                            }
                        },
                        "type": "note"
                    },
                    "dragging": false,
                    "height": 765,
                    "id": "note-OmVXD",
                    "measured": {
                        "height": 765,
                        "width": 328
                    },
                    "position": {
                        "x": 471.4335708918645,
                        "y": -9.732869247334605
                    },
                    "positionAbsolute": {
                        "x": 471.4335708918645,
                        "y": -9.732869247334605
                    },
                    "resizing": false,
                    "selected": false,
                    "style": {
                        "height": 765,
                        "width": 600
                    },
                    "type": "noteNode",
                    "width": 600
                },
                {
                    "data": {
                        "description": "Define the agent's instructions, then enter a task to complete using tools.",
                        "display_name": "Agent",
                        "id": "Agent-yGw6Q",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Define the agent's instructions, then enter a task to complete using tools.",
                            "display_name": "Agent",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "agent_llm",
                                "max_tokens",
                                "model_kwargs",
                                "json_mode",
                                "output_schema",
                                "model_name",
                                "openai_api_base",
                                "api_key",
                                "temperature",
                                "seed",
                                "output_parser",
                                "system_prompt",
                                "tools",
                                "input_value",
                                "handle_parsing_errors",
                                "verbose",
                                "max_iterations",
                                "agent_description",
                                "memory",
                                "sender",
                                "sender_name",
                                "n_messages",
                                "session_id",
                                "order",
                                "template",
                                "add_current_date_tool"
                            ],
                            "frozen": false,
                            "icon": "bot",
                            "legacy": false,
                            "lf_version": "1.0.19.post2",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Response",
                                    "method": "message_response",
                                    "name": "response",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "add_current_date_tool": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Current Date",
                                    "dynamic": false,
                                    "info": "If true, will add a tool to the agent that returns the current date.",
                                    "list": false,
                                    "name": "add_current_date_tool",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "agent_description": {
                                    "_input_type": "MultilineInput",
                                    "advanced": true,
                                    "display_name": "Agent Description [Deprecated]",
                                    "dynamic": false,
                                    "info": "The description of the agent. This is only used when in Tool Mode. Defaults to 'A helpful assistant with access to the following tools:' and tools are added dynamically. This feature is deprecated and will be removed in future versions.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "agent_description",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "A helpful assistant with access to the following tools:"
                                },
                                "agent_llm": {
                                    "_input_type": "DropdownInput",
                                    "advanced": false,
                                    "combobox": false,
                                    "display_name": "Model Provider",
                                    "dynamic": false,
                                    "info": "The provider of the language model that the agent will use to generate responses.",
                                    "input_types": [],
                                    "name": "agent_llm",
                                    "options": [
                                        "Amazon Bedrock",
                                        "Anthropic",
                                        "Azure OpenAI",
                                        "Google Generative AI",
                                        "Groq",
                                        "NVIDIA",
                                        "OpenAI",
                                        "Custom"
                                    ],
                                    "placeholder": "",
                                    "real_time_refresh": true,
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "OpenAI"
                                },
                                "api_key": {
                                    "_input_type": "SecretStrInput",
                                    "advanced": false,
                                    "display_name": "OpenAI API Key",
                                    "dynamic": false,
                                    "info": "The OpenAI API Key to use for the OpenAI model.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "load_from_db": true,
                                    "name": "api_key",
                                    "password": true,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": "OPENAI_API_KEY"
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langchain_core.tools import StructuredTool\n\nfrom langflow.base.agents.agent import LCToolsAgentComponent\nfrom langflow.base.models.model_input_constants import (\n    ALL_PROVIDER_FIELDS,\n    MODEL_DYNAMIC_UPDATE_FIELDS,\n    MODEL_PROVIDERS_DICT,\n)\nfrom langflow.base.models.model_utils import get_model_name\nfrom langflow.components.helpers import CurrentDateComponent\nfrom langflow.components.helpers.memory import MemoryComponent\nfrom langflow.components.langchain_utilities.tool_calling import ToolCallingAgentComponent\nfrom langflow.custom.utils import update_component_build_config\nfrom langflow.io import BoolInput, DropdownInput, MultilineInput, Output\nfrom langflow.logging import logger\nfrom langflow.schema.dotdict import dotdict\nfrom langflow.schema.message import Message\n\n\ndef set_advanced_true(component_input):\n    component_input.advanced = True\n    return component_input\n\n\nclass AgentComponent(ToolCallingAgentComponent):\n    display_name: str = \"Agent\"\n    description: str = \"Define the agent's instructions, then enter a task to complete using tools.\"\n    icon = \"bot\"\n    beta = False\n    name = \"Agent\"\n\n    memory_inputs = [set_advanced_true(component_input) for component_input in MemoryComponent().inputs]\n\n    inputs = [\n        DropdownInput(\n            name=\"agent_llm\",\n            display_name=\"Model Provider\",\n            info=\"The provider of the language model that the agent will use to generate responses.\",\n            options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n            value=\"OpenAI\",\n            real_time_refresh=True,\n            input_types=[],\n        ),\n        *MODEL_PROVIDERS_DICT[\"OpenAI\"][\"inputs\"],\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=\"Agent Instructions\",\n            info=\"System Prompt: Initial instructions and context provided to guide the agent's behavior.\",\n            value=\"You are a helpful assistant that can use tools to answer questions and perform tasks.\",\n            advanced=False,\n        ),\n        *LCToolsAgentComponent._base_inputs,\n        *memory_inputs,\n        BoolInput(\n            name=\"add_current_date_tool\",\n            display_name=\"Current Date\",\n            advanced=True,\n            info=\"If true, will add a tool to the agent that returns the current date.\",\n            value=True,\n        ),\n    ]\n    outputs = [Output(name=\"response\", display_name=\"Response\", method=\"message_response\")]\n\n    async def message_response(self) -> Message:\n        try:\n            llm_model, display_name = self.get_llm()\n            if llm_model is None:\n                msg = \"No language model selected\"\n                raise ValueError(msg)\n            self.model_name = get_model_name(llm_model, display_name=display_name)\n        except Exception as e:\n            # Log the error for debugging purposes\n            logger.error(f\"Error retrieving language model: {e}\")\n            raise\n\n        try:\n            self.chat_history = await self.get_memory_data()\n        except Exception as e:\n            logger.error(f\"Error retrieving chat history: {e}\")\n            raise\n\n        if self.add_current_date_tool:\n            try:\n                if not isinstance(self.tools, list):  # type: ignore[has-type]\n                    self.tools = []\n                # Convert CurrentDateComponent to a StructuredTool\n                current_date_tool = (await CurrentDateComponent().to_toolkit()).pop(0)\n                # current_date_tool = CurrentDateComponent().to_toolkit()[0]\n                if isinstance(current_date_tool, StructuredTool):\n                    self.tools.append(current_date_tool)\n                else:\n                    msg = \"CurrentDateComponent must be converted to a StructuredTool\"\n                    raise TypeError(msg)\n            except Exception as e:\n                logger.error(f\"Error adding current date tool: {e}\")\n                raise\n\n        if not self.tools:\n            msg = \"Tools are required to run the agent.\"\n            logger.error(msg)\n            raise ValueError(msg)\n\n        try:\n            self.set(\n                llm=llm_model,\n                tools=self.tools,\n                chat_history=self.chat_history,\n                input_value=self.input_value,\n                system_prompt=self.system_prompt,\n            )\n            agent = self.create_agent_runnable()\n        except Exception as e:\n            logger.error(f\"Error setting up the agent: {e}\")\n            raise\n\n        return await self.run_agent(agent)\n\n    async def get_memory_data(self):\n        memory_kwargs = {\n            component_input.name: getattr(self, f\"{component_input.name}\") for component_input in self.memory_inputs\n        }\n        # filter out empty values\n        memory_kwargs = {k: v for k, v in memory_kwargs.items() if v}\n\n        return await MemoryComponent().set(**memory_kwargs).retrieve_messages()\n\n    def get_llm(self):\n        if isinstance(self.agent_llm, str):\n            try:\n                provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n                if provider_info:\n                    component_class = provider_info.get(\"component_class\")\n                    display_name = component_class.display_name\n                    inputs = provider_info.get(\"inputs\")\n                    prefix = provider_info.get(\"prefix\", \"\")\n                    return (\n                        self._build_llm_model(component_class, inputs, prefix),\n                        display_name,\n                    )\n            except Exception as e:\n                msg = f\"Error building {self.agent_llm} language model\"\n                raise ValueError(msg) from e\n        return self.agent_llm, None\n\n    def _build_llm_model(self, component, inputs, prefix=\"\"):\n        model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n        return component.set(**model_kwargs).build_model()\n\n    def set_component_params(self, component):\n        provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n        if provider_info:\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\")\n            model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n\n            return component.set(**model_kwargs)\n        return component\n\n    def delete_fields(self, build_config: dotdict, fields: dict | list[str]) -> None:\n        \"\"\"Delete specified fields from build_config.\"\"\"\n        for field in fields:\n            build_config.pop(field, None)\n\n    def update_input_types(self, build_config: dotdict) -> dotdict:\n        \"\"\"Update input types for all fields in build_config.\"\"\"\n        for key, value in build_config.items():\n            if isinstance(value, dict):\n                if value.get(\"input_types\") is None:\n                    build_config[key][\"input_types\"] = []\n            elif hasattr(value, \"input_types\") and value.input_types is None:\n                value.input_types = []\n        return build_config\n\n    async def update_build_config(\n        self, build_config: dotdict, field_value: str, field_name: str | None = None\n    ) -> dotdict:\n        # Iterate over all providers in the MODEL_PROVIDERS_DICT\n        # Existing logic for updating build_config\n        if field_name in (\"agent_llm\",):\n            build_config[\"agent_llm\"][\"value\"] = field_value\n            provider_info = MODEL_PROVIDERS_DICT.get(field_value)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call the component class's update_build_config method\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n\n            provider_configs: dict[str, tuple[dict, list[dict]]] = {\n                provider: (\n                    MODEL_PROVIDERS_DICT[provider][\"fields\"],\n                    [\n                        MODEL_PROVIDERS_DICT[other_provider][\"fields\"]\n                        for other_provider in MODEL_PROVIDERS_DICT\n                        if other_provider != provider\n                    ],\n                )\n                for provider in MODEL_PROVIDERS_DICT\n            }\n            if field_value in provider_configs:\n                fields_to_add, fields_to_delete = provider_configs[field_value]\n\n                # Delete fields from other providers\n                for fields in fields_to_delete:\n                    self.delete_fields(build_config, fields)\n\n                # Add provider-specific fields\n                if field_value == \"OpenAI\" and not any(field in build_config for field in fields_to_add):\n                    build_config.update(fields_to_add)\n                else:\n                    build_config.update(fields_to_add)\n                # Reset input types for agent_llm\n                build_config[\"agent_llm\"][\"input_types\"] = []\n            elif field_value == \"Custom\":\n                # Delete all provider fields\n                self.delete_fields(build_config, ALL_PROVIDER_FIELDS)\n                # Update with custom component\n                custom_component = DropdownInput(\n                    name=\"agent_llm\",\n                    display_name=\"Language Model\",\n                    options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n                    value=\"Custom\",\n                    real_time_refresh=True,\n                    input_types=[\"LanguageModel\"],\n                )\n                build_config.update({\"agent_llm\": custom_component.to_dict()})\n            # Update input types for all fields\n            build_config = self.update_input_types(build_config)\n\n            # Validate required keys\n            default_keys = [\n                \"code\",\n                \"_type\",\n                \"agent_llm\",\n                \"tools\",\n                \"input_value\",\n                \"add_current_date_tool\",\n                \"system_prompt\",\n                \"agent_description\",\n                \"max_iterations\",\n                \"handle_parsing_errors\",\n                \"verbose\",\n            ]\n            missing_keys = [key for key in default_keys if key not in build_config]\n            if missing_keys:\n                msg = f\"Missing required keys in build_config: {missing_keys}\"\n                raise ValueError(msg)\n        if (\n            isinstance(self.agent_llm, str)\n            and self.agent_llm in MODEL_PROVIDERS_DICT\n            and field_name in MODEL_DYNAMIC_UPDATE_FIELDS\n        ):\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                component_class = self.set_component_params(component_class)\n                prefix = provider_info.get(\"prefix\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call each component class's update_build_config method\n                    # remove the prefix from the field_name\n                    if isinstance(field_name, str) and isinstance(prefix, str):\n                        field_name = field_name.replace(prefix, \"\")\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n        return dotdict({k: v.to_dict() if hasattr(v, \"to_dict\") else v for k, v in build_config.items()})\n"
                                },
                                "handle_parsing_errors": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Handle Parse Errors",
                                    "dynamic": false,
                                    "info": "Should the Agent fix errors when reading user input for better processing?",
                                    "list": false,
                                    "name": "handle_parsing_errors",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "input_value": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": false,
                                    "display_name": "Input",
                                    "dynamic": false,
                                    "info": "The input provided by the user for the agent to process.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": true,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "json_mode": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "JSON Mode",
                                    "dynamic": false,
                                    "info": "If True, it will output JSON regardless of passing a schema.",
                                    "list": false,
                                    "name": "json_mode",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "max_iterations": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Max Iterations",
                                    "dynamic": false,
                                    "info": "The maximum number of attempts the agent can make to complete its task before it stops.",
                                    "list": false,
                                    "name": "max_iterations",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 15
                                },
                                "max_tokens": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Max Tokens",
                                    "dynamic": false,
                                    "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                                    "list": false,
                                    "name": "max_tokens",
                                    "placeholder": "",
                                    "range_spec": {
                                        "max": 128000,
                                        "min": 0,
                                        "step": 0.1,
                                        "step_type": "float"
                                    },
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": ""
                                },
                                "memory": {
                                    "_input_type": "HandleInput",
                                    "advanced": true,
                                    "display_name": "External Memory",
                                    "dynamic": false,
                                    "info": "Retrieve messages from an external memory. If empty, it will use the Langflow tables.",
                                    "input_types": [
                                        "Memory"
                                    ],
                                    "list": false,
                                    "name": "memory",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "other",
                                    "value": ""
                                },
                                "model_kwargs": {
                                    "_input_type": "DictInput",
                                    "advanced": true,
                                    "display_name": "Model Kwargs",
                                    "dynamic": false,
                                    "info": "Additional keyword arguments to pass to the model.",
                                    "list": false,
                                    "name": "model_kwargs",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "type": "dict",
                                    "value": {}
                                },
                                "model_name": {
                                    "_input_type": "DropdownInput",
                                    "advanced": false,
                                    "combobox": true,
                                    "display_name": "Model Name",
                                    "dynamic": false,
                                    "info": "To see the model names, first choose a provider. Then, enter your API key and click the refresh button next to the model name.",
                                    "name": "model_name",
                                    "options": [
                                        "gpt-4o-mini",
                                        "gpt-4o",
                                        "gpt-4-turbo",
                                        "gpt-4-turbo-preview",
                                        "gpt-4",
                                        "gpt-3.5-turbo",
                                        "gpt-3.5-turbo-0125"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "gpt-4o-mini"
                                },
                                "n_messages": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Number of Messages",
                                    "dynamic": false,
                                    "info": "Number of messages to retrieve.",
                                    "list": false,
                                    "name": "n_messages",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 100
                                },
                                "openai_api_base": {
                                    "_input_type": "StrInput",
                                    "advanced": true,
                                    "display_name": "OpenAI API Base",
                                    "dynamic": false,
                                    "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "openai_api_base",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "order": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Order",
                                    "dynamic": false,
                                    "info": "Order of the messages.",
                                    "name": "order",
                                    "options": [
                                        "Ascending",
                                        "Descending"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Ascending"
                                },
                                "seed": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Seed",
                                    "dynamic": false,
                                    "info": "The seed controls the reproducibility of the job.",
                                    "list": false,
                                    "name": "seed",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 1
                                },
                                "sender": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Sender Type",
                                    "dynamic": false,
                                    "info": "Filter by sender type.",
                                    "name": "sender",
                                    "options": [
                                        "Machine",
                                        "User",
                                        "Machine and User"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Machine and User"
                                },
                                "sender_name": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Sender Name",
                                    "dynamic": false,
                                    "info": "Filter by sender name.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "sender_name",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "session_id": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Session ID",
                                    "dynamic": false,
                                    "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "session_id",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "system_prompt": {
                                    "_input_type": "MultilineInput",
                                    "advanced": false,
                                    "display_name": "Agent Instructions",
                                    "dynamic": false,
                                    "info": "System Prompt: Initial instructions and context provided to guide the agent's behavior.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "system_prompt",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "You are a research analyst with access to Tavily Search."
                                },
                                "temperature": {
                                    "_input_type": "FloatInput",
                                    "advanced": true,
                                    "display_name": "Temperature",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "name": "temperature",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "float",
                                    "value": 0.1
                                },
                                "template": {
                                    "_input_type": "MultilineInput",
                                    "advanced": true,
                                    "display_name": "Template",
                                    "dynamic": false,
                                    "info": "The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "template",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "{sender_name}: {text}"
                                },
                                "tools": {
                                    "_input_type": "HandleInput",
                                    "advanced": false,
                                    "display_name": "Tools",
                                    "dynamic": false,
                                    "info": "These are the tools that the agent can use to help with tasks.",
                                    "input_types": [
                                        "Tool"
                                    ],
                                    "list": true,
                                    "name": "tools",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "other",
                                    "value": ""
                                },
                                "verbose": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Verbose",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "name": "verbose",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "Agent"
                    },
                    "dragging": false,
                    "height": 658,
                    "id": "Agent-yGw6Q",
                    "measured": {
                        "height": 658,
                        "width": 360
                    },
                    "position": {
                        "x": 2156.60686936856,
                        "y": 439.4579572266066
                    },
                    "positionAbsolute": {
                        "x": 2156.60686936856,
                        "y": 439.4579572266066
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "description": "Create a prompt template with dynamic variables.",
                        "display_name": "Prompt",
                        "id": "Prompt-D14S9",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {
                                "template": []
                            },
                            "description": "Create a prompt template with dynamic variables.",
                            "display_name": "Prompt",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "template"
                            ],
                            "frozen": false,
                            "icon": "prompts",
                            "legacy": false,
                            "lf_version": "1.0.19.post2",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Prompt Message",
                                    "method": "build_prompt",
                                    "name": "prompt",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import MessageTextInput, Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            tool_mode=True,\n            advanced=True,\n            info=\"A placeholder input for tool mode.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    async def update_frontend_node(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = await super().update_frontend_node(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n"
                                },
                                "template": {
                                    "_input_type": "PromptInput",
                                    "advanced": false,
                                    "display_name": "Template",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "template",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "type": "prompt",
                                    "value": "You are an expert research assistant.\n\nCreate a focused research plan that will guide our search.\n\nFormat your response exactly as:\n\nRESEARCH OBJECTIVE:\n[Clear statement of research goal]\n\nKEY SEARCH QUERIES:\n1. [Primary academic search query]\n2. [Secondary search query]\n3. [Alternative search approach]\n\nSEARCH PRIORITIES:\n- [What types of sources to focus on]\n- [Key aspects to investigate]\n- [Specific areas to explore]"
                                },
                                "tool_placeholder": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Tool Placeholder",
                                    "dynamic": false,
                                    "info": "A placeholder input for tool mode.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "tool_placeholder",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": true,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "Prompt"
                    },
                    "dragging": false,
                    "height": 260,
                    "id": "Prompt-D14S9",
                    "measured": {
                        "height": 260,
                        "width": 360
                    },
                    "position": {
                        "x": 1102.6079408836365,
                        "y": 550.2148817052229
                    },
                    "positionAbsolute": {
                        "x": 1102.6079408836365,
                        "y": 550.2148817052229
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "description": "Create a prompt template with dynamic variables.",
                        "display_name": "Prompt",
                        "id": "Prompt-Lqvw5",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {
                                "template": []
                            },
                            "description": "Create a prompt template with dynamic variables.",
                            "display_name": "Prompt",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "template"
                            ],
                            "frozen": false,
                            "icon": "prompts",
                            "legacy": false,
                            "lf_version": "1.0.19.post2",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Prompt Message",
                                    "method": "build_prompt",
                                    "name": "prompt",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import MessageTextInput, Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            tool_mode=True,\n            advanced=True,\n            info=\"A placeholder input for tool mode.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    async def update_frontend_node(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = await super().update_frontend_node(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n"
                                },
                                "template": {
                                    "_input_type": "PromptInput",
                                    "advanced": false,
                                    "display_name": "Template",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "template",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "type": "prompt",
                                    "value": "You are a research synthesis expert.\n\nCreate a comprehensive synthesis and report of our findings.\n\nFormat your response as:\n\nEXECUTIVE SUMMARY:\n[Key findings and implications]\n\nMETHODOLOGY:\n- Search Strategy Used\n- Sources Analyzed\n- Quality Assessment\n\nFINDINGS & ANALYSIS:\n[Detailed discussion of discoveries]\n\nCONCLUSIONS:\n[Main takeaways and insights]\n\nFUTURE DIRECTIONS:\n[Suggested next steps]\n\nIMPORTANT: For each major point or finding, include the relevant source link in square brackets at the end of the sentence or paragraph. For example: \"Harvard has developed a solid-state battery that charges in minutes. [Source: https://example.com/article]\"\n"
                                },
                                "tool_placeholder": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Tool Placeholder",
                                    "dynamic": false,
                                    "info": "A placeholder input for tool mode.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "tool_placeholder",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": true,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "Prompt"
                    },
                    "dragging": false,
                    "height": 260,
                    "id": "Prompt-Lqvw5",
                    "measured": {
                        "height": 260,
                        "width": 360
                    },
                    "position": {
                        "x": 2498.9482347755306,
                        "y": 889.7491088138673
                    },
                    "positionAbsolute": {
                        "x": 2498.9482347755306,
                        "y": 889.7491088138673
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "id": "note-0mAkP",
                        "node": {
                            "description": "# \ud83d\udd11 Tavily AI Search Needs API Key\n\nYou can get 1000 searches/month free [here](https://tavily.com/) ",
                            "display_name": "",
                            "documentation": "",
                            "template": {
                                "backgroundColor": "lime"
                            }
                        },
                        "type": "note"
                    },
                    "dragging": false,
                    "height": 325,
                    "id": "note-0mAkP",
                    "measured": {
                        "height": 325,
                        "width": 328
                    },
                    "position": {
                        "x": 1797.5781951055678,
                        "y": 206.30509875543274
                    },
                    "positionAbsolute": {
                        "x": 1797.5781951055678,
                        "y": 206.30509875543274
                    },
                    "selected": false,
                    "type": "noteNode",
                    "width": 325
                },
                {
                    "data": {
                        "id": "TavilySearchComponent-ChvwJ",
                        "node": {
                            "base_classes": [
                                "Data",
                                "Message"
                            ],
                            "beta": false,
                            "category": "tools",
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "**Tavily AI** is a search engine optimized for LLMs and RAG,         aimed at efficient, quick, and persistent search results.",
                            "display_name": "Tavily AI Search",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "api_key",
                                "query",
                                "search_depth",
                                "topic",
                                "max_results",
                                "include_images",
                                "include_answer"
                            ],
                            "frozen": false,
                            "icon": "TavilyIcon",
                            "key": "TavilySearchComponent",
                            "legacy": false,
                            "metadata": {},
                            "minimized": false,
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Toolset",
                                    "hidden": null,
                                    "method": "to_toolkit",
                                    "name": "component_as_tool",
                                    "required_inputs": null,
                                    "selected": "Tool",
                                    "types": [
                                        "Tool"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "score": 0.0075846556637275304,
                            "template": {
                                "_type": "Component",
                                "api_key": {
                                    "_input_type": "SecretStrInput",
                                    "advanced": false,
                                    "display_name": "Tavily API Key",
                                    "dynamic": false,
                                    "info": "Your Tavily API Key.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "load_from_db": true,
                                    "name": "api_key",
                                    "password": true,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": ""
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "import httpx\nfrom loguru import logger\n\nfrom langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import BoolInput, DropdownInput, IntInput, MessageTextInput, Output, SecretStrInput\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\n\n\nclass TavilySearchComponent(Component):\n    display_name = \"Tavily AI Search\"\n    description = \"\"\"**Tavily AI** is a search engine optimized for LLMs and RAG, \\\n        aimed at efficient, quick, and persistent search results.\"\"\"\n    icon = \"TavilyIcon\"\n\n    inputs = [\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"Tavily API Key\",\n            required=True,\n            info=\"Your Tavily API Key.\",\n        ),\n        MessageTextInput(\n            name=\"query\",\n            display_name=\"Search Query\",\n            info=\"The search query you want to execute with Tavily.\",\n            tool_mode=True,\n        ),\n        DropdownInput(\n            name=\"search_depth\",\n            display_name=\"Search Depth\",\n            info=\"The depth of the search.\",\n            options=[\"basic\", \"advanced\"],\n            value=\"advanced\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"topic\",\n            display_name=\"Search Topic\",\n            info=\"The category of the search.\",\n            options=[\"general\", \"news\"],\n            value=\"general\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"max_results\",\n            display_name=\"Max Results\",\n            info=\"The maximum number of search results to return.\",\n            value=5,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"include_images\",\n            display_name=\"Include Images\",\n            info=\"Include a list of query-related images in the response.\",\n            value=True,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"include_answer\",\n            display_name=\"Include Answer\",\n            info=\"Include a short answer to original query.\",\n            value=True,\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"fetch_content\"),\n        Output(display_name=\"Text\", name=\"text\", method=\"fetch_content_text\"),\n    ]\n\n    def fetch_content(self) -> list[Data]:\n        try:\n            url = \"https://api.tavily.com/search\"\n            headers = {\n                \"content-type\": \"application/json\",\n                \"accept\": \"application/json\",\n            }\n            payload = {\n                \"api_key\": self.api_key,\n                \"query\": self.query,\n                \"search_depth\": self.search_depth,\n                \"topic\": self.topic,\n                \"max_results\": self.max_results,\n                \"include_images\": self.include_images,\n                \"include_answer\": self.include_answer,\n            }\n\n            with httpx.Client() as client:\n                response = client.post(url, json=payload, headers=headers)\n\n            response.raise_for_status()\n            search_results = response.json()\n\n            data_results = []\n\n            if self.include_answer and search_results.get(\"answer\"):\n                data_results.append(Data(text=search_results[\"answer\"]))\n\n            for result in search_results.get(\"results\", []):\n                content = result.get(\"content\", \"\")\n                data_results.append(\n                    Data(\n                        text=content,\n                        data={\n                            \"title\": result.get(\"title\"),\n                            \"url\": result.get(\"url\"),\n                            \"content\": content,\n                            \"score\": result.get(\"score\"),\n                        },\n                    )\n                )\n\n            if self.include_images and search_results.get(\"images\"):\n                data_results.append(Data(text=\"Images found\", data={\"images\": search_results[\"images\"]}))\n        except httpx.HTTPStatusError as exc:\n            error_message = f\"HTTP error occurred: {exc.response.status_code} - {exc.response.text}\"\n            logger.error(error_message)\n            return [Data(text=error_message, data={\"error\": error_message})]\n        except httpx.RequestError as exc:\n            error_message = f\"Request error occurred: {exc}\"\n            logger.error(error_message)\n            return [Data(text=error_message, data={\"error\": error_message})]\n        except ValueError as exc:\n            error_message = f\"Invalid response format: {exc}\"\n            logger.error(error_message)\n            return [Data(text=error_message, data={\"error\": error_message})]\n        else:\n            self.status = data_results\n            return data_results\n\n    def fetch_content_text(self) -> Message:\n        data = self.fetch_content()\n        result_string = data_to_text(\"{text}\", data)\n        self.status = result_string\n        return Message(text=result_string)\n"
                                },
                                "include_answer": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Include Answer",
                                    "dynamic": false,
                                    "info": "Include a short answer to original query.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "include_answer",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "include_images": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Include Images",
                                    "dynamic": false,
                                    "info": "Include a list of query-related images in the response.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "include_images",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "max_results": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Max Results",
                                    "dynamic": false,
                                    "info": "The maximum number of search results to return.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "max_results",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 5
                                },
                                "query": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": false,
                                    "display_name": "Search Query",
                                    "dynamic": false,
                                    "info": "The search query you want to execute with Tavily.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "name": "query",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": true,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "search_depth": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Search Depth",
                                    "dynamic": false,
                                    "info": "The depth of the search.",
                                    "name": "search_depth",
                                    "options": [
                                        "basic",
                                        "advanced"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "advanced"
                                },
                                "tools_metadata": {
                                    "_input_type": "TableInput",
                                    "advanced": false,
                                    "display_name": "Edit tools",
                                    "dynamic": false,
                                    "info": "",
                                    "is_list": true,
                                    "list_add_label": "Add More",
                                    "name": "tools_metadata",
                                    "placeholder": "",
                                    "real_time_refresh": true,
                                    "required": false,
                                    "show": true,
                                    "table_icon": "Hammer",
                                    "table_options": {
                                        "block_add": true,
                                        "block_delete": true,
                                        "block_edit": true,
                                        "block_filter": true,
                                        "block_hide": true,
                                        "block_select": true,
                                        "block_sort": true,
                                        "description": "Modify tool names and descriptions to help agents understand when to use each tool.",
                                        "field_parsers": {
                                            "commands": "commands",
                                            "name": [
                                                "snake_case",
                                                "no_blank"
                                            ]
                                        },
                                        "hide_options": true
                                    },
                                    "table_schema": {
                                        "columns": [
                                            {
                                                "description": "Specify the name of the tool.",
                                                "disable_edit": false,
                                                "display_name": "Tool Name",
                                                "edit_mode": "inline",
                                                "filterable": false,
                                                "formatter": "text",
                                                "name": "name",
                                                "sortable": false,
                                                "type": "text"
                                            },
                                            {
                                                "description": "Describe the purpose of the tool.",
                                                "disable_edit": false,
                                                "display_name": "Tool Description",
                                                "edit_mode": "popover",
                                                "filterable": false,
                                                "formatter": "text",
                                                "name": "description",
                                                "sortable": false,
                                                "type": "text"
                                            },
                                            {
                                                "description": "The default identifiers for the tools and cannot be changed.",
                                                "disable_edit": true,
                                                "display_name": "Tool Identifiers",
                                                "edit_mode": "inline",
                                                "filterable": false,
                                                "formatter": "text",
                                                "name": "tags",
                                                "sortable": false,
                                                "type": "text"
                                            }
                                        ]
                                    },
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "trigger_icon": "Hammer",
                                    "trigger_text": "",
                                    "type": "table",
                                    "value": [
                                        {
                                            "description": "fetch_content(api_key: Message) - **Tavily AI** is a search engine optimized for LLMs and RAG,         aimed at efficient, quick, and persistent search results.",
                                            "name": "TavilySearchComponent-fetch_content",
                                            "tags": [
                                                "TavilySearchComponent-fetch_content"
                                            ]
                                        },
                                        {
                                            "description": "fetch_content_text(api_key: Message) - **Tavily AI** is a search engine optimized for LLMs and RAG,         aimed at efficient, quick, and persistent search results.",
                                            "name": "TavilySearchComponent-fetch_content_text",
                                            "tags": [
                                                "TavilySearchComponent-fetch_content_text"
                                            ]
                                        }
                                    ]
                                },
                                "topic": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Search Topic",
                                    "dynamic": false,
                                    "info": "The category of the search.",
                                    "name": "topic",
                                    "options": [
                                        "general",
                                        "news"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "general"
                                }
                            },
                            "tool_mode": true
                        },
                        "showNode": true,
                        "type": "TavilySearchComponent"
                    },
                    "dragging": false,
                    "id": "TavilySearchComponent-ChvwJ",
                    "measured": {
                        "height": 489,
                        "width": 360
                    },
                    "position": {
                        "x": 1802.928183797125,
                        "y": 368.90338283211725
                    },
                    "selected": false,
                    "type": "genericNode"
                },
                {
                    "data": {
                        "id": "OpenAIModel-FVlqP",
                        "node": {
                            "base_classes": [
                                "LanguageModel",
                                "Message"
                            ],
                            "beta": false,
                            "category": "models",
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Generates text using OpenAI LLMs.",
                            "display_name": "OpenAI",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "input_value",
                                "system_message",
                                "stream",
                                "max_tokens",
                                "model_kwargs",
                                "json_mode",
                                "model_name",
                                "openai_api_base",
                                "api_key",
                                "temperature",
                                "seed"
                            ],
                            "frozen": false,
                            "icon": "OpenAI",
                            "key": "OpenAIModel",
                            "legacy": false,
                            "metadata": {},
                            "minimized": false,
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "text_response",
                                    "name": "text_output",
                                    "required_inputs": [],
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                },
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Language Model",
                                    "method": "build_model",
                                    "name": "model_output",
                                    "required_inputs": [
                                        "api_key"
                                    ],
                                    "selected": "LanguageModel",
                                    "types": [
                                        "LanguageModel"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "score": 0.14285714285714285,
                            "template": {
                                "_type": "Component",
                                "api_key": {
                                    "_input_type": "SecretStrInput",
                                    "advanced": false,
                                    "display_name": "OpenAI API Key",
                                    "dynamic": false,
                                    "info": "The OpenAI API Key to use for the OpenAI model.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "load_from_db": true,
                                    "name": "api_key",
                                    "password": true,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": "OPENAI_API_KEY"
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.openai_constants import OPENAI_MODEL_NAMES\nfrom langflow.field_typing import LanguageModel\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.inputs import BoolInput, DictInput, DropdownInput, IntInput, SecretStrInput, SliderInput, StrInput\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIModel\"\n\n    inputs = [\n        *LCModelComponent._base_inputs,\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            range_spec=RangeSpec(min=0, max=128000),\n        ),\n        DictInput(\n            name=\"model_kwargs\",\n            display_name=\"Model Kwargs\",\n            advanced=True,\n            info=\"Additional keyword arguments to pass to the model.\",\n        ),\n        BoolInput(\n            name=\"json_mode\",\n            display_name=\"JSON Mode\",\n            advanced=True,\n            info=\"If True, it will output JSON regardless of passing a schema.\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            advanced=False,\n            options=OPENAI_MODEL_NAMES,\n            value=OPENAI_MODEL_NAMES[0],\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. \"\n            \"Defaults to https://api.openai.com/v1. \"\n            \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n            required=True,\n        ),\n        SliderInput(\n            name=\"temperature\", display_name=\"Temperature\", value=0.1, range_spec=RangeSpec(min=0, max=2, step=0.01)\n        ),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        openai_api_key = self.api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\n        json_mode = self.json_mode\n        seed = self.seed\n\n        api_key = SecretStr(openai_api_key).get_secret_value() if openai_api_key else None\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature if temperature is not None else 0.1,\n            seed=seed,\n        )\n        if json_mode:\n            output = output.bind(response_format={\"type\": \"json_object\"})\n\n        return output\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"Get a message from an OpenAI exception.\n\n        Args:\n            e (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return None\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")\n            if message:\n                return message\n        return None\n"
                                },
                                "input_value": {
                                    "_input_type": "MessageInput",
                                    "advanced": false,
                                    "display_name": "Input",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "json_mode": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "JSON Mode",
                                    "dynamic": false,
                                    "info": "If True, it will output JSON regardless of passing a schema.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "json_mode",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "max_tokens": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Max Tokens",
                                    "dynamic": false,
                                    "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "max_tokens",
                                    "placeholder": "",
                                    "range_spec": {
                                        "max": 128000,
                                        "min": 0,
                                        "step": 0.1,
                                        "step_type": "float"
                                    },
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": ""
                                },
                                "model_kwargs": {
                                    "_input_type": "DictInput",
                                    "advanced": true,
                                    "display_name": "Model Kwargs",
                                    "dynamic": false,
                                    "info": "Additional keyword arguments to pass to the model.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "model_kwargs",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "type": "dict",
                                    "value": {}
                                },
                                "model_name": {
                                    "_input_type": "DropdownInput",
                                    "advanced": false,
                                    "combobox": false,
                                    "dialog_inputs": {},
                                    "display_name": "Model Name",
                                    "dynamic": false,
                                    "info": "",
                                    "name": "model_name",
                                    "options": [
                                        "gpt-4o-mini",
                                        "gpt-4o",
                                        "gpt-4-turbo",
                                        "gpt-4-turbo-preview",
                                        "gpt-4",
                                        "gpt-3.5-turbo",
                                        "gpt-3.5-turbo-0125"
                                    ],
                                    "options_metadata": [],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "gpt-4o-mini"
                                },
                                "openai_api_base": {
                                    "_input_type": "StrInput",
                                    "advanced": true,
                                    "display_name": "OpenAI API Base",
                                    "dynamic": false,
                                    "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "name": "openai_api_base",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "seed": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Seed",
                                    "dynamic": false,
                                    "info": "The seed controls the reproducibility of the job.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "seed",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 1
                                },
                                "stream": {
                                    "_input_type": "BoolInput",
                                    "advanced": false,
                                    "display_name": "Stream",
                                    "dynamic": false,
                                    "info": "Stream the response from the model. Streaming works only in Chat.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "stream",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "system_message": {
                                    "_input_type": "MultilineInput",
                                    "advanced": false,
                                    "display_name": "System Message",
                                    "dynamic": false,
                                    "info": "System message to pass to the model.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "system_message",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "temperature": {
                                    "_input_type": "SliderInput",
                                    "advanced": false,
                                    "display_name": "Temperature",
                                    "dynamic": false,
                                    "info": "",
                                    "max_label": "",
                                    "max_label_icon": "",
                                    "min_label": "",
                                    "min_label_icon": "",
                                    "name": "temperature",
                                    "placeholder": "",
                                    "range_spec": {
                                        "max": 2,
                                        "min": 0,
                                        "step": 0.01,
                                        "step_type": "float"
                                    },
                                    "required": false,
                                    "show": true,
                                    "slider_buttons": false,
                                    "slider_buttons_options": [],
                                    "slider_input": false,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "type": "slider",
                                    "value": 0.1
                                }
                            },
                            "tool_mode": false
                        },
                        "showNode": true,
                        "type": "OpenAIModel"
                    },
                    "dragging": false,
                    "id": "OpenAIModel-FVlqP",
                    "measured": {
                        "height": 734,
                        "width": 360
                    },
                    "position": {
                        "x": 1455.1912046212385,
                        "y": 487.41889689444065
                    },
                    "selected": false,
                    "type": "genericNode"
                },
                {
                    "data": {
                        "id": "OpenAIModel-MhnGV",
                        "node": {
                            "base_classes": [
                                "LanguageModel",
                                "Message"
                            ],
                            "beta": false,
                            "category": "models",
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Generates text using OpenAI LLMs.",
                            "display_name": "OpenAI",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "input_value",
                                "system_message",
                                "stream",
                                "max_tokens",
                                "model_kwargs",
                                "json_mode",
                                "model_name",
                                "openai_api_base",
                                "api_key",
                                "temperature",
                                "seed"
                            ],
                            "frozen": false,
                            "icon": "OpenAI",
                            "key": "OpenAIModel",
                            "legacy": false,
                            "metadata": {},
                            "minimized": false,
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "text_response",
                                    "name": "text_output",
                                    "required_inputs": [],
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                },
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Language Model",
                                    "method": "build_model",
                                    "name": "model_output",
                                    "required_inputs": [
                                        "api_key"
                                    ],
                                    "selected": "LanguageModel",
                                    "types": [
                                        "LanguageModel"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "score": 0.14285714285714285,
                            "template": {
                                "_type": "Component",
                                "api_key": {
                                    "_input_type": "SecretStrInput",
                                    "advanced": false,
                                    "display_name": "OpenAI API Key",
                                    "dynamic": false,
                                    "info": "The OpenAI API Key to use for the OpenAI model.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "load_from_db": true,
                                    "name": "api_key",
                                    "password": true,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": "OPENAI_API_KEY"
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.openai_constants import OPENAI_MODEL_NAMES\nfrom langflow.field_typing import LanguageModel\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.inputs import BoolInput, DictInput, DropdownInput, IntInput, SecretStrInput, SliderInput, StrInput\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIModel\"\n\n    inputs = [\n        *LCModelComponent._base_inputs,\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            range_spec=RangeSpec(min=0, max=128000),\n        ),\n        DictInput(\n            name=\"model_kwargs\",\n            display_name=\"Model Kwargs\",\n            advanced=True,\n            info=\"Additional keyword arguments to pass to the model.\",\n        ),\n        BoolInput(\n            name=\"json_mode\",\n            display_name=\"JSON Mode\",\n            advanced=True,\n            info=\"If True, it will output JSON regardless of passing a schema.\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            advanced=False,\n            options=OPENAI_MODEL_NAMES,\n            value=OPENAI_MODEL_NAMES[0],\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. \"\n            \"Defaults to https://api.openai.com/v1. \"\n            \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n            required=True,\n        ),\n        SliderInput(\n            name=\"temperature\", display_name=\"Temperature\", value=0.1, range_spec=RangeSpec(min=0, max=2, step=0.01)\n        ),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        openai_api_key = self.api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\n        json_mode = self.json_mode\n        seed = self.seed\n\n        api_key = SecretStr(openai_api_key).get_secret_value() if openai_api_key else None\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature if temperature is not None else 0.1,\n            seed=seed,\n        )\n        if json_mode:\n            output = output.bind(response_format={\"type\": \"json_object\"})\n\n        return output\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"Get a message from an OpenAI exception.\n\n        Args:\n            e (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return None\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")\n            if message:\n                return message\n        return None\n"
                                },
                                "input_value": {
                                    "_input_type": "MessageInput",
                                    "advanced": false,
                                    "display_name": "Input",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "json_mode": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "JSON Mode",
                                    "dynamic": false,
                                    "info": "If True, it will output JSON regardless of passing a schema.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "json_mode",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "max_tokens": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Max Tokens",
                                    "dynamic": false,
                                    "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "max_tokens",
                                    "placeholder": "",
                                    "range_spec": {
                                        "max": 128000,
                                        "min": 0,
                                        "step": 0.1,
                                        "step_type": "float"
                                    },
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": ""
                                },
                                "model_kwargs": {
                                    "_input_type": "DictInput",
                                    "advanced": true,
                                    "display_name": "Model Kwargs",
                                    "dynamic": false,
                                    "info": "Additional keyword arguments to pass to the model.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "model_kwargs",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "type": "dict",
                                    "value": {}
                                },
                                "model_name": {
                                    "_input_type": "DropdownInput",
                                    "advanced": false,
                                    "combobox": false,
                                    "dialog_inputs": {},
                                    "display_name": "Model Name",
                                    "dynamic": false,
                                    "info": "",
                                    "name": "model_name",
                                    "options": [
                                        "gpt-4o-mini",
                                        "gpt-4o",
                                        "gpt-4-turbo",
                                        "gpt-4-turbo-preview",
                                        "gpt-4",
                                        "gpt-3.5-turbo",
                                        "gpt-3.5-turbo-0125"
                                    ],
                                    "options_metadata": [],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "gpt-4o-mini"
                                },
                                "openai_api_base": {
                                    "_input_type": "StrInput",
                                    "advanced": true,
                                    "display_name": "OpenAI API Base",
                                    "dynamic": false,
                                    "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "name": "openai_api_base",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "seed": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Seed",
                                    "dynamic": false,
                                    "info": "The seed controls the reproducibility of the job.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "seed",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 1
                                },
                                "stream": {
                                    "_input_type": "BoolInput",
                                    "advanced": false,
                                    "display_name": "Stream",
                                    "dynamic": false,
                                    "info": "Stream the response from the model. Streaming works only in Chat.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "stream",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "system_message": {
                                    "_input_type": "MultilineInput",
                                    "advanced": false,
                                    "display_name": "System Message",
                                    "dynamic": false,
                                    "info": "System message to pass to the model.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "system_message",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "temperature": {
                                    "_input_type": "SliderInput",
                                    "advanced": false,
                                    "display_name": "Temperature",
                                    "dynamic": false,
                                    "info": "",
                                    "max_label": "",
                                    "max_label_icon": "",
                                    "min_label": "",
                                    "min_label_icon": "",
                                    "name": "temperature",
                                    "placeholder": "",
                                    "range_spec": {
                                        "max": 2,
                                        "min": 0,
                                        "step": 0.01,
                                        "step_type": "float"
                                    },
                                    "required": false,
                                    "show": true,
                                    "slider_buttons": false,
                                    "slider_buttons_options": [],
                                    "slider_input": false,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "type": "slider",
                                    "value": 0.1
                                }
                            },
                            "tool_mode": false
                        },
                        "showNode": true,
                        "type": "OpenAIModel"
                    },
                    "dragging": false,
                    "id": "OpenAIModel-MhnGV",
                    "measured": {
                        "height": 734,
                        "width": 360
                    },
                    "position": {
                        "x": 2869.8759720421745,
                        "y": 463.310915040386
                    },
                    "selected": false,
                    "type": "genericNode"
                }
            ],
            "viewport": {
                "x": -1483.015971938532,
                "y": -267.7229964456226,
                "zoom": 0.7779614946685405
            }
        },
        "is_component": false,
        "updated_at": "2025-01-25T04:58:25+00:00",
        "webhook": false,
        "endpoint_name": null,
        "tags": [
            "assistants",
            "agents"
        ],
        "locked": false,
        "id": "45ac21ef-1f50-40ee-b978-0ccb34af45cb",
        "user_id": null,
        "folder_id": "c54584e6-88eb-4ac0-b70c-68aee37fdce2"
    },
    {
        "name": "Prompt Chaining",
        "description": "Connect multiple prompts in sequence where each output becomes the next stage's input, enabling step-by-step text processing.",
        "icon": "Link",
        "icon_bg_color": null,
        "gradient": "0",
        "data": {
            "edges": [
                {
                    "data": {
                        "sourceHandle": {
                            "dataType": "Prompt",
                            "id": "Prompt-PG8Vd",
                            "name": "prompt",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "system_message",
                            "id": "OpenAIModel-3VRcc",
                            "inputTypes": [
                                "Message"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "xy-edge__Prompt-PG8Vd{\u0153dataType\u0153:\u0153Prompt\u0153,\u0153id\u0153:\u0153Prompt-PG8Vd\u0153,\u0153name\u0153:\u0153prompt\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-OpenAIModel-3VRcc{\u0153fieldName\u0153:\u0153system_message\u0153,\u0153id\u0153:\u0153OpenAIModel-3VRcc\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "Prompt-PG8Vd",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153Prompt\u0153, \u0153id\u0153: \u0153Prompt-PG8Vd\u0153, \u0153name\u0153: \u0153prompt\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "OpenAIModel-3VRcc",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153system_message\u0153, \u0153id\u0153: \u0153OpenAIModel-3VRcc\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "data": {
                        "sourceHandle": {
                            "dataType": "ChatInput",
                            "id": "ChatInput-nB59E",
                            "name": "message",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "input_value",
                            "id": "OpenAIModel-3VRcc",
                            "inputTypes": [
                                "Message"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "xy-edge__ChatInput-nB59E{\u0153dataType\u0153:\u0153ChatInput\u0153,\u0153id\u0153:\u0153ChatInput-nB59E\u0153,\u0153name\u0153:\u0153message\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-OpenAIModel-3VRcc{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153OpenAIModel-3VRcc\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "ChatInput-nB59E",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153ChatInput\u0153, \u0153id\u0153: \u0153ChatInput-nB59E\u0153, \u0153name\u0153: \u0153message\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "OpenAIModel-3VRcc",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153input_value\u0153, \u0153id\u0153: \u0153OpenAIModel-3VRcc\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "data": {
                        "sourceHandle": {
                            "dataType": "OpenAIModel",
                            "id": "OpenAIModel-3VRcc",
                            "name": "text_output",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "input_value",
                            "id": "OpenAIModel-01mE2",
                            "inputTypes": [
                                "Message"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "xy-edge__OpenAIModel-3VRcc{\u0153dataType\u0153:\u0153OpenAIModel\u0153,\u0153id\u0153:\u0153OpenAIModel-3VRcc\u0153,\u0153name\u0153:\u0153text_output\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-OpenAIModel-01mE2{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153OpenAIModel-01mE2\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "OpenAIModel-3VRcc",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153OpenAIModel\u0153, \u0153id\u0153: \u0153OpenAIModel-3VRcc\u0153, \u0153name\u0153: \u0153text_output\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "OpenAIModel-01mE2",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153input_value\u0153, \u0153id\u0153: \u0153OpenAIModel-01mE2\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "data": {
                        "sourceHandle": {
                            "dataType": "Prompt",
                            "id": "Prompt-aDWJD",
                            "name": "prompt",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "system_message",
                            "id": "OpenAIModel-01mE2",
                            "inputTypes": [
                                "Message"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "xy-edge__Prompt-aDWJD{\u0153dataType\u0153:\u0153Prompt\u0153,\u0153id\u0153:\u0153Prompt-aDWJD\u0153,\u0153name\u0153:\u0153prompt\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-OpenAIModel-01mE2{\u0153fieldName\u0153:\u0153system_message\u0153,\u0153id\u0153:\u0153OpenAIModel-01mE2\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "Prompt-aDWJD",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153Prompt\u0153, \u0153id\u0153: \u0153Prompt-aDWJD\u0153, \u0153name\u0153: \u0153prompt\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "OpenAIModel-01mE2",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153system_message\u0153, \u0153id\u0153: \u0153OpenAIModel-01mE2\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "data": {
                        "sourceHandle": {
                            "dataType": "OpenAIModel",
                            "id": "OpenAIModel-01mE2",
                            "name": "text_output",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "input_value",
                            "id": "OpenAIModel-4DgWt",
                            "inputTypes": [
                                "Message"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "xy-edge__OpenAIModel-01mE2{\u0153dataType\u0153:\u0153OpenAIModel\u0153,\u0153id\u0153:\u0153OpenAIModel-01mE2\u0153,\u0153name\u0153:\u0153text_output\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-OpenAIModel-4DgWt{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153OpenAIModel-4DgWt\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "OpenAIModel-01mE2",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153OpenAIModel\u0153, \u0153id\u0153: \u0153OpenAIModel-01mE2\u0153, \u0153name\u0153: \u0153text_output\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "OpenAIModel-4DgWt",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153input_value\u0153, \u0153id\u0153: \u0153OpenAIModel-4DgWt\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "data": {
                        "sourceHandle": {
                            "dataType": "Prompt",
                            "id": "Prompt-fv4MA",
                            "name": "prompt",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "system_message",
                            "id": "OpenAIModel-4DgWt",
                            "inputTypes": [
                                "Message"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "xy-edge__Prompt-fv4MA{\u0153dataType\u0153:\u0153Prompt\u0153,\u0153id\u0153:\u0153Prompt-fv4MA\u0153,\u0153name\u0153:\u0153prompt\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-OpenAIModel-4DgWt{\u0153fieldName\u0153:\u0153system_message\u0153,\u0153id\u0153:\u0153OpenAIModel-4DgWt\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "Prompt-fv4MA",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153Prompt\u0153, \u0153id\u0153: \u0153Prompt-fv4MA\u0153, \u0153name\u0153: \u0153prompt\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "OpenAIModel-4DgWt",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153system_message\u0153, \u0153id\u0153: \u0153OpenAIModel-4DgWt\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "data": {
                        "sourceHandle": {
                            "dataType": "OpenAIModel",
                            "id": "OpenAIModel-4DgWt",
                            "name": "text_output",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "input_value",
                            "id": "ChatOutput-PE0wW",
                            "inputTypes": [
                                "Message"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "xy-edge__OpenAIModel-4DgWt{\u0153dataType\u0153:\u0153OpenAIModel\u0153,\u0153id\u0153:\u0153OpenAIModel-4DgWt\u0153,\u0153name\u0153:\u0153text_output\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-ChatOutput-PE0wW{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153ChatOutput-PE0wW\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "OpenAIModel-4DgWt",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153OpenAIModel\u0153, \u0153id\u0153: \u0153OpenAIModel-4DgWt\u0153, \u0153name\u0153: \u0153text_output\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "ChatOutput-PE0wW",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153input_value\u0153, \u0153id\u0153: \u0153ChatOutput-PE0wW\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153], \u0153type\u0153: \u0153str\u0153}"
                }
            ],
            "nodes": [
                {
                    "data": {
                        "description": "Create a prompt template with dynamic variables.",
                        "display_name": "Prompt",
                        "id": "Prompt-aDWJD",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {
                                "template": []
                            },
                            "description": "Create a prompt template with dynamic variables.",
                            "display_name": "Prompt",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "template"
                            ],
                            "frozen": false,
                            "icon": "prompts",
                            "legacy": false,
                            "lf_version": "1.0.19.post2",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Prompt Message",
                                    "method": "build_prompt",
                                    "name": "prompt",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import MessageTextInput, Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            tool_mode=True,\n            advanced=True,\n            info=\"A placeholder input for tool mode.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    async def update_frontend_node(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = await super().update_frontend_node(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n"
                                },
                                "template": {
                                    "_input_type": "PromptInput",
                                    "advanced": false,
                                    "display_name": "Template",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "template",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "type": "prompt",
                                    "value": "You are a seasoned business analyst with a strong background in tech product development and market research. Your analytical skills are unparalleled, allowing you to dissect product concepts and evaluate their market viability with precision. You have a keen eye for identifying potential challenges and opportunities that others might overlook. Your insights have been crucial in shaping successful product strategies for numerous tech companies.\n\nYour task is to:\n\n1. Evaluate the concept in terms of market potential and technical feasibility\n2. Identify two potential challenges for developing this product\n3. Suggest one improvement or expansion to the concept\n\n\nPlease structure your response as follows:\n\nConcept Evaluation:\n[concept_evaluation]\n\nPotential Challenges:\n1. [challenge_1]\n2. [challenge_2]\n...\n\nImprovement Suggestion:\n[improvement_suggestion]\n\nProvide an objective and well-founded analysis, considering market and technological factors in your evaluation.\n"
                                },
                                "tool_placeholder": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Tool Placeholder",
                                    "dynamic": false,
                                    "info": "A placeholder input for tool mode.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "tool_placeholder",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": true,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "Prompt"
                    },
                    "dragging": false,
                    "height": 260,
                    "id": "Prompt-aDWJD",
                    "measured": {
                        "height": 260,
                        "width": 360
                    },
                    "position": {
                        "x": 1921.9168573384,
                        "y": 1162.4082184281983
                    },
                    "positionAbsolute": {
                        "x": 1921.9168573384,
                        "y": 1162.4082184281983
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "id": "ChatInput-nB59E",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "category": "inputs",
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Get chat inputs from the Playground.",
                            "display_name": "Chat Input",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "input_value",
                                "should_store_message",
                                "sender",
                                "sender_name",
                                "session_id",
                                "files",
                                "background_color",
                                "chat_icon",
                                "text_color"
                            ],
                            "frozen": false,
                            "icon": "MessagesSquare",
                            "key": "ChatInput",
                            "legacy": false,
                            "lf_version": "1.0.19.post2",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "message_response",
                                    "name": "message",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "background_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Background Color",
                                    "dynamic": false,
                                    "info": "The background color of the icon.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "background_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "chat_icon": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Icon",
                                    "dynamic": false,
                                    "info": "The icon of the message.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "chat_icon",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import (\n    DropdownInput,\n    FileInput,\n    MessageTextInput,\n    MultilineInput,\n    Output,\n)\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_USER,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatInput\"\n    minimized = True\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n            input_types=[],\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    async def message_response(self) -> Message:\n        background_color = self.background_color\n        text_color = self.text_color\n        icon = self.chat_icon\n\n        message = await Message.create(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n            properties={\n                \"background_color\": background_color,\n                \"text_color\": text_color,\n                \"icon\": icon,\n            },\n        )\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n"
                                },
                                "files": {
                                    "_input_type": "FileInput",
                                    "advanced": true,
                                    "display_name": "Files",
                                    "dynamic": false,
                                    "fileTypes": [
                                        "txt",
                                        "md",
                                        "mdx",
                                        "csv",
                                        "json",
                                        "yaml",
                                        "yml",
                                        "xml",
                                        "html",
                                        "htm",
                                        "pdf",
                                        "docx",
                                        "py",
                                        "sh",
                                        "sql",
                                        "js",
                                        "ts",
                                        "tsx",
                                        "jpg",
                                        "jpeg",
                                        "png",
                                        "bmp",
                                        "image"
                                    ],
                                    "file_path": "",
                                    "info": "Files to be sent with the message.",
                                    "list": true,
                                    "name": "files",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "file",
                                    "value": ""
                                },
                                "input_value": {
                                    "_input_type": "MultilineInput",
                                    "advanced": false,
                                    "display_name": "Text",
                                    "dynamic": false,
                                    "info": "Message to be passed as input.",
                                    "input_types": [],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "The growing demand for personalized, AI-driven mental health support tools that can provide real-time interventions and track long-term emotional well-being."
                                },
                                "sender": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Sender Type",
                                    "dynamic": false,
                                    "info": "Type of sender.",
                                    "name": "sender",
                                    "options": [
                                        "Machine",
                                        "User"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "User"
                                },
                                "sender_name": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Sender Name",
                                    "dynamic": false,
                                    "info": "Name of the sender.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "sender_name",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "User"
                                },
                                "session_id": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Session ID",
                                    "dynamic": false,
                                    "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "session_id",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "should_store_message": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Store Messages",
                                    "dynamic": false,
                                    "info": "Store the message in the history.",
                                    "list": false,
                                    "name": "should_store_message",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "text_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Text Color",
                                    "dynamic": false,
                                    "info": "The text color of the name",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "text_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                }
                            }
                        },
                        "type": "ChatInput"
                    },
                    "dragging": false,
                    "height": 234,
                    "id": "ChatInput-nB59E",
                    "measured": {
                        "height": 234,
                        "width": 360
                    },
                    "position": {
                        "x": 1178.0239685549568,
                        "y": 879.9087836229152
                    },
                    "positionAbsolute": {
                        "x": 1178.0239685549568,
                        "y": 879.9087836229152
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "description": "Display a chat message in the Playground.",
                        "display_name": "Chat Output",
                        "id": "ChatOutput-PE0wW",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Display a chat message in the Playground.",
                            "display_name": "Chat Output",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "input_value",
                                "should_store_message",
                                "sender",
                                "sender_name",
                                "session_id",
                                "data_template",
                                "background_color",
                                "chat_icon",
                                "text_color"
                            ],
                            "frozen": false,
                            "icon": "MessagesSquare",
                            "legacy": false,
                            "lf_version": "1.0.19.post2",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "message_response",
                                    "name": "message",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "background_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Background Color",
                                    "dynamic": false,
                                    "info": "The background color of the icon.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "background_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "chat_icon": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Icon",
                                    "dynamic": false,
                                    "info": "The icon of the message.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "chat_icon",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, MessageInput, MessageTextInput, Output\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        MessageInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            source_dict[\"source\"] = source\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n        background_color = self.background_color\n        text_color = self.text_color\n        if self.chat_icon:\n            icon = self.chat_icon\n        message = self.input_value if isinstance(self.input_value, Message) else Message(text=self.input_value)\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n        message.properties.icon = icon\n        message.properties.background_color = background_color\n        message.properties.text_color = text_color\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n"
                                },
                                "data_template": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Data Template",
                                    "dynamic": false,
                                    "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "data_template",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "{text}"
                                },
                                "input_value": {
                                    "_input_type": "MessageInput",
                                    "advanced": false,
                                    "display_name": "Text",
                                    "dynamic": false,
                                    "info": "Message to be passed as output.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "sender": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Sender Type",
                                    "dynamic": false,
                                    "info": "Type of sender.",
                                    "name": "sender",
                                    "options": [
                                        "Machine",
                                        "User"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Machine"
                                },
                                "sender_name": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Sender Name",
                                    "dynamic": false,
                                    "info": "Name of the sender.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "sender_name",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "AI"
                                },
                                "session_id": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Session ID",
                                    "dynamic": false,
                                    "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "session_id",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "should_store_message": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Store Messages",
                                    "dynamic": false,
                                    "info": "Store the message in the history.",
                                    "list": false,
                                    "name": "should_store_message",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "text_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Text Color",
                                    "dynamic": false,
                                    "info": "The text color of the name",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "text_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "ChatOutput"
                    },
                    "dragging": false,
                    "height": 234,
                    "id": "ChatOutput-PE0wW",
                    "measured": {
                        "height": 234,
                        "width": 360
                    },
                    "position": {
                        "x": 3389.8335347035913,
                        "y": 1185.8259442119552
                    },
                    "positionAbsolute": {
                        "x": 3363.868906129255,
                        "y": 1189.5351768654318
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "description": "Create a prompt template with dynamic variables.",
                        "display_name": "Prompt",
                        "id": "Prompt-fv4MA",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {
                                "template": []
                            },
                            "description": "Create a prompt template with dynamic variables.",
                            "display_name": "Prompt",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "template"
                            ],
                            "frozen": false,
                            "icon": "prompts",
                            "legacy": false,
                            "lf_version": "1.0.19.post2",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Prompt Message",
                                    "method": "build_prompt",
                                    "name": "prompt",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import MessageTextInput, Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            tool_mode=True,\n            advanced=True,\n            info=\"A placeholder input for tool mode.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    async def update_frontend_node(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = await super().update_frontend_node(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n"
                                },
                                "template": {
                                    "_input_type": "PromptInput",
                                    "advanced": false,
                                    "display_name": "Template",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "template",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "type": "prompt",
                                    "value": "You are an accomplished product manager with a track record of bringing innovative tech products from concept to market. Your strategic thinking and ability to balance technical feasibility with market demands have resulted in several successful product launches. You excel at distilling complex ideas into clear, actionable plans and have a talent for identifying the most critical features that will drive product adoption and success.\n\nBased on the analysis of the innovative product, create a simplified development plan that includes:\n\n1. Product overview (1-2 sentences)\n2. Three main features to be developed\n3. A basic market launch strategy\n\n\nPlease structure your plan as follows:\n\nProduct Overview:\n[product_overview]\n\nMain Features:\n1. [feature_1]\n2. [feature_2]\n3. [feature_3]\n...\n\nLaunch Strategy:\n[launch_strategy]\n\nYour plan should be concise, realistic, and aligned with the information provided in the previous steps.\n"
                                },
                                "tool_placeholder": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Tool Placeholder",
                                    "dynamic": false,
                                    "info": "A placeholder input for tool mode.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "tool_placeholder",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": true,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "Prompt"
                    },
                    "dragging": false,
                    "height": 260,
                    "id": "Prompt-fv4MA",
                    "measured": {
                        "height": 260,
                        "width": 360
                    },
                    "position": {
                        "x": 2647.8305106628454,
                        "y": 1161.2328062686402
                    },
                    "positionAbsolute": {
                        "x": 2647.8305106628454,
                        "y": 1161.2328062686402
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "description": "Create a prompt template with dynamic variables.",
                        "display_name": "Prompt",
                        "id": "Prompt-PG8Vd",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {
                                "template": []
                            },
                            "description": "Create a prompt template with dynamic variables.",
                            "display_name": "Prompt",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "template"
                            ],
                            "frozen": false,
                            "icon": "prompts",
                            "legacy": false,
                            "lf_version": "1.0.19.post2",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Prompt Message",
                                    "method": "build_prompt",
                                    "name": "prompt",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import MessageTextInput, Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            tool_mode=True,\n            advanced=True,\n            info=\"A placeholder input for tool mode.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    async def update_frontend_node(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = await super().update_frontend_node(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n"
                                },
                                "template": {
                                    "_input_type": "PromptInput",
                                    "advanced": false,
                                    "display_name": "Template",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "template",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "type": "prompt",
                                    "value": "You are a visionary product innovator at a cutting-edge tech startup. Your expertise lies in identifying emerging market trends and translating them into groundbreaking product concepts. Your creative thinking and deep understanding of technology allow you to envision products that not only meet current needs but also anticipate future demands. Your ideas often challenge conventional thinking and push the boundaries of what's possible with current technology.\n\nPlease create a product concept, providing:\n\n1. Product name\n2. Brief description (2-3 sentences)\n3. Main innovative feature\n4. Target audience\n\nStructure your response like this:\n\nProduct Name: [product_name]\n\nDescription: [product_description]\n\nMain Innovation: [main_innovation]\n\nTarget Audience: [target_audience]\n\nBe creative and bold in your idea, but keep it realistic and aligned with the provided market trend."
                                },
                                "tool_placeholder": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Tool Placeholder",
                                    "dynamic": false,
                                    "info": "A placeholder input for tool mode.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "tool_placeholder",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": true,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "Prompt"
                    },
                    "dragging": false,
                    "height": 260,
                    "id": "Prompt-PG8Vd",
                    "measured": {
                        "height": 260,
                        "width": 360
                    },
                    "position": {
                        "x": 1178.7099500302636,
                        "y": 1167.8586867404465
                    },
                    "positionAbsolute": {
                        "x": 1178.7099500302636,
                        "y": 1167.8586867404465
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "id": "note-rGShm",
                        "node": {
                            "description": "### Input Examples\n1.\n    \"The growing demand for personalized, AI-driven mental health support tools that can provide real-time interventions and track long-term emotional well-being.\"\n\n\n2. \n    \"The increasing need for secure and user-friendly decentralized finance (DeFi) platforms that make cryptocurrency investments accessible to non-tech-savvy users.\"\n \n\n3. \n    \"The rising popularity of immersive, augmented reality (AR) experiences for remote collaboration and virtual team-building in distributed workforces.\"\n\n\n4. \n    \"The expanding market for smart, IoT-enabled urban farming solutions that allow city dwellers to grow their own food efficiently in small spaces.\"\n\n\n5. \n    \"The emerging demand for AI-powered personal styling and shopping assistants that consider sustainability, body positivity, and individual style preferences.\"\n\n",
                            "display_name": "",
                            "documentation": "",
                            "template": {
                                "backgroundColor": "emerald"
                            }
                        },
                        "type": "note"
                    },
                    "dragging": false,
                    "height": 430,
                    "id": "note-rGShm",
                    "measured": {
                        "height": 430,
                        "width": 328
                    },
                    "position": {
                        "x": 528.0392006831054,
                        "y": 973.781986567496
                    },
                    "positionAbsolute": {
                        "x": 528.0392006831054,
                        "y": 973.781986567496
                    },
                    "resizing": false,
                    "selected": false,
                    "style": {
                        "height": 430,
                        "width": 600
                    },
                    "type": "noteNode",
                    "width": 600
                },
                {
                    "data": {
                        "id": "note-ECxh2",
                        "node": {
                            "description": "### Prompt Chaining\n\nThis flow demonstrates fundamental prompt chaining principles:\n\n1. **Chain Structure**\n   \u2022 User input \u2192 First Prompt \u2192 LLM\n   \u2022 First output \u2192 Second Prompt \u2192 LLM\n   \u2022 Second output \u2192 Final Prompt \u2192 LLM\n   \u2022 Final output\n\n2. **Key Technique Elements**\n   \u2022 Each prompt is specifically designed to process previous output\n   \u2022 Output formatting ensures clean handoff between stages\n   \u2022 Context flows naturally through the chain\n   \u2022 Each LLM call builds upon previous results\n\n3. **Technical Implementation**\n   \u2022 Multiple prompt templates working in sequence\n   \u2022 Strategic input/output connections\n   \u2022 Consistent message handling between stages\n   \u2022 Progressive refinement through the chain\n\nThis pattern can be adapted for any use case by modifying the prompt templates while keeping the same chaining structure.",
                            "display_name": "",
                            "documentation": "",
                            "template": {
                                "backgroundColor": "blue"
                            }
                        },
                        "type": "note"
                    },
                    "dragging": false,
                    "height": 451,
                    "id": "note-ECxh2",
                    "measured": {
                        "height": 451,
                        "width": 328
                    },
                    "position": {
                        "x": 892.4280059782889,
                        "y": 406.2411111617474
                    },
                    "positionAbsolute": {
                        "x": 892.4280059782889,
                        "y": 406.2411111617474
                    },
                    "resizing": false,
                    "selected": false,
                    "style": {
                        "height": 451,
                        "width": 600
                    },
                    "type": "noteNode",
                    "width": 600
                },
                {
                    "data": {
                        "id": "OpenAIModel-3VRcc",
                        "node": {
                            "base_classes": [
                                "LanguageModel",
                                "Message"
                            ],
                            "beta": false,
                            "category": "models",
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Generates text using OpenAI LLMs.",
                            "display_name": "OpenAI",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "input_value",
                                "system_message",
                                "stream",
                                "max_tokens",
                                "model_kwargs",
                                "json_mode",
                                "model_name",
                                "openai_api_base",
                                "api_key",
                                "temperature",
                                "seed"
                            ],
                            "frozen": false,
                            "icon": "OpenAI",
                            "key": "OpenAIModel",
                            "legacy": false,
                            "metadata": {},
                            "minimized": false,
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "text_response",
                                    "name": "text_output",
                                    "required_inputs": [],
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                },
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Language Model",
                                    "method": "build_model",
                                    "name": "model_output",
                                    "required_inputs": [
                                        "api_key"
                                    ],
                                    "selected": "LanguageModel",
                                    "types": [
                                        "LanguageModel"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "score": 0.14285714285714285,
                            "template": {
                                "_type": "Component",
                                "api_key": {
                                    "_input_type": "SecretStrInput",
                                    "advanced": false,
                                    "display_name": "OpenAI API Key",
                                    "dynamic": false,
                                    "info": "The OpenAI API Key to use for the OpenAI model.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "load_from_db": true,
                                    "name": "api_key",
                                    "password": true,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": "OPENAI_API_KEY"
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.openai_constants import OPENAI_MODEL_NAMES\nfrom langflow.field_typing import LanguageModel\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.inputs import BoolInput, DictInput, DropdownInput, IntInput, SecretStrInput, SliderInput, StrInput\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIModel\"\n\n    inputs = [\n        *LCModelComponent._base_inputs,\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            range_spec=RangeSpec(min=0, max=128000),\n        ),\n        DictInput(\n            name=\"model_kwargs\",\n            display_name=\"Model Kwargs\",\n            advanced=True,\n            info=\"Additional keyword arguments to pass to the model.\",\n        ),\n        BoolInput(\n            name=\"json_mode\",\n            display_name=\"JSON Mode\",\n            advanced=True,\n            info=\"If True, it will output JSON regardless of passing a schema.\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            advanced=False,\n            options=OPENAI_MODEL_NAMES,\n            value=OPENAI_MODEL_NAMES[0],\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. \"\n            \"Defaults to https://api.openai.com/v1. \"\n            \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n            required=True,\n        ),\n        SliderInput(\n            name=\"temperature\", display_name=\"Temperature\", value=0.1, range_spec=RangeSpec(min=0, max=2, step=0.01)\n        ),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        openai_api_key = self.api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\n        json_mode = self.json_mode\n        seed = self.seed\n\n        api_key = SecretStr(openai_api_key).get_secret_value() if openai_api_key else None\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature if temperature is not None else 0.1,\n            seed=seed,\n        )\n        if json_mode:\n            output = output.bind(response_format={\"type\": \"json_object\"})\n\n        return output\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"Get a message from an OpenAI exception.\n\n        Args:\n            e (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return None\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")\n            if message:\n                return message\n        return None\n"
                                },
                                "input_value": {
                                    "_input_type": "MessageInput",
                                    "advanced": false,
                                    "display_name": "Input",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "json_mode": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "JSON Mode",
                                    "dynamic": false,
                                    "info": "If True, it will output JSON regardless of passing a schema.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "json_mode",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "max_tokens": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Max Tokens",
                                    "dynamic": false,
                                    "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "max_tokens",
                                    "placeholder": "",
                                    "range_spec": {
                                        "max": 128000,
                                        "min": 0,
                                        "step": 0.1,
                                        "step_type": "float"
                                    },
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": ""
                                },
                                "model_kwargs": {
                                    "_input_type": "DictInput",
                                    "advanced": true,
                                    "display_name": "Model Kwargs",
                                    "dynamic": false,
                                    "info": "Additional keyword arguments to pass to the model.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "model_kwargs",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "type": "dict",
                                    "value": {}
                                },
                                "model_name": {
                                    "_input_type": "DropdownInput",
                                    "advanced": false,
                                    "combobox": false,
                                    "dialog_inputs": {},
                                    "display_name": "Model Name",
                                    "dynamic": false,
                                    "info": "",
                                    "name": "model_name",
                                    "options": [
                                        "gpt-4o-mini",
                                        "gpt-4o",
                                        "gpt-4-turbo",
                                        "gpt-4-turbo-preview",
                                        "gpt-4",
                                        "gpt-3.5-turbo",
                                        "gpt-3.5-turbo-0125"
                                    ],
                                    "options_metadata": [],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "gpt-4o-mini"
                                },
                                "openai_api_base": {
                                    "_input_type": "StrInput",
                                    "advanced": true,
                                    "display_name": "OpenAI API Base",
                                    "dynamic": false,
                                    "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "name": "openai_api_base",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "seed": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Seed",
                                    "dynamic": false,
                                    "info": "The seed controls the reproducibility of the job.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "seed",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 1
                                },
                                "stream": {
                                    "_input_type": "BoolInput",
                                    "advanced": false,
                                    "display_name": "Stream",
                                    "dynamic": false,
                                    "info": "Stream the response from the model. Streaming works only in Chat.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "stream",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "system_message": {
                                    "_input_type": "MultilineInput",
                                    "advanced": false,
                                    "display_name": "System Message",
                                    "dynamic": false,
                                    "info": "System message to pass to the model.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "system_message",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "temperature": {
                                    "_input_type": "SliderInput",
                                    "advanced": false,
                                    "display_name": "Temperature",
                                    "dynamic": false,
                                    "info": "",
                                    "max_label": "",
                                    "max_label_icon": "",
                                    "min_label": "",
                                    "min_label_icon": "",
                                    "name": "temperature",
                                    "placeholder": "",
                                    "range_spec": {
                                        "max": 2,
                                        "min": 0,
                                        "step": 0.01,
                                        "step_type": "float"
                                    },
                                    "required": false,
                                    "show": true,
                                    "slider_buttons": false,
                                    "slider_buttons_options": [],
                                    "slider_input": false,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "type": "slider",
                                    "value": 0.1
                                }
                            },
                            "tool_mode": false
                        },
                        "showNode": true,
                        "type": "OpenAIModel"
                    },
                    "dragging": false,
                    "id": "OpenAIModel-3VRcc",
                    "measured": {
                        "height": 734,
                        "width": 360
                    },
                    "position": {
                        "x": 1563.1591714154865,
                        "y": 811.7524000203542
                    },
                    "selected": false,
                    "type": "genericNode"
                },
                {
                    "data": {
                        "id": "OpenAIModel-01mE2",
                        "node": {
                            "base_classes": [
                                "LanguageModel",
                                "Message"
                            ],
                            "beta": false,
                            "category": "models",
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Generates text using OpenAI LLMs.",
                            "display_name": "OpenAI",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "input_value",
                                "system_message",
                                "stream",
                                "max_tokens",
                                "model_kwargs",
                                "json_mode",
                                "model_name",
                                "openai_api_base",
                                "api_key",
                                "temperature",
                                "seed"
                            ],
                            "frozen": false,
                            "icon": "OpenAI",
                            "key": "OpenAIModel",
                            "legacy": false,
                            "metadata": {},
                            "minimized": false,
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "text_response",
                                    "name": "text_output",
                                    "required_inputs": [],
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                },
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Language Model",
                                    "method": "build_model",
                                    "name": "model_output",
                                    "required_inputs": [
                                        "api_key"
                                    ],
                                    "selected": "LanguageModel",
                                    "types": [
                                        "LanguageModel"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "score": 0.14285714285714285,
                            "template": {
                                "_type": "Component",
                                "api_key": {
                                    "_input_type": "SecretStrInput",
                                    "advanced": false,
                                    "display_name": "OpenAI API Key",
                                    "dynamic": false,
                                    "info": "The OpenAI API Key to use for the OpenAI model.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "load_from_db": true,
                                    "name": "api_key",
                                    "password": true,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": "OPENAI_API_KEY"
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.openai_constants import OPENAI_MODEL_NAMES\nfrom langflow.field_typing import LanguageModel\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.inputs import BoolInput, DictInput, DropdownInput, IntInput, SecretStrInput, SliderInput, StrInput\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIModel\"\n\n    inputs = [\n        *LCModelComponent._base_inputs,\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            range_spec=RangeSpec(min=0, max=128000),\n        ),\n        DictInput(\n            name=\"model_kwargs\",\n            display_name=\"Model Kwargs\",\n            advanced=True,\n            info=\"Additional keyword arguments to pass to the model.\",\n        ),\n        BoolInput(\n            name=\"json_mode\",\n            display_name=\"JSON Mode\",\n            advanced=True,\n            info=\"If True, it will output JSON regardless of passing a schema.\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            advanced=False,\n            options=OPENAI_MODEL_NAMES,\n            value=OPENAI_MODEL_NAMES[0],\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. \"\n            \"Defaults to https://api.openai.com/v1. \"\n            \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n            required=True,\n        ),\n        SliderInput(\n            name=\"temperature\", display_name=\"Temperature\", value=0.1, range_spec=RangeSpec(min=0, max=2, step=0.01)\n        ),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        openai_api_key = self.api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\n        json_mode = self.json_mode\n        seed = self.seed\n\n        api_key = SecretStr(openai_api_key).get_secret_value() if openai_api_key else None\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature if temperature is not None else 0.1,\n            seed=seed,\n        )\n        if json_mode:\n            output = output.bind(response_format={\"type\": \"json_object\"})\n\n        return output\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"Get a message from an OpenAI exception.\n\n        Args:\n            e (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return None\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")\n            if message:\n                return message\n        return None\n"
                                },
                                "input_value": {
                                    "_input_type": "MessageInput",
                                    "advanced": false,
                                    "display_name": "Input",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "json_mode": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "JSON Mode",
                                    "dynamic": false,
                                    "info": "If True, it will output JSON regardless of passing a schema.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "json_mode",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "max_tokens": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Max Tokens",
                                    "dynamic": false,
                                    "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "max_tokens",
                                    "placeholder": "",
                                    "range_spec": {
                                        "max": 128000,
                                        "min": 0,
                                        "step": 0.1,
                                        "step_type": "float"
                                    },
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": ""
                                },
                                "model_kwargs": {
                                    "_input_type": "DictInput",
                                    "advanced": true,
                                    "display_name": "Model Kwargs",
                                    "dynamic": false,
                                    "info": "Additional keyword arguments to pass to the model.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "model_kwargs",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "type": "dict",
                                    "value": {}
                                },
                                "model_name": {
                                    "_input_type": "DropdownInput",
                                    "advanced": false,
                                    "combobox": false,
                                    "dialog_inputs": {},
                                    "display_name": "Model Name",
                                    "dynamic": false,
                                    "info": "",
                                    "name": "model_name",
                                    "options": [
                                        "gpt-4o-mini",
                                        "gpt-4o",
                                        "gpt-4-turbo",
                                        "gpt-4-turbo-preview",
                                        "gpt-4",
                                        "gpt-3.5-turbo",
                                        "gpt-3.5-turbo-0125"
                                    ],
                                    "options_metadata": [],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "gpt-4o-mini"
                                },
                                "openai_api_base": {
                                    "_input_type": "StrInput",
                                    "advanced": true,
                                    "display_name": "OpenAI API Base",
                                    "dynamic": false,
                                    "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "name": "openai_api_base",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "seed": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Seed",
                                    "dynamic": false,
                                    "info": "The seed controls the reproducibility of the job.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "seed",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 1
                                },
                                "stream": {
                                    "_input_type": "BoolInput",
                                    "advanced": false,
                                    "display_name": "Stream",
                                    "dynamic": false,
                                    "info": "Stream the response from the model. Streaming works only in Chat.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "stream",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "system_message": {
                                    "_input_type": "MultilineInput",
                                    "advanced": false,
                                    "display_name": "System Message",
                                    "dynamic": false,
                                    "info": "System message to pass to the model.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "system_message",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "temperature": {
                                    "_input_type": "SliderInput",
                                    "advanced": false,
                                    "display_name": "Temperature",
                                    "dynamic": false,
                                    "info": "",
                                    "max_label": "",
                                    "max_label_icon": "",
                                    "min_label": "",
                                    "min_label_icon": "",
                                    "name": "temperature",
                                    "placeholder": "",
                                    "range_spec": {
                                        "max": 2,
                                        "min": 0,
                                        "step": 0.01,
                                        "step_type": "float"
                                    },
                                    "required": false,
                                    "show": true,
                                    "slider_buttons": false,
                                    "slider_buttons_options": [],
                                    "slider_input": false,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "type": "slider",
                                    "value": 0.1
                                }
                            },
                            "tool_mode": false
                        },
                        "showNode": true,
                        "type": "OpenAIModel"
                    },
                    "dragging": false,
                    "id": "OpenAIModel-01mE2",
                    "measured": {
                        "height": 734,
                        "width": 360
                    },
                    "position": {
                        "x": 2289.2925714867265,
                        "y": 849.5992204058788
                    },
                    "selected": false,
                    "type": "genericNode"
                },
                {
                    "data": {
                        "id": "OpenAIModel-4DgWt",
                        "node": {
                            "base_classes": [
                                "LanguageModel",
                                "Message"
                            ],
                            "beta": false,
                            "category": "models",
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Generates text using OpenAI LLMs.",
                            "display_name": "OpenAI",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "input_value",
                                "system_message",
                                "stream",
                                "max_tokens",
                                "model_kwargs",
                                "json_mode",
                                "model_name",
                                "openai_api_base",
                                "api_key",
                                "temperature",
                                "seed"
                            ],
                            "frozen": false,
                            "icon": "OpenAI",
                            "key": "OpenAIModel",
                            "legacy": false,
                            "metadata": {},
                            "minimized": false,
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "text_response",
                                    "name": "text_output",
                                    "required_inputs": [],
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                },
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Language Model",
                                    "method": "build_model",
                                    "name": "model_output",
                                    "required_inputs": [
                                        "api_key"
                                    ],
                                    "selected": "LanguageModel",
                                    "types": [
                                        "LanguageModel"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "score": 0.14285714285714285,
                            "template": {
                                "_type": "Component",
                                "api_key": {
                                    "_input_type": "SecretStrInput",
                                    "advanced": false,
                                    "display_name": "OpenAI API Key",
                                    "dynamic": false,
                                    "info": "The OpenAI API Key to use for the OpenAI model.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "load_from_db": true,
                                    "name": "api_key",
                                    "password": true,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": "OPENAI_API_KEY"
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.openai_constants import OPENAI_MODEL_NAMES\nfrom langflow.field_typing import LanguageModel\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.inputs import BoolInput, DictInput, DropdownInput, IntInput, SecretStrInput, SliderInput, StrInput\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIModel\"\n\n    inputs = [\n        *LCModelComponent._base_inputs,\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            range_spec=RangeSpec(min=0, max=128000),\n        ),\n        DictInput(\n            name=\"model_kwargs\",\n            display_name=\"Model Kwargs\",\n            advanced=True,\n            info=\"Additional keyword arguments to pass to the model.\",\n        ),\n        BoolInput(\n            name=\"json_mode\",\n            display_name=\"JSON Mode\",\n            advanced=True,\n            info=\"If True, it will output JSON regardless of passing a schema.\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            advanced=False,\n            options=OPENAI_MODEL_NAMES,\n            value=OPENAI_MODEL_NAMES[0],\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. \"\n            \"Defaults to https://api.openai.com/v1. \"\n            \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n            required=True,\n        ),\n        SliderInput(\n            name=\"temperature\", display_name=\"Temperature\", value=0.1, range_spec=RangeSpec(min=0, max=2, step=0.01)\n        ),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        openai_api_key = self.api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\n        json_mode = self.json_mode\n        seed = self.seed\n\n        api_key = SecretStr(openai_api_key).get_secret_value() if openai_api_key else None\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature if temperature is not None else 0.1,\n            seed=seed,\n        )\n        if json_mode:\n            output = output.bind(response_format={\"type\": \"json_object\"})\n\n        return output\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"Get a message from an OpenAI exception.\n\n        Args:\n            e (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return None\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")\n            if message:\n                return message\n        return None\n"
                                },
                                "input_value": {
                                    "_input_type": "MessageInput",
                                    "advanced": false,
                                    "display_name": "Input",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "json_mode": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "JSON Mode",
                                    "dynamic": false,
                                    "info": "If True, it will output JSON regardless of passing a schema.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "json_mode",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "max_tokens": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Max Tokens",
                                    "dynamic": false,
                                    "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "max_tokens",
                                    "placeholder": "",
                                    "range_spec": {
                                        "max": 128000,
                                        "min": 0,
                                        "step": 0.1,
                                        "step_type": "float"
                                    },
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": ""
                                },
                                "model_kwargs": {
                                    "_input_type": "DictInput",
                                    "advanced": true,
                                    "display_name": "Model Kwargs",
                                    "dynamic": false,
                                    "info": "Additional keyword arguments to pass to the model.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "model_kwargs",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "type": "dict",
                                    "value": {}
                                },
                                "model_name": {
                                    "_input_type": "DropdownInput",
                                    "advanced": false,
                                    "combobox": false,
                                    "dialog_inputs": {},
                                    "display_name": "Model Name",
                                    "dynamic": false,
                                    "info": "",
                                    "name": "model_name",
                                    "options": [
                                        "gpt-4o-mini",
                                        "gpt-4o",
                                        "gpt-4-turbo",
                                        "gpt-4-turbo-preview",
                                        "gpt-4",
                                        "gpt-3.5-turbo",
                                        "gpt-3.5-turbo-0125"
                                    ],
                                    "options_metadata": [],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "gpt-4o-mini"
                                },
                                "openai_api_base": {
                                    "_input_type": "StrInput",
                                    "advanced": true,
                                    "display_name": "OpenAI API Base",
                                    "dynamic": false,
                                    "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "name": "openai_api_base",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "seed": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Seed",
                                    "dynamic": false,
                                    "info": "The seed controls the reproducibility of the job.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "seed",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 1
                                },
                                "stream": {
                                    "_input_type": "BoolInput",
                                    "advanced": false,
                                    "display_name": "Stream",
                                    "dynamic": false,
                                    "info": "Stream the response from the model. Streaming works only in Chat.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "stream",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "system_message": {
                                    "_input_type": "MultilineInput",
                                    "advanced": false,
                                    "display_name": "System Message",
                                    "dynamic": false,
                                    "info": "System message to pass to the model.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "system_message",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "temperature": {
                                    "_input_type": "SliderInput",
                                    "advanced": false,
                                    "display_name": "Temperature",
                                    "dynamic": false,
                                    "info": "",
                                    "max_label": "",
                                    "max_label_icon": "",
                                    "min_label": "",
                                    "min_label_icon": "",
                                    "name": "temperature",
                                    "placeholder": "",
                                    "range_spec": {
                                        "max": 2,
                                        "min": 0,
                                        "step": 0.01,
                                        "step_type": "float"
                                    },
                                    "required": false,
                                    "show": true,
                                    "slider_buttons": false,
                                    "slider_buttons_options": [],
                                    "slider_input": false,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "type": "slider",
                                    "value": 0.1
                                }
                            },
                            "tool_mode": false
                        },
                        "showNode": true,
                        "type": "OpenAIModel"
                    },
                    "dragging": false,
                    "id": "OpenAIModel-4DgWt",
                    "measured": {
                        "height": 734,
                        "width": 360
                    },
                    "position": {
                        "x": 3018.8917918926063,
                        "y": 844.6876489700377
                    },
                    "selected": false,
                    "type": "genericNode"
                }
            ],
            "viewport": {
                "x": -659.8399794180846,
                "y": -252.56300712780512,
                "zoom": 0.5391950807198421
            }
        },
        "is_component": false,
        "updated_at": "2025-01-25T04:58:25+00:00",
        "webhook": false,
        "endpoint_name": null,
        "tags": [
            "chatbots"
        ],
        "locked": false,
        "id": "a784d40d-1fc3-44b9-b18d-12696b340df2",
        "user_id": null,
        "folder_id": "c54584e6-88eb-4ac0-b70c-68aee37fdce2"
    },
    {
        "name": "Graph RAG",
        "description": "Extracts links from web pages and processes the content using Graph RAG Chain with Maximal Marginal Relevance (MMR) traversal.",
        "icon": "chartNetwork",
        "icon_bg_color": null,
        "gradient": null,
        "data": {
            "edges": [
                {
                    "animated": false,
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "OpenAIEmbeddings",
                            "id": "OpenAIEmbeddings-gwVof",
                            "name": "embeddings",
                            "output_types": [
                                "Embeddings"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "embedding_model",
                            "id": "AstraDBGraph-LdFgZ",
                            "inputTypes": [
                                "Embeddings"
                            ],
                            "type": "other"
                        }
                    },
                    "id": "reactflow__edge-OpenAIEmbeddings-gwVof{\u0153dataType\u0153:\u0153OpenAIEmbeddings\u0153,\u0153id\u0153:\u0153OpenAIEmbeddings-gwVof\u0153,\u0153name\u0153:\u0153embeddings\u0153,\u0153output_types\u0153:[\u0153Embeddings\u0153]}-AstraDBGraph-LdFgZ{\u0153fieldName\u0153:\u0153embedding_model\u0153,\u0153id\u0153:\u0153AstraDBGraph-LdFgZ\u0153,\u0153inputTypes\u0153:[\u0153Embeddings\u0153],\u0153type\u0153:\u0153other\u0153}",
                    "selected": false,
                    "source": "OpenAIEmbeddings-gwVof",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153OpenAIEmbeddings\u0153, \u0153id\u0153: \u0153OpenAIEmbeddings-gwVof\u0153, \u0153name\u0153: \u0153embeddings\u0153, \u0153output_types\u0153: [\u0153Embeddings\u0153]}",
                    "target": "AstraDBGraph-LdFgZ",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153embedding_model\u0153, \u0153id\u0153: \u0153AstraDBGraph-LdFgZ\u0153, \u0153inputTypes\u0153: [\u0153Embeddings\u0153], \u0153type\u0153: \u0153other\u0153}"
                },
                {
                    "animated": false,
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "ChatInput",
                            "id": "ChatInput-vz6Qy",
                            "name": "message",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "search_query",
                            "id": "AstraDBGraph-LdFgZ",
                            "inputTypes": [
                                "Message"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "reactflow__edge-ChatInput-vz6Qy{\u0153dataType\u0153:\u0153ChatInput\u0153,\u0153id\u0153:\u0153ChatInput-vz6Qy\u0153,\u0153name\u0153:\u0153message\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-AstraDBGraph-LdFgZ{\u0153fieldName\u0153:\u0153search_query\u0153,\u0153id\u0153:\u0153AstraDBGraph-LdFgZ\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "selected": false,
                    "source": "ChatInput-vz6Qy",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153ChatInput\u0153, \u0153id\u0153: \u0153ChatInput-vz6Qy\u0153, \u0153name\u0153: \u0153message\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "AstraDBGraph-LdFgZ",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153search_query\u0153, \u0153id\u0153: \u0153AstraDBGraph-LdFgZ\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "animated": false,
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "AstraDBGraph",
                            "id": "AstraDBGraph-LdFgZ",
                            "name": "search_results",
                            "output_types": [
                                "Data"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "data",
                            "id": "ParseData-KSu0D",
                            "inputTypes": [
                                "Data"
                            ],
                            "type": "other"
                        }
                    },
                    "id": "reactflow__edge-AstraDBGraph-LdFgZ{\u0153dataType\u0153:\u0153AstraDBGraph\u0153,\u0153id\u0153:\u0153AstraDBGraph-LdFgZ\u0153,\u0153name\u0153:\u0153search_results\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}-ParseData-KSu0D{\u0153fieldName\u0153:\u0153data\u0153,\u0153id\u0153:\u0153ParseData-KSu0D\u0153,\u0153inputTypes\u0153:[\u0153Data\u0153],\u0153type\u0153:\u0153other\u0153}",
                    "selected": false,
                    "source": "AstraDBGraph-LdFgZ",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153AstraDBGraph\u0153, \u0153id\u0153: \u0153AstraDBGraph-LdFgZ\u0153, \u0153name\u0153: \u0153search_results\u0153, \u0153output_types\u0153: [\u0153Data\u0153]}",
                    "target": "ParseData-KSu0D",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153data\u0153, \u0153id\u0153: \u0153ParseData-KSu0D\u0153, \u0153inputTypes\u0153: [\u0153Data\u0153], \u0153type\u0153: \u0153other\u0153}"
                },
                {
                    "animated": false,
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "ParseData",
                            "id": "ParseData-KSu0D",
                            "name": "text",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "context",
                            "id": "Prompt-YYjDd",
                            "inputTypes": [
                                "Message",
                                "Text"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "reactflow__edge-ParseData-KSu0D{\u0153dataType\u0153:\u0153ParseData\u0153,\u0153id\u0153:\u0153ParseData-KSu0D\u0153,\u0153name\u0153:\u0153text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-Prompt-YYjDd{\u0153fieldName\u0153:\u0153context\u0153,\u0153id\u0153:\u0153Prompt-YYjDd\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153,\u0153Text\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "selected": false,
                    "source": "ParseData-KSu0D",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153ParseData\u0153, \u0153id\u0153: \u0153ParseData-KSu0D\u0153, \u0153name\u0153: \u0153text\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "Prompt-YYjDd",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153context\u0153, \u0153id\u0153: \u0153Prompt-YYjDd\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153, \u0153Text\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "animated": false,
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "ChatInput",
                            "id": "ChatInput-vz6Qy",
                            "name": "message",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "question",
                            "id": "Prompt-YYjDd",
                            "inputTypes": [
                                "Message",
                                "Text"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "reactflow__edge-ChatInput-vz6Qy{\u0153dataType\u0153:\u0153ChatInput\u0153,\u0153id\u0153:\u0153ChatInput-vz6Qy\u0153,\u0153name\u0153:\u0153message\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-Prompt-YYjDd{\u0153fieldName\u0153:\u0153question\u0153,\u0153id\u0153:\u0153Prompt-YYjDd\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153,\u0153Text\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "selected": false,
                    "source": "ChatInput-vz6Qy",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153ChatInput\u0153, \u0153id\u0153: \u0153ChatInput-vz6Qy\u0153, \u0153name\u0153: \u0153message\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "Prompt-YYjDd",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153question\u0153, \u0153id\u0153: \u0153Prompt-YYjDd\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153, \u0153Text\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "animated": false,
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "Prompt",
                            "id": "Prompt-YYjDd",
                            "name": "prompt",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "input_value",
                            "id": "OpenAIModel-4odsT",
                            "inputTypes": [
                                "Message"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "reactflow__edge-Prompt-YYjDd{\u0153dataType\u0153:\u0153Prompt\u0153,\u0153id\u0153:\u0153Prompt-YYjDd\u0153,\u0153name\u0153:\u0153prompt\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-OpenAIModel-4odsT{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153OpenAIModel-4odsT\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "selected": false,
                    "source": "Prompt-YYjDd",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153Prompt\u0153, \u0153id\u0153: \u0153Prompt-YYjDd\u0153, \u0153name\u0153: \u0153prompt\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "OpenAIModel-4odsT",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153input_value\u0153, \u0153id\u0153: \u0153OpenAIModel-4odsT\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "animated": false,
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "OpenAIModel",
                            "id": "OpenAIModel-4odsT",
                            "name": "text_output",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "input_value",
                            "id": "ChatOutput-7mjeM",
                            "inputTypes": [
                                "Message"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "reactflow__edge-OpenAIModel-4odsT{\u0153dataType\u0153:\u0153OpenAIModel\u0153,\u0153id\u0153:\u0153OpenAIModel-4odsT\u0153,\u0153name\u0153:\u0153text_output\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-ChatOutput-7mjeM{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153ChatOutput-7mjeM\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "selected": false,
                    "source": "OpenAIModel-4odsT",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153OpenAIModel\u0153, \u0153id\u0153: \u0153OpenAIModel-4odsT\u0153, \u0153name\u0153: \u0153text_output\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "ChatOutput-7mjeM",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153input_value\u0153, \u0153id\u0153: \u0153ChatOutput-7mjeM\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "animated": false,
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "URL",
                            "id": "URL-jjkEI",
                            "name": "data",
                            "output_types": [
                                "Data"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "data_input",
                            "id": "LanguageRecursiveTextSplitter-wmtIz",
                            "inputTypes": [
                                "Document",
                                "Data"
                            ],
                            "type": "other"
                        }
                    },
                    "id": "reactflow__edge-URL-jjkEI{\u0153dataType\u0153:\u0153URL\u0153,\u0153id\u0153:\u0153URL-jjkEI\u0153,\u0153name\u0153:\u0153data\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}-LanguageRecursiveTextSplitter-wmtIz{\u0153fieldName\u0153:\u0153data_input\u0153,\u0153id\u0153:\u0153LanguageRecursiveTextSplitter-wmtIz\u0153,\u0153inputTypes\u0153:[\u0153Document\u0153,\u0153Data\u0153],\u0153type\u0153:\u0153other\u0153}",
                    "selected": false,
                    "source": "URL-jjkEI",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153URL\u0153, \u0153id\u0153: \u0153URL-jjkEI\u0153, \u0153name\u0153: \u0153data\u0153, \u0153output_types\u0153: [\u0153Data\u0153]}",
                    "target": "LanguageRecursiveTextSplitter-wmtIz",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153data_input\u0153, \u0153id\u0153: \u0153LanguageRecursiveTextSplitter-wmtIz\u0153, \u0153inputTypes\u0153: [\u0153Document\u0153, \u0153Data\u0153], \u0153type\u0153: \u0153other\u0153}"
                },
                {
                    "animated": false,
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "LanguageRecursiveTextSplitter",
                            "id": "LanguageRecursiveTextSplitter-wmtIz",
                            "name": "data",
                            "output_types": [
                                "Data"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "data_input",
                            "id": "HtmlLinkExtractor-MyH7H",
                            "inputTypes": [
                                "Document",
                                "Data"
                            ],
                            "type": "other"
                        }
                    },
                    "id": "reactflow__edge-LanguageRecursiveTextSplitter-wmtIz{\u0153dataType\u0153:\u0153LanguageRecursiveTextSplitter\u0153,\u0153id\u0153:\u0153LanguageRecursiveTextSplitter-wmtIz\u0153,\u0153name\u0153:\u0153data\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}-HtmlLinkExtractor-MyH7H{\u0153fieldName\u0153:\u0153data_input\u0153,\u0153id\u0153:\u0153HtmlLinkExtractor-MyH7H\u0153,\u0153inputTypes\u0153:[\u0153Document\u0153,\u0153Data\u0153],\u0153type\u0153:\u0153other\u0153}",
                    "selected": false,
                    "source": "LanguageRecursiveTextSplitter-wmtIz",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153LanguageRecursiveTextSplitter\u0153, \u0153id\u0153: \u0153LanguageRecursiveTextSplitter-wmtIz\u0153, \u0153name\u0153: \u0153data\u0153, \u0153output_types\u0153: [\u0153Data\u0153]}",
                    "target": "HtmlLinkExtractor-MyH7H",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153data_input\u0153, \u0153id\u0153: \u0153HtmlLinkExtractor-MyH7H\u0153, \u0153inputTypes\u0153: [\u0153Document\u0153, \u0153Data\u0153], \u0153type\u0153: \u0153other\u0153}"
                },
                {
                    "animated": false,
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "HtmlLinkExtractor",
                            "id": "HtmlLinkExtractor-MyH7H",
                            "name": "data",
                            "output_types": [
                                "Data"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "ingest_data",
                            "id": "AstraDBGraph-WPnB7",
                            "inputTypes": [
                                "Data"
                            ],
                            "type": "other"
                        }
                    },
                    "id": "reactflow__edge-HtmlLinkExtractor-MyH7H{\u0153dataType\u0153:\u0153HtmlLinkExtractor\u0153,\u0153id\u0153:\u0153HtmlLinkExtractor-MyH7H\u0153,\u0153name\u0153:\u0153data\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}-AstraDBGraph-WPnB7{\u0153fieldName\u0153:\u0153ingest_data\u0153,\u0153id\u0153:\u0153AstraDBGraph-WPnB7\u0153,\u0153inputTypes\u0153:[\u0153Data\u0153],\u0153type\u0153:\u0153other\u0153}",
                    "selected": false,
                    "source": "HtmlLinkExtractor-MyH7H",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153HtmlLinkExtractor\u0153, \u0153id\u0153: \u0153HtmlLinkExtractor-MyH7H\u0153, \u0153name\u0153: \u0153data\u0153, \u0153output_types\u0153: [\u0153Data\u0153]}",
                    "target": "AstraDBGraph-WPnB7",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153ingest_data\u0153, \u0153id\u0153: \u0153AstraDBGraph-WPnB7\u0153, \u0153inputTypes\u0153: [\u0153Data\u0153], \u0153type\u0153: \u0153other\u0153}"
                },
                {
                    "animated": false,
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "OpenAIEmbeddings",
                            "id": "OpenAIEmbeddings-SoMI2",
                            "name": "embeddings",
                            "output_types": [
                                "Embeddings"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "embedding_model",
                            "id": "AstraDBGraph-WPnB7",
                            "inputTypes": [
                                "Embeddings"
                            ],
                            "type": "other"
                        }
                    },
                    "id": "reactflow__edge-OpenAIEmbeddings-SoMI2{\u0153dataType\u0153:\u0153OpenAIEmbeddings\u0153,\u0153id\u0153:\u0153OpenAIEmbeddings-SoMI2\u0153,\u0153name\u0153:\u0153embeddings\u0153,\u0153output_types\u0153:[\u0153Embeddings\u0153]}-AstraDBGraph-WPnB7{\u0153fieldName\u0153:\u0153embedding_model\u0153,\u0153id\u0153:\u0153AstraDBGraph-WPnB7\u0153,\u0153inputTypes\u0153:[\u0153Embeddings\u0153],\u0153type\u0153:\u0153other\u0153}",
                    "selected": false,
                    "source": "OpenAIEmbeddings-SoMI2",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153OpenAIEmbeddings\u0153, \u0153id\u0153: \u0153OpenAIEmbeddings-SoMI2\u0153, \u0153name\u0153: \u0153embeddings\u0153, \u0153output_types\u0153: [\u0153Embeddings\u0153]}",
                    "target": "AstraDBGraph-WPnB7",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153embedding_model\u0153, \u0153id\u0153: \u0153AstraDBGraph-WPnB7\u0153, \u0153inputTypes\u0153: [\u0153Embeddings\u0153], \u0153type\u0153: \u0153other\u0153}"
                }
            ],
            "nodes": [
                {
                    "data": {
                        "id": "ChatInput-vz6Qy",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Get chat inputs from the Playground.",
                            "display_name": "Chat Input",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "input_value",
                                "should_store_message",
                                "sender",
                                "sender_name",
                                "session_id",
                                "files",
                                "background_color",
                                "chat_icon",
                                "text_color"
                            ],
                            "frozen": false,
                            "icon": "MessagesSquare",
                            "legacy": false,
                            "lf_version": "1.1.1",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "message_response",
                                    "name": "message",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "background_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Background Color",
                                    "dynamic": false,
                                    "info": "The background color of the icon.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "background_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "chat_icon": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Icon",
                                    "dynamic": false,
                                    "info": "The icon of the message.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "chat_icon",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import (\n    DropdownInput,\n    FileInput,\n    MessageTextInput,\n    MultilineInput,\n    Output,\n)\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_USER,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatInput\"\n    minimized = True\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n            input_types=[],\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    async def message_response(self) -> Message:\n        background_color = self.background_color\n        text_color = self.text_color\n        icon = self.chat_icon\n\n        message = await Message.create(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n            properties={\n                \"background_color\": background_color,\n                \"text_color\": text_color,\n                \"icon\": icon,\n            },\n        )\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n"
                                },
                                "files": {
                                    "_input_type": "FileInput",
                                    "advanced": true,
                                    "display_name": "Files",
                                    "dynamic": false,
                                    "fileTypes": [
                                        "txt",
                                        "md",
                                        "mdx",
                                        "csv",
                                        "json",
                                        "yaml",
                                        "yml",
                                        "xml",
                                        "html",
                                        "htm",
                                        "pdf",
                                        "docx",
                                        "py",
                                        "sh",
                                        "sql",
                                        "js",
                                        "ts",
                                        "tsx",
                                        "jpg",
                                        "jpeg",
                                        "png",
                                        "bmp",
                                        "image"
                                    ],
                                    "file_path": "",
                                    "info": "Files to be sent with the message.",
                                    "list": true,
                                    "name": "files",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "file",
                                    "value": ""
                                },
                                "input_value": {
                                    "_input_type": "MultilineInput",
                                    "advanced": false,
                                    "display_name": "Text",
                                    "dynamic": false,
                                    "info": "Message to be passed as input.",
                                    "input_types": [],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "How does Haskell handle function composition and what are some practical examples of its use?"
                                },
                                "sender": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Sender Type",
                                    "dynamic": false,
                                    "info": "Type of sender.",
                                    "name": "sender",
                                    "options": [
                                        "Machine",
                                        "User"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "User"
                                },
                                "sender_name": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Sender Name",
                                    "dynamic": false,
                                    "info": "Name of the sender.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "sender_name",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "User"
                                },
                                "session_id": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Session ID",
                                    "dynamic": false,
                                    "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "session_id",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "should_store_message": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Store Messages",
                                    "dynamic": false,
                                    "info": "Store the message in the history.",
                                    "list": false,
                                    "name": "should_store_message",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "text_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Text Color",
                                    "dynamic": false,
                                    "info": "The text color of the name",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "text_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "ChatInput"
                    },
                    "dragging": false,
                    "height": 233,
                    "id": "ChatInput-vz6Qy",
                    "measured": {
                        "height": 233,
                        "width": 320
                    },
                    "position": {
                        "x": -1800.3752844686821,
                        "y": 7028.578266524353
                    },
                    "positionAbsolute": {
                        "x": -1516.4270244619845,
                        "y": 6211.967942125529
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "id": "OpenAIEmbeddings-gwVof",
                        "node": {
                            "base_classes": [
                                "Embeddings"
                            ],
                            "beta": false,
                            "category": "embeddings",
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Generate embeddings using OpenAI models.",
                            "display_name": "OpenAI Embeddings",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "default_headers",
                                "default_query",
                                "chunk_size",
                                "client",
                                "deployment",
                                "embedding_ctx_length",
                                "max_retries",
                                "model",
                                "model_kwargs",
                                "openai_api_key",
                                "openai_api_base",
                                "openai_api_type",
                                "openai_api_version",
                                "openai_organization",
                                "openai_proxy",
                                "request_timeout",
                                "show_progress_bar",
                                "skip_empty",
                                "tiktoken_model_name",
                                "tiktoken_enable",
                                "dimensions"
                            ],
                            "frozen": false,
                            "icon": "OpenAI",
                            "key": "OpenAIEmbeddings",
                            "legacy": false,
                            "lf_version": "1.1.1",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Embeddings",
                                    "method": "build_embeddings",
                                    "name": "embeddings",
                                    "required_inputs": [
                                        "openai_api_key"
                                    ],
                                    "selected": "Embeddings",
                                    "types": [
                                        "Embeddings"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "score": 5.2003277518821525e-05,
                            "template": {
                                "_type": "Component",
                                "chunk_size": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Chunk Size",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "name": "chunk_size",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 1000
                                },
                                "client": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Client",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "client",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langchain_openai import OpenAIEmbeddings\n\nfrom langflow.base.embeddings.model import LCEmbeddingsModel\nfrom langflow.base.models.openai_constants import OPENAI_EMBEDDING_MODEL_NAMES\nfrom langflow.field_typing import Embeddings\nfrom langflow.io import BoolInput, DictInput, DropdownInput, FloatInput, IntInput, MessageTextInput, SecretStrInput\n\n\nclass OpenAIEmbeddingsComponent(LCEmbeddingsModel):\n    display_name = \"OpenAI Embeddings\"\n    description = \"Generate embeddings using OpenAI models.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIEmbeddings\"\n\n    inputs = [\n        DictInput(\n            name=\"default_headers\",\n            display_name=\"Default Headers\",\n            advanced=True,\n            info=\"Default headers to use for the API request.\",\n        ),\n        DictInput(\n            name=\"default_query\",\n            display_name=\"Default Query\",\n            advanced=True,\n            info=\"Default query parameters to use for the API request.\",\n        ),\n        IntInput(name=\"chunk_size\", display_name=\"Chunk Size\", advanced=True, value=1000),\n        MessageTextInput(name=\"client\", display_name=\"Client\", advanced=True),\n        MessageTextInput(name=\"deployment\", display_name=\"Deployment\", advanced=True),\n        IntInput(name=\"embedding_ctx_length\", display_name=\"Embedding Context Length\", advanced=True, value=1536),\n        IntInput(name=\"max_retries\", display_name=\"Max Retries\", value=3, advanced=True),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model\",\n            advanced=False,\n            options=OPENAI_EMBEDDING_MODEL_NAMES,\n            value=\"text-embedding-3-small\",\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        SecretStrInput(name=\"openai_api_key\", display_name=\"OpenAI API Key\", value=\"OPENAI_API_KEY\", required=True),\n        MessageTextInput(name=\"openai_api_base\", display_name=\"OpenAI API Base\", advanced=True),\n        MessageTextInput(name=\"openai_api_type\", display_name=\"OpenAI API Type\", advanced=True),\n        MessageTextInput(name=\"openai_api_version\", display_name=\"OpenAI API Version\", advanced=True),\n        MessageTextInput(\n            name=\"openai_organization\",\n            display_name=\"OpenAI Organization\",\n            advanced=True,\n        ),\n        MessageTextInput(name=\"openai_proxy\", display_name=\"OpenAI Proxy\", advanced=True),\n        FloatInput(name=\"request_timeout\", display_name=\"Request Timeout\", advanced=True),\n        BoolInput(name=\"show_progress_bar\", display_name=\"Show Progress Bar\", advanced=True),\n        BoolInput(name=\"skip_empty\", display_name=\"Skip Empty\", advanced=True),\n        MessageTextInput(\n            name=\"tiktoken_model_name\",\n            display_name=\"TikToken Model Name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"tiktoken_enable\",\n            display_name=\"TikToken Enable\",\n            advanced=True,\n            value=True,\n            info=\"If False, you must have transformers installed.\",\n        ),\n        IntInput(\n            name=\"dimensions\",\n            display_name=\"Dimensions\",\n            info=\"The number of dimensions the resulting output embeddings should have. \"\n            \"Only supported by certain models.\",\n            advanced=True,\n        ),\n    ]\n\n    def build_embeddings(self) -> Embeddings:\n        return OpenAIEmbeddings(\n            client=self.client or None,\n            model=self.model,\n            dimensions=self.dimensions or None,\n            deployment=self.deployment or None,\n            api_version=self.openai_api_version or None,\n            base_url=self.openai_api_base or None,\n            openai_api_type=self.openai_api_type or None,\n            openai_proxy=self.openai_proxy or None,\n            embedding_ctx_length=self.embedding_ctx_length,\n            api_key=self.openai_api_key or None,\n            organization=self.openai_organization or None,\n            allowed_special=\"all\",\n            disallowed_special=\"all\",\n            chunk_size=self.chunk_size,\n            max_retries=self.max_retries,\n            timeout=self.request_timeout or None,\n            tiktoken_enabled=self.tiktoken_enable,\n            tiktoken_model_name=self.tiktoken_model_name or None,\n            show_progress_bar=self.show_progress_bar,\n            model_kwargs=self.model_kwargs,\n            skip_empty=self.skip_empty,\n            default_headers=self.default_headers or None,\n            default_query=self.default_query or None,\n        )\n"
                                },
                                "default_headers": {
                                    "_input_type": "DictInput",
                                    "advanced": true,
                                    "display_name": "Default Headers",
                                    "dynamic": false,
                                    "info": "Default headers to use for the API request.",
                                    "list": false,
                                    "name": "default_headers",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "type": "dict",
                                    "value": {}
                                },
                                "default_query": {
                                    "_input_type": "DictInput",
                                    "advanced": true,
                                    "display_name": "Default Query",
                                    "dynamic": false,
                                    "info": "Default query parameters to use for the API request.",
                                    "list": false,
                                    "name": "default_query",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "type": "dict",
                                    "value": {}
                                },
                                "deployment": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Deployment",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "deployment",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "dimensions": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Dimensions",
                                    "dynamic": false,
                                    "info": "The number of dimensions the resulting output embeddings should have. Only supported by certain models.",
                                    "list": false,
                                    "name": "dimensions",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": ""
                                },
                                "embedding_ctx_length": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Embedding Context Length",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "name": "embedding_ctx_length",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 1536
                                },
                                "max_retries": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Max Retries",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "name": "max_retries",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 3
                                },
                                "model": {
                                    "_input_type": "DropdownInput",
                                    "advanced": false,
                                    "combobox": false,
                                    "display_name": "Model",
                                    "dynamic": false,
                                    "info": "",
                                    "name": "model",
                                    "options": [
                                        "text-embedding-3-small",
                                        "text-embedding-3-large",
                                        "text-embedding-ada-002"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "text-embedding-3-large"
                                },
                                "model_kwargs": {
                                    "_input_type": "DictInput",
                                    "advanced": true,
                                    "display_name": "Model Kwargs",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "name": "model_kwargs",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "type": "dict",
                                    "value": {}
                                },
                                "openai_api_base": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "OpenAI API Base",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "openai_api_base",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "openai_api_key": {
                                    "_input_type": "SecretStrInput",
                                    "advanced": false,
                                    "display_name": "OpenAI API Key",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "load_from_db": true,
                                    "name": "openai_api_key",
                                    "password": true,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": "OPENAI_API_KEY"
                                },
                                "openai_api_type": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "OpenAI API Type",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "openai_api_type",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "openai_api_version": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "OpenAI API Version",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "openai_api_version",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "openai_organization": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "OpenAI Organization",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "openai_organization",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "openai_proxy": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "OpenAI Proxy",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "openai_proxy",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "request_timeout": {
                                    "_input_type": "FloatInput",
                                    "advanced": true,
                                    "display_name": "Request Timeout",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "name": "request_timeout",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "float",
                                    "value": ""
                                },
                                "show_progress_bar": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Show Progress Bar",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "name": "show_progress_bar",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "skip_empty": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Skip Empty",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "name": "skip_empty",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "tiktoken_enable": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "TikToken Enable",
                                    "dynamic": false,
                                    "info": "If False, you must have transformers installed.",
                                    "list": false,
                                    "name": "tiktoken_enable",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "tiktoken_model_name": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "TikToken Model Name",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "tiktoken_model_name",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "OpenAIEmbeddings"
                    },
                    "dragging": false,
                    "height": 320,
                    "id": "OpenAIEmbeddings-gwVof",
                    "measured": {
                        "height": 320,
                        "width": 320
                    },
                    "position": {
                        "x": -1794.2005649575194,
                        "y": 7363.047766731913
                    },
                    "positionAbsolute": {
                        "x": -1530.978455316274,
                        "y": 6600.325433283265
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "description": "Implementation of Graph Vector Store using Astra DB",
                        "display_name": "Astra DB Graph",
                        "id": "AstraDBGraph-LdFgZ",
                        "node": {
                            "base_classes": [
                                "Data"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Implementation of Graph Vector Store using Astra DB",
                            "display_name": "Astra DB Graph",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "token",
                                "api_endpoint",
                                "collection_name",
                                "metadata_incoming_links_key",
                                "search_query",
                                "ingest_data",
                                "keyspace",
                                "embedding_model",
                                "metric",
                                "batch_size",
                                "bulk_insert_batch_concurrency",
                                "bulk_insert_overwrite_concurrency",
                                "bulk_delete_concurrency",
                                "setup_mode",
                                "pre_delete_collection",
                                "metadata_indexing_include",
                                "metadata_indexing_exclude",
                                "collection_indexing_policy",
                                "number_of_results",
                                "search_type",
                                "search_score_threshold",
                                "search_filter"
                            ],
                            "frozen": false,
                            "icon": "AstraDB",
                            "legacy": false,
                            "lf_version": "1.1.1",
                            "metadata": {},
                            "minimized": false,
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Search Results",
                                    "method": "search_documents",
                                    "name": "search_results",
                                    "required_inputs": [
                                        "api_endpoint",
                                        "collection_name",
                                        "token"
                                    ],
                                    "selected": "Data",
                                    "types": [
                                        "Data"
                                    ],
                                    "value": "__UNDEFINED__"
                                },
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "DataFrame",
                                    "method": "as_dataframe",
                                    "name": "dataframe",
                                    "required_inputs": [],
                                    "selected": "DataFrame",
                                    "types": [
                                        "DataFrame"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "api_endpoint": {
                                    "_input_type": "SecretStrInput",
                                    "advanced": false,
                                    "display_name": "API Endpoint",
                                    "dynamic": false,
                                    "info": "API endpoint URL for the Astra DB service.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "load_from_db": true,
                                    "name": "api_endpoint",
                                    "password": true,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": "ASTRA_DB_API_ENDPOINT"
                                },
                                "batch_size": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Batch Size",
                                    "dynamic": false,
                                    "info": "Optional number of data to process in a single batch.",
                                    "list": false,
                                    "name": "batch_size",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": ""
                                },
                                "bulk_delete_concurrency": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Bulk Delete Concurrency",
                                    "dynamic": false,
                                    "info": "Optional concurrency level for bulk delete operations.",
                                    "list": false,
                                    "name": "bulk_delete_concurrency",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": ""
                                },
                                "bulk_insert_batch_concurrency": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Bulk Insert Batch Concurrency",
                                    "dynamic": false,
                                    "info": "Optional concurrency level for bulk insert operations.",
                                    "list": false,
                                    "name": "bulk_insert_batch_concurrency",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": ""
                                },
                                "bulk_insert_overwrite_concurrency": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Bulk Insert Overwrite Concurrency",
                                    "dynamic": false,
                                    "info": "Optional concurrency level for bulk insert operations that overwrite existing data.",
                                    "list": false,
                                    "name": "bulk_insert_overwrite_concurrency",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": ""
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "import os\n\nimport orjson\nfrom astrapy.admin import parse_api_endpoint\n\nfrom langflow.base.vectorstores.model import LCVectorStoreComponent, check_cached_vector_store\nfrom langflow.helpers import docs_to_data\nfrom langflow.inputs import (\n    BoolInput,\n    DictInput,\n    DropdownInput,\n    FloatInput,\n    HandleInput,\n    IntInput,\n    SecretStrInput,\n    StrInput,\n)\nfrom langflow.schema import Data\n\n\nclass AstraDBGraphVectorStoreComponent(LCVectorStoreComponent):\n    display_name: str = \"Astra DB Graph\"\n    description: str = \"Implementation of Graph Vector Store using Astra DB\"\n    name = \"AstraDBGraph\"\n    icon: str = \"AstraDB\"\n\n    inputs = [\n        SecretStrInput(\n            name=\"token\",\n            display_name=\"Astra DB Application Token\",\n            info=\"Authentication token for accessing Astra DB.\",\n            value=\"ASTRA_DB_APPLICATION_TOKEN\",\n            required=True,\n            advanced=os.getenv(\"ASTRA_ENHANCED\", \"false\").lower() == \"true\",\n        ),\n        SecretStrInput(\n            name=\"api_endpoint\",\n            display_name=\"Database\" if os.getenv(\"ASTRA_ENHANCED\", \"false\").lower() == \"true\" else \"API Endpoint\",\n            info=\"API endpoint URL for the Astra DB service.\",\n            value=\"ASTRA_DB_API_ENDPOINT\",\n            required=True,\n        ),\n        StrInput(\n            name=\"collection_name\",\n            display_name=\"Collection Name\",\n            info=\"The name of the collection within Astra DB where the vectors will be stored.\",\n            required=True,\n        ),\n        StrInput(\n            name=\"metadata_incoming_links_key\",\n            display_name=\"Metadata incoming links key\",\n            info=\"Metadata key used for incoming links.\",\n            advanced=True,\n        ),\n        *LCVectorStoreComponent.inputs,\n        StrInput(\n            name=\"keyspace\",\n            display_name=\"Keyspace\",\n            info=\"Optional keyspace within Astra DB to use for the collection.\",\n            advanced=True,\n        ),\n        HandleInput(\n            name=\"embedding_model\",\n            display_name=\"Embedding Model\",\n            input_types=[\"Embeddings\"],\n            info=\"Allows an embedding model configuration.\",\n        ),\n        DropdownInput(\n            name=\"metric\",\n            display_name=\"Metric\",\n            info=\"Optional distance metric for vector comparisons in the vector store.\",\n            options=[\"cosine\", \"dot_product\", \"euclidean\"],\n            value=\"cosine\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"batch_size\",\n            display_name=\"Batch Size\",\n            info=\"Optional number of data to process in a single batch.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"bulk_insert_batch_concurrency\",\n            display_name=\"Bulk Insert Batch Concurrency\",\n            info=\"Optional concurrency level for bulk insert operations.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"bulk_insert_overwrite_concurrency\",\n            display_name=\"Bulk Insert Overwrite Concurrency\",\n            info=\"Optional concurrency level for bulk insert operations that overwrite existing data.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"bulk_delete_concurrency\",\n            display_name=\"Bulk Delete Concurrency\",\n            info=\"Optional concurrency level for bulk delete operations.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"setup_mode\",\n            display_name=\"Setup Mode\",\n            info=\"Configuration mode for setting up the vector store, with options like 'Sync', or 'Off'.\",\n            options=[\"Sync\", \"Off\"],\n            advanced=True,\n            value=\"Sync\",\n        ),\n        BoolInput(\n            name=\"pre_delete_collection\",\n            display_name=\"Pre Delete Collection\",\n            info=\"Boolean flag to determine whether to delete the collection before creating a new one.\",\n            advanced=True,\n            value=False,\n        ),\n        StrInput(\n            name=\"metadata_indexing_include\",\n            display_name=\"Metadata Indexing Include\",\n            info=\"Optional list of metadata fields to include in the indexing.\",\n            advanced=True,\n            list=True,\n        ),\n        StrInput(\n            name=\"metadata_indexing_exclude\",\n            display_name=\"Metadata Indexing Exclude\",\n            info=\"Optional list of metadata fields to exclude from the indexing.\",\n            advanced=True,\n            list=True,\n        ),\n        StrInput(\n            name=\"collection_indexing_policy\",\n            display_name=\"Collection Indexing Policy\",\n            info='Optional JSON string for the \"indexing\" field of the collection. '\n            \"See https://docs.datastax.com/en/astra-db-serverless/api-reference/collections.html#the-indexing-option\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"Number of results to return.\",\n            advanced=True,\n            value=4,\n        ),\n        DropdownInput(\n            name=\"search_type\",\n            display_name=\"Search Type\",\n            info=\"Search type to use\",\n            options=[\n                \"Similarity\",\n                \"Similarity with score threshold\",\n                \"MMR (Max Marginal Relevance)\",\n                \"Graph Traversal\",\n                \"MMR (Max Marginal Relevance) Graph Traversal\",\n            ],\n            value=\"MMR (Max Marginal Relevance) Graph Traversal\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"search_score_threshold\",\n            display_name=\"Search Score Threshold\",\n            info=\"Minimum similarity score threshold for search results. \"\n            \"(when using 'Similarity with score threshold')\",\n            value=0,\n            advanced=True,\n        ),\n        DictInput(\n            name=\"search_filter\",\n            display_name=\"Search Metadata Filter\",\n            info=\"Optional dictionary of filters to apply to the search query.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n\n    @check_cached_vector_store\n    def build_vector_store(self):\n        try:\n            from langchain_astradb import AstraDBGraphVectorStore\n            from langchain_astradb.utils.astradb import SetupMode\n        except ImportError as e:\n            msg = (\n                \"Could not import langchain Astra DB integration package. \"\n                \"Please install it with `pip install langchain-astradb`.\"\n            )\n            raise ImportError(msg) from e\n\n        try:\n            if not self.setup_mode:\n                self.setup_mode = self._inputs[\"setup_mode\"].options[0]\n\n            setup_mode_value = SetupMode[self.setup_mode.upper()]\n        except KeyError as e:\n            msg = f\"Invalid setup mode: {self.setup_mode}\"\n            raise ValueError(msg) from e\n\n        try:\n            self.log(f\"Initializing Graph Vector Store {self.collection_name}\")\n\n            vector_store = AstraDBGraphVectorStore(\n                embedding=self.embedding_model,\n                collection_name=self.collection_name,\n                metadata_incoming_links_key=self.metadata_incoming_links_key or \"incoming_links\",\n                token=self.token,\n                api_endpoint=self.api_endpoint,\n                namespace=self.keyspace or None,\n                environment=parse_api_endpoint(self.api_endpoint).environment if self.api_endpoint else None,\n                metric=self.metric or None,\n                batch_size=self.batch_size or None,\n                bulk_insert_batch_concurrency=self.bulk_insert_batch_concurrency or None,\n                bulk_insert_overwrite_concurrency=self.bulk_insert_overwrite_concurrency or None,\n                bulk_delete_concurrency=self.bulk_delete_concurrency or None,\n                setup_mode=setup_mode_value,\n                pre_delete_collection=self.pre_delete_collection,\n                metadata_indexing_include=[s for s in self.metadata_indexing_include if s] or None,\n                metadata_indexing_exclude=[s for s in self.metadata_indexing_exclude if s] or None,\n                collection_indexing_policy=orjson.loads(self.collection_indexing_policy.encode(\"utf-8\"))\n                if self.collection_indexing_policy\n                else None,\n            )\n        except Exception as e:\n            msg = f\"Error initializing AstraDBGraphVectorStore: {e}\"\n            raise ValueError(msg) from e\n\n        self.log(f\"Vector Store initialized: {vector_store.astra_env.collection_name}\")\n        self._add_documents_to_vector_store(vector_store)\n\n        return vector_store\n\n    def _add_documents_to_vector_store(self, vector_store) -> None:\n        documents = []\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                documents.append(_input.to_lc_document())\n            else:\n                msg = \"Vector Store Inputs must be Data objects.\"\n                raise TypeError(msg)\n\n        if documents:\n            self.log(f\"Adding {len(documents)} documents to the Vector Store.\")\n            try:\n                vector_store.add_documents(documents)\n            except Exception as e:\n                msg = f\"Error adding documents to AstraDBGraphVectorStore: {e}\"\n                raise ValueError(msg) from e\n        else:\n            self.log(\"No documents to add to the Vector Store.\")\n\n    def _map_search_type(self) -> str:\n        match self.search_type:\n            case \"Similarity\":\n                return \"similarity\"\n            case \"Similarity with score threshold\":\n                return \"similarity_score_threshold\"\n            case \"MMR (Max Marginal Relevance)\":\n                return \"mmr\"\n            case \"Graph Traversal\":\n                return \"traversal\"\n            case \"MMR (Max Marginal Relevance) Graph Traversal\":\n                return \"mmr_traversal\"\n            case _:\n                return \"similarity\"\n\n    def _build_search_args(self):\n        args = {\n            \"k\": self.number_of_results,\n            \"score_threshold\": self.search_score_threshold,\n        }\n\n        if self.search_filter:\n            clean_filter = {k: v for k, v in self.search_filter.items() if k and v}\n            if len(clean_filter) > 0:\n                args[\"filter\"] = clean_filter\n        return args\n\n    def search_documents(self, vector_store=None) -> list[Data]:\n        if not vector_store:\n            vector_store = self.build_vector_store()\n\n        self.log(\"Searching for documents in AstraDBGraphVectorStore.\")\n        self.log(f\"Search query: {self.search_query}\")\n        self.log(f\"Search type: {self.search_type}\")\n        self.log(f\"Number of results: {self.number_of_results}\")\n\n        if self.search_query and isinstance(self.search_query, str) and self.search_query.strip():\n            try:\n                search_type = self._map_search_type()\n                search_args = self._build_search_args()\n\n                docs = vector_store.search(query=self.search_query, search_type=search_type, **search_args)\n\n                # Drop links from the metadata. At this point the links don't add any value for building the\n                # context and haven't been restored to json which causes the conversion to fail.\n                self.log(\"Removing links from metadata.\")\n                for doc in docs:\n                    if \"links\" in doc.metadata:\n                        doc.metadata.pop(\"links\")\n\n            except Exception as e:\n                msg = f\"Error performing search in AstraDBGraphVectorStore: {e}\"\n                raise ValueError(msg) from e\n\n            self.log(f\"Retrieved documents: {len(docs)}\")\n\n            data = docs_to_data(docs)\n\n            self.log(f\"Converted documents to data: {len(data)}\")\n\n            self.status = data\n            return data\n        self.log(\"No search input provided. Skipping search.\")\n        return []\n\n    def get_retriever_kwargs(self):\n        search_args = self._build_search_args()\n        return {\n            \"search_type\": self._map_search_type(),\n            \"search_kwargs\": search_args,\n        }\n"
                                },
                                "collection_indexing_policy": {
                                    "_input_type": "StrInput",
                                    "advanced": true,
                                    "display_name": "Collection Indexing Policy",
                                    "dynamic": false,
                                    "info": "Optional JSON string for the \"indexing\" field of the collection. See https://docs.datastax.com/en/astra-db-serverless/api-reference/collections.html#the-indexing-option",
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "collection_indexing_policy",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "collection_name": {
                                    "_input_type": "StrInput",
                                    "advanced": false,
                                    "display_name": "Collection Name",
                                    "dynamic": false,
                                    "info": "The name of the collection within Astra DB where the vectors will be stored.",
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "collection_name",
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "haskell_chunked"
                                },
                                "embedding_model": {
                                    "_input_type": "HandleInput",
                                    "advanced": false,
                                    "display_name": "Embedding Model",
                                    "dynamic": false,
                                    "info": "Allows an embedding model configuration.",
                                    "input_types": [
                                        "Embeddings"
                                    ],
                                    "list": false,
                                    "name": "embedding_model",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "other",
                                    "value": ""
                                },
                                "ingest_data": {
                                    "_input_type": "DataInput",
                                    "advanced": false,
                                    "display_name": "Ingest Data",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Data"
                                    ],
                                    "list": false,
                                    "name": "ingest_data",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "other",
                                    "value": ""
                                },
                                "keyspace": {
                                    "_input_type": "StrInput",
                                    "advanced": true,
                                    "display_name": "Keyspace",
                                    "dynamic": false,
                                    "info": "Optional keyspace within Astra DB to use for the collection.",
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "keyspace",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "metadata_incoming_links_key": {
                                    "_input_type": "StrInput",
                                    "advanced": true,
                                    "display_name": "Metadata incoming links key",
                                    "dynamic": false,
                                    "info": "Metadata key used for incoming links.",
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "metadata_incoming_links_key",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "metadata_indexing_exclude": {
                                    "_input_type": "StrInput",
                                    "advanced": true,
                                    "display_name": "Metadata Indexing Exclude",
                                    "dynamic": false,
                                    "info": "Optional list of metadata fields to exclude from the indexing.",
                                    "list": true,
                                    "load_from_db": false,
                                    "name": "metadata_indexing_exclude",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": [
                                        ""
                                    ]
                                },
                                "metadata_indexing_include": {
                                    "_input_type": "StrInput",
                                    "advanced": true,
                                    "display_name": "Metadata Indexing Include",
                                    "dynamic": false,
                                    "info": "Optional list of metadata fields to include in the indexing.",
                                    "list": true,
                                    "load_from_db": false,
                                    "name": "metadata_indexing_include",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "metric": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Metric",
                                    "dynamic": false,
                                    "info": "Optional distance metric for vector comparisons in the vector store.",
                                    "name": "metric",
                                    "options": [
                                        "cosine",
                                        "dot_product",
                                        "euclidean"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "cosine"
                                },
                                "number_of_results": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Number of Results",
                                    "dynamic": false,
                                    "info": "Number of results to return.",
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "number_of_results",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 10
                                },
                                "pre_delete_collection": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Pre Delete Collection",
                                    "dynamic": false,
                                    "info": "Boolean flag to determine whether to delete the collection before creating a new one.",
                                    "list": false,
                                    "name": "pre_delete_collection",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "search_filter": {
                                    "_input_type": "DictInput",
                                    "advanced": true,
                                    "display_name": "Search Metadata Filter",
                                    "dynamic": false,
                                    "info": "Optional dictionary of filters to apply to the search query.",
                                    "list": true,
                                    "name": "search_filter",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "type": "dict",
                                    "value": {}
                                },
                                "search_query": {
                                    "_input_type": "MultilineInput",
                                    "advanced": false,
                                    "display_name": "Search Query",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "search_query",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": true,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "search_score_threshold": {
                                    "_input_type": "FloatInput",
                                    "advanced": true,
                                    "display_name": "Search Score Threshold",
                                    "dynamic": false,
                                    "info": "Minimum similarity score threshold for search results. (when using 'Similarity with score threshold')",
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "search_score_threshold",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "float",
                                    "value": -2
                                },
                                "search_type": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Search Type",
                                    "dynamic": false,
                                    "info": "Search type to use",
                                    "name": "search_type",
                                    "options": [
                                        "Similarity",
                                        "Similarity with score threshold",
                                        "MMR (Max Marginal Relevance)",
                                        "Graph Traversal",
                                        "MMR (Max Marginal Relevance) Graph Traversal"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "MMR (Max Marginal Relevance) Graph Traversal"
                                },
                                "setup_mode": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Setup Mode",
                                    "dynamic": false,
                                    "info": "Configuration mode for setting up the vector store, with options like 'Sync', or 'Off'.",
                                    "name": "setup_mode",
                                    "options": [
                                        "Sync",
                                        "Off"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Sync"
                                },
                                "token": {
                                    "_input_type": "SecretStrInput",
                                    "advanced": false,
                                    "display_name": "Astra DB Application Token",
                                    "dynamic": false,
                                    "info": "Authentication token for accessing Astra DB.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "load_from_db": true,
                                    "name": "token",
                                    "password": true,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": "ASTRA_DB_APPLICATION_TOKEN"
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "AstraDBGraph"
                    },
                    "dragging": false,
                    "id": "AstraDBGraph-LdFgZ",
                    "measured": {
                        "height": 634,
                        "width": 320
                    },
                    "position": {
                        "x": -1277.8700822899038,
                        "y": 7080.542929356194
                    },
                    "selected": false,
                    "type": "genericNode"
                },
                {
                    "data": {
                        "description": "Convert Data into plain text following a specified template.",
                        "display_name": "Parse Data",
                        "id": "ParseData-KSu0D",
                        "node": {
                            "base_classes": [
                                "Data",
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Convert Data into plain text following a specified template.",
                            "display_name": "Parse Data",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "data",
                                "template",
                                "sep"
                            ],
                            "frozen": false,
                            "icon": "message-square",
                            "legacy": false,
                            "lf_version": "1.1.1",
                            "metadata": {},
                            "minimized": false,
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "parse_data",
                                    "name": "text",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                },
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Data List",
                                    "method": "parse_data_as_list",
                                    "name": "data_list",
                                    "selected": "Data",
                                    "types": [
                                        "Data"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text, data_to_text_list\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Data to Message\"\n    description = \"Convert Data objects into Messages using any {field_name} from input data.\"\n    icon = \"message-square\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\", is_list=True, required=True),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n            required=True,\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"text\",\n            info=\"Data as a single Message, with each input Data separated by Separator\",\n            method=\"parse_data\",\n        ),\n        Output(\n            display_name=\"Data List\",\n            name=\"data_list\",\n            info=\"Data as a list of new Data, each having `text` formatted by Template\",\n            method=\"parse_data_as_list\",\n        ),\n    ]\n\n    def _clean_args(self) -> tuple[list[Data], str, str]:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n        sep = self.sep\n        return data, template, sep\n\n    def parse_data(self) -> Message:\n        data, template, sep = self._clean_args()\n        result_string = data_to_text(template, data, sep)\n        self.status = result_string\n        return Message(text=result_string)\n\n    def parse_data_as_list(self) -> list[Data]:\n        data, template, _ = self._clean_args()\n        text_list, data_list = data_to_text_list(template, data)\n        for item, text in zip(data_list, text_list, strict=True):\n            item.set_text(text)\n        self.status = data_list\n        return data_list\n"
                                },
                                "data": {
                                    "_input_type": "DataInput",
                                    "advanced": false,
                                    "display_name": "Data",
                                    "dynamic": false,
                                    "info": "The data to convert to text.",
                                    "input_types": [
                                        "Data"
                                    ],
                                    "list": true,
                                    "name": "data",
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "other",
                                    "value": ""
                                },
                                "sep": {
                                    "_input_type": "StrInput",
                                    "advanced": true,
                                    "display_name": "Separator",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "sep",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "\n"
                                },
                                "template": {
                                    "_input_type": "MultilineInput",
                                    "advanced": false,
                                    "display_name": "Template",
                                    "dynamic": false,
                                    "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "template",
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "{data}"
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "ParseData"
                    },
                    "dragging": false,
                    "id": "ParseData-KSu0D",
                    "measured": {
                        "height": 342,
                        "width": 320
                    },
                    "position": {
                        "x": -711.6072978271402,
                        "y": 7008.616446963303
                    },
                    "selected": false,
                    "type": "genericNode"
                },
                {
                    "data": {
                        "id": "Prompt-YYjDd",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {
                                "template": [
                                    "context",
                                    "question"
                                ]
                            },
                            "description": "Create a prompt template with dynamic variables.",
                            "display_name": "Prompt",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "template",
                                "tool_placeholder"
                            ],
                            "frozen": false,
                            "icon": "prompts",
                            "legacy": false,
                            "lf_version": "1.1.1",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Prompt Message",
                                    "method": "build_prompt",
                                    "name": "prompt",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import MessageTextInput, Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            tool_mode=True,\n            advanced=True,\n            info=\"A placeholder input for tool mode.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    async def update_frontend_node(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = await super().update_frontend_node(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n"
                                },
                                "context": {
                                    "advanced": false,
                                    "display_name": "context",
                                    "dynamic": false,
                                    "field_type": "str",
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "input_types": [
                                        "Message",
                                        "Text"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "context",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": ""
                                },
                                "question": {
                                    "advanced": false,
                                    "display_name": "question",
                                    "dynamic": false,
                                    "field_type": "str",
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "input_types": [
                                        "Message",
                                        "Text"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "question",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": ""
                                },
                                "template": {
                                    "_input_type": "PromptInput",
                                    "advanced": false,
                                    "display_name": "Template",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "template",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "type": "prompt",
                                    "value": "{context}\n\n---\n\nGiven the context above, answer the question as best as possible. If there isn't information on the context about the question, respond by saying so in a funny way\n\nQuestion: {question}\n\nAnswer: "
                                },
                                "tool_placeholder": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Tool Placeholder",
                                    "dynamic": false,
                                    "info": "A placeholder input for tool mode.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "tool_placeholder",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": true,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "Prompt"
                    },
                    "dragging": false,
                    "id": "Prompt-YYjDd",
                    "measured": {
                        "height": 421,
                        "width": 320
                    },
                    "position": {
                        "x": -241.95389238895368,
                        "y": 7132.715577428476
                    },
                    "selected": false,
                    "type": "genericNode"
                },
                {
                    "data": {
                        "id": "OpenAIModel-4odsT",
                        "node": {
                            "base_classes": [
                                "LanguageModel",
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Generates text using OpenAI LLMs.",
                            "display_name": "OpenAI",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "input_value",
                                "system_message",
                                "stream",
                                "max_tokens",
                                "model_kwargs",
                                "json_mode",
                                "model_name",
                                "openai_api_base",
                                "api_key",
                                "temperature",
                                "seed"
                            ],
                            "frozen": false,
                            "icon": "OpenAI",
                            "legacy": false,
                            "lf_version": "1.1.1",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "text_response",
                                    "name": "text_output",
                                    "required_inputs": [],
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                },
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Language Model",
                                    "method": "build_model",
                                    "name": "model_output",
                                    "required_inputs": [
                                        "api_key"
                                    ],
                                    "selected": "LanguageModel",
                                    "types": [
                                        "LanguageModel"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "api_key": {
                                    "_input_type": "SecretStrInput",
                                    "advanced": false,
                                    "display_name": "OpenAI API Key",
                                    "dynamic": false,
                                    "info": "The OpenAI API Key to use for the OpenAI model.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "load_from_db": true,
                                    "name": "api_key",
                                    "password": true,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": "OPENAI_API_KEY"
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.openai_constants import OPENAI_MODEL_NAMES\nfrom langflow.field_typing import LanguageModel\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.inputs import BoolInput, DictInput, DropdownInput, IntInput, SecretStrInput, SliderInput, StrInput\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIModel\"\n\n    inputs = [\n        *LCModelComponent._base_inputs,\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            range_spec=RangeSpec(min=0, max=128000),\n        ),\n        DictInput(\n            name=\"model_kwargs\",\n            display_name=\"Model Kwargs\",\n            advanced=True,\n            info=\"Additional keyword arguments to pass to the model.\",\n        ),\n        BoolInput(\n            name=\"json_mode\",\n            display_name=\"JSON Mode\",\n            advanced=True,\n            info=\"If True, it will output JSON regardless of passing a schema.\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            advanced=False,\n            options=OPENAI_MODEL_NAMES,\n            value=OPENAI_MODEL_NAMES[0],\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. \"\n            \"Defaults to https://api.openai.com/v1. \"\n            \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n            required=True,\n        ),\n        SliderInput(\n            name=\"temperature\", display_name=\"Temperature\", value=0.1, range_spec=RangeSpec(min=0, max=2, step=0.01)\n        ),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        openai_api_key = self.api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\n        json_mode = self.json_mode\n        seed = self.seed\n\n        api_key = SecretStr(openai_api_key).get_secret_value() if openai_api_key else None\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature if temperature is not None else 0.1,\n            seed=seed,\n        )\n        if json_mode:\n            output = output.bind(response_format={\"type\": \"json_object\"})\n\n        return output\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"Get a message from an OpenAI exception.\n\n        Args:\n            e (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return None\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")\n            if message:\n                return message\n        return None\n"
                                },
                                "input_value": {
                                    "_input_type": "MessageInput",
                                    "advanced": false,
                                    "display_name": "Input",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "json_mode": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "JSON Mode",
                                    "dynamic": false,
                                    "info": "If True, it will output JSON regardless of passing a schema.",
                                    "list": false,
                                    "name": "json_mode",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "max_tokens": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Max Tokens",
                                    "dynamic": false,
                                    "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                                    "list": false,
                                    "name": "max_tokens",
                                    "placeholder": "",
                                    "range_spec": {
                                        "max": 128000,
                                        "min": 0,
                                        "step": 0.1,
                                        "step_type": "float"
                                    },
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": ""
                                },
                                "model_kwargs": {
                                    "_input_type": "DictInput",
                                    "advanced": true,
                                    "display_name": "Model Kwargs",
                                    "dynamic": false,
                                    "info": "Additional keyword arguments to pass to the model.",
                                    "list": false,
                                    "name": "model_kwargs",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "type": "dict",
                                    "value": {}
                                },
                                "model_name": {
                                    "_input_type": "DropdownInput",
                                    "advanced": false,
                                    "combobox": false,
                                    "display_name": "Model Name",
                                    "dynamic": false,
                                    "info": "",
                                    "name": "model_name",
                                    "options": [
                                        "gpt-4o-mini",
                                        "gpt-4o",
                                        "gpt-4-turbo",
                                        "gpt-4-turbo-preview",
                                        "gpt-4",
                                        "gpt-3.5-turbo",
                                        "gpt-3.5-turbo-0125"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "gpt-4-turbo"
                                },
                                "openai_api_base": {
                                    "_input_type": "StrInput",
                                    "advanced": true,
                                    "display_name": "OpenAI API Base",
                                    "dynamic": false,
                                    "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "openai_api_base",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "seed": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Seed",
                                    "dynamic": false,
                                    "info": "The seed controls the reproducibility of the job.",
                                    "list": false,
                                    "name": "seed",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 1
                                },
                                "stream": {
                                    "_input_type": "BoolInput",
                                    "advanced": false,
                                    "display_name": "Stream",
                                    "dynamic": false,
                                    "info": "Stream the response from the model. Streaming works only in Chat.",
                                    "list": false,
                                    "name": "stream",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "system_message": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": false,
                                    "display_name": "System Message",
                                    "dynamic": false,
                                    "info": "System message to pass to the model.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "system_message",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "temperature": {
                                    "_input_type": "SliderInput",
                                    "advanced": false,
                                    "display_name": "Temperature",
                                    "dynamic": false,
                                    "info": "",
                                    "max_label": "",
                                    "max_label_icon": "",
                                    "min_label": "",
                                    "min_label_icon": "",
                                    "name": "temperature",
                                    "placeholder": "",
                                    "range_spec": {
                                        "max": 2,
                                        "min": 0,
                                        "step": 0.01,
                                        "step_type": "float"
                                    },
                                    "required": false,
                                    "show": true,
                                    "slider_buttons": false,
                                    "slider_buttons_options": [],
                                    "slider_input": false,
                                    "title_case": false,
                                    "type": "slider",
                                    "value": 0.1
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "OpenAIModel"
                    },
                    "dragging": false,
                    "id": "OpenAIModel-4odsT",
                    "measured": {
                        "height": 656,
                        "width": 320
                    },
                    "position": {
                        "x": 317.8221390146513,
                        "y": 7078.366528905622
                    },
                    "selected": false,
                    "type": "genericNode"
                },
                {
                    "data": {
                        "id": "ChatOutput-7mjeM",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Display a chat message in the Playground.",
                            "display_name": "Chat Output",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "input_value",
                                "should_store_message",
                                "sender",
                                "sender_name",
                                "session_id",
                                "data_template",
                                "background_color",
                                "chat_icon",
                                "text_color"
                            ],
                            "frozen": false,
                            "icon": "MessagesSquare",
                            "legacy": false,
                            "lf_version": "1.1.1",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "message_response",
                                    "name": "message",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "background_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Background Color",
                                    "dynamic": false,
                                    "info": "The background color of the icon.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "background_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "chat_icon": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Icon",
                                    "dynamic": false,
                                    "info": "The icon of the message.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "chat_icon",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, MessageInput, MessageTextInput, Output\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        MessageInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            source_dict[\"source\"] = source\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n        background_color = self.background_color\n        text_color = self.text_color\n        if self.chat_icon:\n            icon = self.chat_icon\n        message = self.input_value if isinstance(self.input_value, Message) else Message(text=self.input_value)\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n        message.properties.icon = icon\n        message.properties.background_color = background_color\n        message.properties.text_color = text_color\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n"
                                },
                                "data_template": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Data Template",
                                    "dynamic": false,
                                    "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "data_template",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "{text}"
                                },
                                "input_value": {
                                    "_input_type": "MessageInput",
                                    "advanced": false,
                                    "display_name": "Text",
                                    "dynamic": false,
                                    "info": "Message to be passed as output.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "sender": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Sender Type",
                                    "dynamic": false,
                                    "info": "Type of sender.",
                                    "name": "sender",
                                    "options": [
                                        "Machine",
                                        "User"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Machine"
                                },
                                "sender_name": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Sender Name",
                                    "dynamic": false,
                                    "info": "Name of the sender.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "sender_name",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "AI"
                                },
                                "session_id": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Session ID",
                                    "dynamic": false,
                                    "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "session_id",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "should_store_message": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Store Messages",
                                    "dynamic": false,
                                    "info": "Store the message in the history.",
                                    "list": false,
                                    "name": "should_store_message",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "text_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Text Color",
                                    "dynamic": false,
                                    "info": "The text color of the name",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "text_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "ChatOutput"
                    },
                    "dragging": false,
                    "id": "ChatOutput-7mjeM",
                    "measured": {
                        "height": 230,
                        "width": 320
                    },
                    "position": {
                        "x": 804.9181649370599,
                        "y": 7243.316205548675
                    },
                    "selected": false,
                    "type": "genericNode"
                },
                {
                    "data": {
                        "id": "URL-jjkEI",
                        "node": {
                            "base_classes": [
                                "Data",
                                "Message"
                            ],
                            "beta": false,
                            "category": "data",
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Fetch content from one or more URLs.",
                            "display_name": "URL",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "urls",
                                "format"
                            ],
                            "frozen": false,
                            "icon": "layout-template",
                            "key": "URL",
                            "legacy": false,
                            "lf_version": "1.1.1",
                            "metadata": {},
                            "minimized": false,
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Data",
                                    "method": "fetch_content",
                                    "name": "data",
                                    "selected": "Data",
                                    "types": [
                                        "Data"
                                    ],
                                    "value": "__UNDEFINED__"
                                },
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "fetch_content_text",
                                    "name": "text",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                },
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "DataFrame",
                                    "method": "as_dataframe",
                                    "name": "dataframe",
                                    "selected": "DataFrame",
                                    "types": [
                                        "DataFrame"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "score": 2.220446049250313e-16,
                            "template": {
                                "_type": "Component",
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "import re\n\nfrom langchain_community.document_loaders import AsyncHtmlLoader, WebBaseLoader\n\nfrom langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.schema import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\n\n\nclass URLComponent(Component):\n    display_name = \"URL\"\n    description = \"Load and retrive data from specified URLs.\"\n    icon = \"layout-template\"\n    name = \"URL\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"urls\",\n            display_name=\"URLs\",\n            is_list=True,\n            tool_mode=True,\n            placeholder=\"Enter a URL...\",\n            list_add_label=\"Add URL\",\n        ),\n        DropdownInput(\n            name=\"format\",\n            display_name=\"Output Format\",\n            info=\"Output Format. Use 'Text' to extract the text from the HTML or 'Raw HTML' for the raw HTML content.\",\n            options=[\"Text\", \"Raw HTML\"],\n            value=\"Text\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"fetch_content\"),\n        Output(display_name=\"Message\", name=\"text\", method=\"fetch_content_text\"),\n        Output(display_name=\"DataFrame\", name=\"dataframe\", method=\"as_dataframe\"),\n    ]\n\n    def ensure_url(self, string: str) -> str:\n        \"\"\"Ensures the given string is a URL by adding 'http://' if it doesn't start with 'http://' or 'https://'.\n\n        Raises an error if the string is not a valid URL.\n\n        Parameters:\n            string (str): The string to be checked and possibly modified.\n\n        Returns:\n            str: The modified string that is ensured to be a URL.\n\n        Raises:\n            ValueError: If the string is not a valid URL.\n        \"\"\"\n        if not string.startswith((\"http://\", \"https://\")):\n            string = \"http://\" + string\n\n        # Basic URL validation regex\n        url_regex = re.compile(\n            r\"^(https?:\\/\\/)?\"  # optional protocol\n            r\"(www\\.)?\"  # optional www\n            r\"([a-zA-Z0-9.-]+)\"  # domain\n            r\"(\\.[a-zA-Z]{2,})?\"  # top-level domain\n            r\"(:\\d+)?\"  # optional port\n            r\"(\\/[^\\s]*)?$\",  # optional path\n            re.IGNORECASE,\n        )\n\n        if not url_regex.match(string):\n            msg = f\"Invalid URL: {string}\"\n            raise ValueError(msg)\n\n        return string\n\n    def fetch_content(self) -> list[Data]:\n        urls = [self.ensure_url(url.strip()) for url in self.urls if url.strip()]\n        if self.format == \"Raw HTML\":\n            loader = AsyncHtmlLoader(web_path=urls, encoding=\"utf-8\")\n        else:\n            loader = WebBaseLoader(web_paths=urls, encoding=\"utf-8\")\n        docs = loader.load()\n        data = [Data(text=doc.page_content, **doc.metadata) for doc in docs]\n        self.status = data\n        return data\n\n    def fetch_content_text(self) -> Message:\n        data = self.fetch_content()\n\n        result_string = data_to_text(\"{text}\", data)\n        self.status = result_string\n        return Message(text=result_string)\n\n    def as_dataframe(self) -> DataFrame:\n        return DataFrame(self.fetch_content())\n"
                                },
                                "format": {
                                    "_input_type": "DropdownInput",
                                    "advanced": false,
                                    "combobox": false,
                                    "display_name": "Output Format",
                                    "dynamic": false,
                                    "info": "Output Format. Use 'Text' to extract the text from the HTML or 'Raw HTML' for the raw HTML content.",
                                    "name": "format",
                                    "options": [
                                        "Text",
                                        "Raw HTML"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Raw HTML"
                                },
                                "urls": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": false,
                                    "display_name": "URLs",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": true,
                                    "load_from_db": false,
                                    "name": "urls",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": true,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": [
                                        "https://learnyouahaskell.com/introduction",
                                        "https://learnyouahaskell.com/starting-out",
                                        "https://learnyouahaskell.com/types-and-typeclasses",
                                        "https://learnyouahaskell.com/syntax-in-functions",
                                        "https://learnyouahaskell.com/recursion",
                                        "https://learnyouahaskell.com/higher-order-functions",
                                        "https://learnyouahaskell.com/modules",
                                        "https://learnyouahaskell.com/making-our-own-types-and-typeclasses",
                                        "https://learnyouahaskell.com/input-and-output",
                                        "https://learnyouahaskell.com/functionally-solving-problems",
                                        "https://learnyouahaskell.com/functors-applicative-functors-and-monoids",
                                        "https://learnyouahaskell.com/a-fistful-of-monads",
                                        "https://learnyouahaskell.com/for-a-few-monads-more",
                                        "https://learnyouahaskell.com/zippers"
                                    ]
                                }
                            },
                            "tool_mode": false
                        },
                        "showNode": true,
                        "type": "URL"
                    },
                    "dragging": false,
                    "id": "URL-jjkEI",
                    "measured": {
                        "height": 1066,
                        "width": 320
                    },
                    "position": {
                        "x": -1742.8952423980936,
                        "y": 5868.349789218463
                    },
                    "selected": false,
                    "type": "genericNode"
                },
                {
                    "data": {
                        "id": "AstraDBGraph-WPnB7",
                        "node": {
                            "base_classes": [
                                "Data"
                            ],
                            "beta": false,
                            "category": "vectorstores",
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Implementation of Graph Vector Store using Astra DB",
                            "display_name": "Astra DB Graph",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "token",
                                "api_endpoint",
                                "collection_name",
                                "metadata_incoming_links_key",
                                "search_query",
                                "ingest_data",
                                "keyspace",
                                "embedding_model",
                                "metric",
                                "batch_size",
                                "bulk_insert_batch_concurrency",
                                "bulk_insert_overwrite_concurrency",
                                "bulk_delete_concurrency",
                                "setup_mode",
                                "pre_delete_collection",
                                "metadata_indexing_include",
                                "metadata_indexing_exclude",
                                "collection_indexing_policy",
                                "number_of_results",
                                "search_type",
                                "search_score_threshold",
                                "search_filter"
                            ],
                            "frozen": false,
                            "icon": "AstraDB",
                            "key": "AstraDBGraph",
                            "legacy": false,
                            "lf_version": "1.1.1",
                            "metadata": {},
                            "minimized": false,
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Search Results",
                                    "method": "search_documents",
                                    "name": "search_results",
                                    "required_inputs": [
                                        "api_endpoint",
                                        "collection_name",
                                        "token"
                                    ],
                                    "selected": "Data",
                                    "types": [
                                        "Data"
                                    ],
                                    "value": "__UNDEFINED__"
                                },
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "DataFrame",
                                    "method": "as_dataframe",
                                    "name": "dataframe",
                                    "required_inputs": [],
                                    "selected": "DataFrame",
                                    "types": [
                                        "DataFrame"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "score": 0.13582020910317566,
                            "template": {
                                "_type": "Component",
                                "api_endpoint": {
                                    "_input_type": "SecretStrInput",
                                    "advanced": false,
                                    "display_name": "API Endpoint",
                                    "dynamic": false,
                                    "info": "API endpoint URL for the Astra DB service.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "load_from_db": true,
                                    "name": "api_endpoint",
                                    "password": true,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": "ASTRA_DB_API_ENDPOINT"
                                },
                                "batch_size": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Batch Size",
                                    "dynamic": false,
                                    "info": "Optional number of data to process in a single batch.",
                                    "list": false,
                                    "name": "batch_size",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": ""
                                },
                                "bulk_delete_concurrency": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Bulk Delete Concurrency",
                                    "dynamic": false,
                                    "info": "Optional concurrency level for bulk delete operations.",
                                    "list": false,
                                    "name": "bulk_delete_concurrency",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": ""
                                },
                                "bulk_insert_batch_concurrency": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Bulk Insert Batch Concurrency",
                                    "dynamic": false,
                                    "info": "Optional concurrency level for bulk insert operations.",
                                    "list": false,
                                    "name": "bulk_insert_batch_concurrency",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": ""
                                },
                                "bulk_insert_overwrite_concurrency": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Bulk Insert Overwrite Concurrency",
                                    "dynamic": false,
                                    "info": "Optional concurrency level for bulk insert operations that overwrite existing data.",
                                    "list": false,
                                    "name": "bulk_insert_overwrite_concurrency",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": ""
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "import os\n\nimport orjson\nfrom astrapy.admin import parse_api_endpoint\n\nfrom langflow.base.vectorstores.model import LCVectorStoreComponent, check_cached_vector_store\nfrom langflow.helpers import docs_to_data\nfrom langflow.inputs import (\n    BoolInput,\n    DictInput,\n    DropdownInput,\n    FloatInput,\n    HandleInput,\n    IntInput,\n    SecretStrInput,\n    StrInput,\n)\nfrom langflow.schema import Data\n\n\nclass AstraDBGraphVectorStoreComponent(LCVectorStoreComponent):\n    display_name: str = \"Astra DB Graph\"\n    description: str = \"Implementation of Graph Vector Store using Astra DB\"\n    name = \"AstraDBGraph\"\n    icon: str = \"AstraDB\"\n\n    inputs = [\n        SecretStrInput(\n            name=\"token\",\n            display_name=\"Astra DB Application Token\",\n            info=\"Authentication token for accessing Astra DB.\",\n            value=\"ASTRA_DB_APPLICATION_TOKEN\",\n            required=True,\n            advanced=os.getenv(\"ASTRA_ENHANCED\", \"false\").lower() == \"true\",\n        ),\n        SecretStrInput(\n            name=\"api_endpoint\",\n            display_name=\"Database\" if os.getenv(\"ASTRA_ENHANCED\", \"false\").lower() == \"true\" else \"API Endpoint\",\n            info=\"API endpoint URL for the Astra DB service.\",\n            value=\"ASTRA_DB_API_ENDPOINT\",\n            required=True,\n        ),\n        StrInput(\n            name=\"collection_name\",\n            display_name=\"Collection Name\",\n            info=\"The name of the collection within Astra DB where the vectors will be stored.\",\n            required=True,\n        ),\n        StrInput(\n            name=\"metadata_incoming_links_key\",\n            display_name=\"Metadata incoming links key\",\n            info=\"Metadata key used for incoming links.\",\n            advanced=True,\n        ),\n        *LCVectorStoreComponent.inputs,\n        StrInput(\n            name=\"keyspace\",\n            display_name=\"Keyspace\",\n            info=\"Optional keyspace within Astra DB to use for the collection.\",\n            advanced=True,\n        ),\n        HandleInput(\n            name=\"embedding_model\",\n            display_name=\"Embedding Model\",\n            input_types=[\"Embeddings\"],\n            info=\"Allows an embedding model configuration.\",\n        ),\n        DropdownInput(\n            name=\"metric\",\n            display_name=\"Metric\",\n            info=\"Optional distance metric for vector comparisons in the vector store.\",\n            options=[\"cosine\", \"dot_product\", \"euclidean\"],\n            value=\"cosine\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"batch_size\",\n            display_name=\"Batch Size\",\n            info=\"Optional number of data to process in a single batch.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"bulk_insert_batch_concurrency\",\n            display_name=\"Bulk Insert Batch Concurrency\",\n            info=\"Optional concurrency level for bulk insert operations.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"bulk_insert_overwrite_concurrency\",\n            display_name=\"Bulk Insert Overwrite Concurrency\",\n            info=\"Optional concurrency level for bulk insert operations that overwrite existing data.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"bulk_delete_concurrency\",\n            display_name=\"Bulk Delete Concurrency\",\n            info=\"Optional concurrency level for bulk delete operations.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"setup_mode\",\n            display_name=\"Setup Mode\",\n            info=\"Configuration mode for setting up the vector store, with options like 'Sync', or 'Off'.\",\n            options=[\"Sync\", \"Off\"],\n            advanced=True,\n            value=\"Sync\",\n        ),\n        BoolInput(\n            name=\"pre_delete_collection\",\n            display_name=\"Pre Delete Collection\",\n            info=\"Boolean flag to determine whether to delete the collection before creating a new one.\",\n            advanced=True,\n            value=False,\n        ),\n        StrInput(\n            name=\"metadata_indexing_include\",\n            display_name=\"Metadata Indexing Include\",\n            info=\"Optional list of metadata fields to include in the indexing.\",\n            advanced=True,\n            list=True,\n        ),\n        StrInput(\n            name=\"metadata_indexing_exclude\",\n            display_name=\"Metadata Indexing Exclude\",\n            info=\"Optional list of metadata fields to exclude from the indexing.\",\n            advanced=True,\n            list=True,\n        ),\n        StrInput(\n            name=\"collection_indexing_policy\",\n            display_name=\"Collection Indexing Policy\",\n            info='Optional JSON string for the \"indexing\" field of the collection. '\n            \"See https://docs.datastax.com/en/astra-db-serverless/api-reference/collections.html#the-indexing-option\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Results\",\n            info=\"Number of results to return.\",\n            advanced=True,\n            value=4,\n        ),\n        DropdownInput(\n            name=\"search_type\",\n            display_name=\"Search Type\",\n            info=\"Search type to use\",\n            options=[\n                \"Similarity\",\n                \"Similarity with score threshold\",\n                \"MMR (Max Marginal Relevance)\",\n                \"Graph Traversal\",\n                \"MMR (Max Marginal Relevance) Graph Traversal\",\n            ],\n            value=\"MMR (Max Marginal Relevance) Graph Traversal\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"search_score_threshold\",\n            display_name=\"Search Score Threshold\",\n            info=\"Minimum similarity score threshold for search results. \"\n            \"(when using 'Similarity with score threshold')\",\n            value=0,\n            advanced=True,\n        ),\n        DictInput(\n            name=\"search_filter\",\n            display_name=\"Search Metadata Filter\",\n            info=\"Optional dictionary of filters to apply to the search query.\",\n            advanced=True,\n            is_list=True,\n        ),\n    ]\n\n    @check_cached_vector_store\n    def build_vector_store(self):\n        try:\n            from langchain_astradb import AstraDBGraphVectorStore\n            from langchain_astradb.utils.astradb import SetupMode\n        except ImportError as e:\n            msg = (\n                \"Could not import langchain Astra DB integration package. \"\n                \"Please install it with `pip install langchain-astradb`.\"\n            )\n            raise ImportError(msg) from e\n\n        try:\n            if not self.setup_mode:\n                self.setup_mode = self._inputs[\"setup_mode\"].options[0]\n\n            setup_mode_value = SetupMode[self.setup_mode.upper()]\n        except KeyError as e:\n            msg = f\"Invalid setup mode: {self.setup_mode}\"\n            raise ValueError(msg) from e\n\n        try:\n            self.log(f\"Initializing Graph Vector Store {self.collection_name}\")\n\n            vector_store = AstraDBGraphVectorStore(\n                embedding=self.embedding_model,\n                collection_name=self.collection_name,\n                metadata_incoming_links_key=self.metadata_incoming_links_key or \"incoming_links\",\n                token=self.token,\n                api_endpoint=self.api_endpoint,\n                namespace=self.keyspace or None,\n                environment=parse_api_endpoint(self.api_endpoint).environment if self.api_endpoint else None,\n                metric=self.metric or None,\n                batch_size=self.batch_size or None,\n                bulk_insert_batch_concurrency=self.bulk_insert_batch_concurrency or None,\n                bulk_insert_overwrite_concurrency=self.bulk_insert_overwrite_concurrency or None,\n                bulk_delete_concurrency=self.bulk_delete_concurrency or None,\n                setup_mode=setup_mode_value,\n                pre_delete_collection=self.pre_delete_collection,\n                metadata_indexing_include=[s for s in self.metadata_indexing_include if s] or None,\n                metadata_indexing_exclude=[s for s in self.metadata_indexing_exclude if s] or None,\n                collection_indexing_policy=orjson.loads(self.collection_indexing_policy.encode(\"utf-8\"))\n                if self.collection_indexing_policy\n                else None,\n            )\n        except Exception as e:\n            msg = f\"Error initializing AstraDBGraphVectorStore: {e}\"\n            raise ValueError(msg) from e\n\n        self.log(f\"Vector Store initialized: {vector_store.astra_env.collection_name}\")\n        self._add_documents_to_vector_store(vector_store)\n\n        return vector_store\n\n    def _add_documents_to_vector_store(self, vector_store) -> None:\n        documents = []\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                documents.append(_input.to_lc_document())\n            else:\n                msg = \"Vector Store Inputs must be Data objects.\"\n                raise TypeError(msg)\n\n        if documents:\n            self.log(f\"Adding {len(documents)} documents to the Vector Store.\")\n            try:\n                vector_store.add_documents(documents)\n            except Exception as e:\n                msg = f\"Error adding documents to AstraDBGraphVectorStore: {e}\"\n                raise ValueError(msg) from e\n        else:\n            self.log(\"No documents to add to the Vector Store.\")\n\n    def _map_search_type(self) -> str:\n        match self.search_type:\n            case \"Similarity\":\n                return \"similarity\"\n            case \"Similarity with score threshold\":\n                return \"similarity_score_threshold\"\n            case \"MMR (Max Marginal Relevance)\":\n                return \"mmr\"\n            case \"Graph Traversal\":\n                return \"traversal\"\n            case \"MMR (Max Marginal Relevance) Graph Traversal\":\n                return \"mmr_traversal\"\n            case _:\n                return \"similarity\"\n\n    def _build_search_args(self):\n        args = {\n            \"k\": self.number_of_results,\n            \"score_threshold\": self.search_score_threshold,\n        }\n\n        if self.search_filter:\n            clean_filter = {k: v for k, v in self.search_filter.items() if k and v}\n            if len(clean_filter) > 0:\n                args[\"filter\"] = clean_filter\n        return args\n\n    def search_documents(self, vector_store=None) -> list[Data]:\n        if not vector_store:\n            vector_store = self.build_vector_store()\n\n        self.log(\"Searching for documents in AstraDBGraphVectorStore.\")\n        self.log(f\"Search query: {self.search_query}\")\n        self.log(f\"Search type: {self.search_type}\")\n        self.log(f\"Number of results: {self.number_of_results}\")\n\n        if self.search_query and isinstance(self.search_query, str) and self.search_query.strip():\n            try:\n                search_type = self._map_search_type()\n                search_args = self._build_search_args()\n\n                docs = vector_store.search(query=self.search_query, search_type=search_type, **search_args)\n\n                # Drop links from the metadata. At this point the links don't add any value for building the\n                # context and haven't been restored to json which causes the conversion to fail.\n                self.log(\"Removing links from metadata.\")\n                for doc in docs:\n                    if \"links\" in doc.metadata:\n                        doc.metadata.pop(\"links\")\n\n            except Exception as e:\n                msg = f\"Error performing search in AstraDBGraphVectorStore: {e}\"\n                raise ValueError(msg) from e\n\n            self.log(f\"Retrieved documents: {len(docs)}\")\n\n            data = docs_to_data(docs)\n\n            self.log(f\"Converted documents to data: {len(data)}\")\n\n            self.status = data\n            return data\n        self.log(\"No search input provided. Skipping search.\")\n        return []\n\n    def get_retriever_kwargs(self):\n        search_args = self._build_search_args()\n        return {\n            \"search_type\": self._map_search_type(),\n            \"search_kwargs\": search_args,\n        }\n"
                                },
                                "collection_indexing_policy": {
                                    "_input_type": "StrInput",
                                    "advanced": true,
                                    "display_name": "Collection Indexing Policy",
                                    "dynamic": false,
                                    "info": "Optional JSON string for the \"indexing\" field of the collection. See https://docs.datastax.com/en/astra-db-serverless/api-reference/collections.html#the-indexing-option",
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "collection_indexing_policy",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "collection_name": {
                                    "_input_type": "StrInput",
                                    "advanced": false,
                                    "display_name": "Collection Name",
                                    "dynamic": false,
                                    "info": "The name of the collection within Astra DB where the vectors will be stored.",
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "collection_name",
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "haskell_chunked"
                                },
                                "embedding_model": {
                                    "_input_type": "HandleInput",
                                    "advanced": false,
                                    "display_name": "Embedding Model",
                                    "dynamic": false,
                                    "info": "Allows an embedding model configuration.",
                                    "input_types": [
                                        "Embeddings"
                                    ],
                                    "list": false,
                                    "name": "embedding_model",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "other",
                                    "value": ""
                                },
                                "ingest_data": {
                                    "_input_type": "DataInput",
                                    "advanced": false,
                                    "display_name": "Ingest Data",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Data"
                                    ],
                                    "list": false,
                                    "name": "ingest_data",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "other",
                                    "value": ""
                                },
                                "keyspace": {
                                    "_input_type": "StrInput",
                                    "advanced": true,
                                    "display_name": "Keyspace",
                                    "dynamic": false,
                                    "info": "Optional keyspace within Astra DB to use for the collection.",
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "keyspace",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "metadata_incoming_links_key": {
                                    "_input_type": "StrInput",
                                    "advanced": true,
                                    "display_name": "Metadata incoming links key",
                                    "dynamic": false,
                                    "info": "Metadata key used for incoming links.",
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "metadata_incoming_links_key",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "metadata_indexing_exclude": {
                                    "_input_type": "StrInput",
                                    "advanced": true,
                                    "display_name": "Metadata Indexing Exclude",
                                    "dynamic": false,
                                    "info": "Optional list of metadata fields to exclude from the indexing.",
                                    "list": true,
                                    "load_from_db": false,
                                    "name": "metadata_indexing_exclude",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "metadata_indexing_include": {
                                    "_input_type": "StrInput",
                                    "advanced": true,
                                    "display_name": "Metadata Indexing Include",
                                    "dynamic": false,
                                    "info": "Optional list of metadata fields to include in the indexing.",
                                    "list": true,
                                    "load_from_db": false,
                                    "name": "metadata_indexing_include",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "metric": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Metric",
                                    "dynamic": false,
                                    "info": "Optional distance metric for vector comparisons in the vector store.",
                                    "name": "metric",
                                    "options": [
                                        "cosine",
                                        "dot_product",
                                        "euclidean"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "cosine"
                                },
                                "number_of_results": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Number of Results",
                                    "dynamic": false,
                                    "info": "Number of results to return.",
                                    "list": false,
                                    "name": "number_of_results",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 4
                                },
                                "pre_delete_collection": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Pre Delete Collection",
                                    "dynamic": false,
                                    "info": "Boolean flag to determine whether to delete the collection before creating a new one.",
                                    "list": false,
                                    "name": "pre_delete_collection",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "search_filter": {
                                    "_input_type": "DictInput",
                                    "advanced": true,
                                    "display_name": "Search Metadata Filter",
                                    "dynamic": false,
                                    "info": "Optional dictionary of filters to apply to the search query.",
                                    "list": true,
                                    "name": "search_filter",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "type": "dict",
                                    "value": {}
                                },
                                "search_query": {
                                    "_input_type": "MultilineInput",
                                    "advanced": false,
                                    "display_name": "Search Query",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "search_query",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": true,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "search_score_threshold": {
                                    "_input_type": "FloatInput",
                                    "advanced": true,
                                    "display_name": "Search Score Threshold",
                                    "dynamic": false,
                                    "info": "Minimum similarity score threshold for search results. (when using 'Similarity with score threshold')",
                                    "list": false,
                                    "name": "search_score_threshold",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "float",
                                    "value": 0
                                },
                                "search_type": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Search Type",
                                    "dynamic": false,
                                    "info": "Search type to use",
                                    "name": "search_type",
                                    "options": [
                                        "Similarity",
                                        "Similarity with score threshold",
                                        "MMR (Max Marginal Relevance)",
                                        "Graph Traversal",
                                        "MMR (Max Marginal Relevance) Graph Traversal"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "MMR (Max Marginal Relevance) Graph Traversal"
                                },
                                "setup_mode": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Setup Mode",
                                    "dynamic": false,
                                    "info": "Configuration mode for setting up the vector store, with options like 'Sync', or 'Off'.",
                                    "name": "setup_mode",
                                    "options": [
                                        "Sync",
                                        "Off"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Sync"
                                },
                                "token": {
                                    "_input_type": "SecretStrInput",
                                    "advanced": false,
                                    "display_name": "Astra DB Application Token",
                                    "dynamic": false,
                                    "info": "Authentication token for accessing Astra DB.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "load_from_db": true,
                                    "name": "token",
                                    "password": true,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": "ASTRA_DB_APPLICATION_TOKEN"
                                }
                            },
                            "tool_mode": false
                        },
                        "showNode": true,
                        "type": "AstraDBGraph"
                    },
                    "dragging": false,
                    "id": "AstraDBGraph-WPnB7",
                    "measured": {
                        "height": 634,
                        "width": 320
                    },
                    "position": {
                        "x": 16.3856689286402,
                        "y": 5909.200823867262
                    },
                    "selected": false,
                    "type": "genericNode"
                },
                {
                    "data": {
                        "id": "LanguageRecursiveTextSplitter-wmtIz",
                        "node": {
                            "base_classes": [
                                "Data"
                            ],
                            "beta": false,
                            "category": "langchain_utilities",
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Split text into chunks of a specified length based on language.",
                            "display_name": "Language Recursive Text Splitter",
                            "documentation": "https://docs.langflow.org/components/text-splitters#languagerecursivetextsplitter",
                            "edited": false,
                            "field_order": [
                                "chunk_size",
                                "chunk_overlap",
                                "data_input",
                                "code_language"
                            ],
                            "frozen": false,
                            "icon": "LangChain",
                            "key": "LanguageRecursiveTextSplitter",
                            "legacy": false,
                            "lf_version": "1.1.1",
                            "metadata": {},
                            "minimized": false,
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Data",
                                    "method": "transform_data",
                                    "name": "data",
                                    "required_inputs": [],
                                    "selected": "Data",
                                    "types": [
                                        "Data"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "score": 0.12416523075924112,
                            "template": {
                                "_type": "Component",
                                "chunk_overlap": {
                                    "_input_type": "IntInput",
                                    "advanced": false,
                                    "display_name": "Chunk Overlap",
                                    "dynamic": false,
                                    "info": "The amount of overlap between chunks.",
                                    "list": false,
                                    "name": "chunk_overlap",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 200
                                },
                                "chunk_size": {
                                    "_input_type": "IntInput",
                                    "advanced": false,
                                    "display_name": "Chunk Size",
                                    "dynamic": false,
                                    "info": "The maximum length of each chunk.",
                                    "list": false,
                                    "name": "chunk_size",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 1000
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from typing import Any\n\nfrom langchain_text_splitters import Language, RecursiveCharacterTextSplitter, TextSplitter\n\nfrom langflow.base.textsplitters.model import LCTextSplitterComponent\nfrom langflow.inputs import DataInput, DropdownInput, IntInput\n\n\nclass LanguageRecursiveTextSplitterComponent(LCTextSplitterComponent):\n    display_name: str = \"Language Recursive Text Splitter\"\n    description: str = \"Split text into chunks of a specified length based on language.\"\n    documentation: str = \"https://docs.langflow.org/components/text-splitters#languagerecursivetextsplitter\"\n    name = \"LanguageRecursiveTextSplitter\"\n    icon = \"LangChain\"\n\n    inputs = [\n        IntInput(\n            name=\"chunk_size\",\n            display_name=\"Chunk Size\",\n            info=\"The maximum length of each chunk.\",\n            value=1000,\n        ),\n        IntInput(\n            name=\"chunk_overlap\",\n            display_name=\"Chunk Overlap\",\n            info=\"The amount of overlap between chunks.\",\n            value=200,\n        ),\n        DataInput(\n            name=\"data_input\",\n            display_name=\"Input\",\n            info=\"The texts to split.\",\n            input_types=[\"Document\", \"Data\"],\n            required=True,\n        ),\n        DropdownInput(\n            name=\"code_language\", display_name=\"Code Language\", options=[x.value for x in Language], value=\"python\"\n        ),\n    ]\n\n    def get_data_input(self) -> Any:\n        return self.data_input\n\n    def build_text_splitter(self) -> TextSplitter:\n        return RecursiveCharacterTextSplitter.from_language(\n            language=Language(self.code_language),\n            chunk_size=self.chunk_size,\n            chunk_overlap=self.chunk_overlap,\n        )\n"
                                },
                                "code_language": {
                                    "_input_type": "DropdownInput",
                                    "advanced": false,
                                    "combobox": false,
                                    "display_name": "Code Language",
                                    "dynamic": false,
                                    "info": "",
                                    "name": "code_language",
                                    "options": [
                                        "cpp",
                                        "go",
                                        "java",
                                        "kotlin",
                                        "js",
                                        "ts",
                                        "php",
                                        "proto",
                                        "python",
                                        "rst",
                                        "ruby",
                                        "rust",
                                        "scala",
                                        "swift",
                                        "markdown",
                                        "latex",
                                        "html",
                                        "sol",
                                        "csharp",
                                        "cobol",
                                        "c",
                                        "lua",
                                        "perl",
                                        "haskell",
                                        "elixir",
                                        "powershell"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "html"
                                },
                                "data_input": {
                                    "_input_type": "DataInput",
                                    "advanced": false,
                                    "display_name": "Input",
                                    "dynamic": false,
                                    "info": "The texts to split.",
                                    "input_types": [
                                        "Document",
                                        "Data"
                                    ],
                                    "list": false,
                                    "name": "data_input",
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "other",
                                    "value": ""
                                }
                            },
                            "tool_mode": false
                        },
                        "showNode": true,
                        "type": "LanguageRecursiveTextSplitter"
                    },
                    "dragging": false,
                    "id": "LanguageRecursiveTextSplitter-wmtIz",
                    "measured": {
                        "height": 459,
                        "width": 320
                    },
                    "position": {
                        "x": -1312.6794416503267,
                        "y": 5995.335519138236
                    },
                    "selected": false,
                    "type": "genericNode"
                },
                {
                    "data": {
                        "id": "HtmlLinkExtractor-MyH7H",
                        "node": {
                            "base_classes": [
                                "Data"
                            ],
                            "beta": false,
                            "category": "langchain_utilities",
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Extract hyperlinks from HTML content.",
                            "display_name": "HTML Link Extractor",
                            "documentation": "https://python.langchain.com/v0.2/api_reference/community/graph_vectorstores/langchain_community.graph_vectorstores.extractors.html_link_extractor.HtmlLinkExtractor.html",
                            "edited": false,
                            "field_order": [
                                "kind",
                                "drop_fragments",
                                "data_input"
                            ],
                            "frozen": false,
                            "icon": "LangChain",
                            "key": "HtmlLinkExtractor",
                            "legacy": false,
                            "lf_version": "1.1.1",
                            "metadata": {},
                            "minimized": false,
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Data",
                                    "method": "transform_data",
                                    "name": "data",
                                    "required_inputs": [],
                                    "selected": "Data",
                                    "types": [
                                        "Data"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "score": 0.01857804455091699,
                            "template": {
                                "_type": "Component",
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from typing import Any\n\nfrom langchain_community.graph_vectorstores.extractors import HtmlLinkExtractor, LinkExtractorTransformer\nfrom langchain_core.documents import BaseDocumentTransformer\n\nfrom langflow.base.document_transformers.model import LCDocumentTransformerComponent\nfrom langflow.inputs import BoolInput, DataInput, StrInput\n\n\nclass HtmlLinkExtractorComponent(LCDocumentTransformerComponent):\n    display_name = \"HTML Link Extractor\"\n    description = \"Extract hyperlinks from HTML content.\"\n    documentation = \"https://python.langchain.com/v0.2/api_reference/community/graph_vectorstores/langchain_community.graph_vectorstores.extractors.html_link_extractor.HtmlLinkExtractor.html\"\n    name = \"HtmlLinkExtractor\"\n    icon = \"LangChain\"\n\n    inputs = [\n        StrInput(name=\"kind\", display_name=\"Kind of edge\", value=\"hyperlink\", required=False),\n        BoolInput(name=\"drop_fragments\", display_name=\"Drop URL fragments\", value=True, required=False),\n        DataInput(\n            name=\"data_input\",\n            display_name=\"Input\",\n            info=\"The texts from which to extract links.\",\n            input_types=[\"Document\", \"Data\"],\n            required=True,\n        ),\n    ]\n\n    def get_data_input(self) -> Any:\n        return self.data_input\n\n    def build_document_transformer(self) -> BaseDocumentTransformer:\n        return LinkExtractorTransformer(\n            [HtmlLinkExtractor(kind=self.kind, drop_fragments=self.drop_fragments).as_document_extractor()]\n        )\n"
                                },
                                "data_input": {
                                    "_input_type": "DataInput",
                                    "advanced": false,
                                    "display_name": "Input",
                                    "dynamic": false,
                                    "info": "The texts from which to extract links.",
                                    "input_types": [
                                        "Document",
                                        "Data"
                                    ],
                                    "list": false,
                                    "name": "data_input",
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "other",
                                    "value": ""
                                },
                                "drop_fragments": {
                                    "_input_type": "BoolInput",
                                    "advanced": false,
                                    "display_name": "Drop URL fragments",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "name": "drop_fragments",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "kind": {
                                    "_input_type": "StrInput",
                                    "advanced": false,
                                    "display_name": "Kind of edge",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "kind",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "hyperlink"
                                }
                            },
                            "tool_mode": false
                        },
                        "showNode": true,
                        "type": "HtmlLinkExtractor"
                    },
                    "dragging": false,
                    "id": "HtmlLinkExtractor-MyH7H",
                    "measured": {
                        "height": 317,
                        "width": 320
                    },
                    "position": {
                        "x": -819.2825457919793,
                        "y": 6116.365935466731
                    },
                    "selected": false,
                    "type": "genericNode"
                },
                {
                    "data": {
                        "id": "OpenAIEmbeddings-SoMI2",
                        "node": {
                            "base_classes": [
                                "Embeddings"
                            ],
                            "beta": false,
                            "category": "embeddings",
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Generate embeddings using OpenAI models.",
                            "display_name": "OpenAI Embeddings",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "default_headers",
                                "default_query",
                                "chunk_size",
                                "client",
                                "deployment",
                                "embedding_ctx_length",
                                "max_retries",
                                "model",
                                "model_kwargs",
                                "openai_api_key",
                                "openai_api_base",
                                "openai_api_type",
                                "openai_api_version",
                                "openai_organization",
                                "openai_proxy",
                                "request_timeout",
                                "show_progress_bar",
                                "skip_empty",
                                "tiktoken_model_name",
                                "tiktoken_enable",
                                "dimensions"
                            ],
                            "frozen": false,
                            "icon": "OpenAI",
                            "key": "OpenAIEmbeddings",
                            "legacy": false,
                            "lf_version": "1.1.1",
                            "metadata": {},
                            "minimized": false,
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Embeddings",
                                    "method": "build_embeddings",
                                    "name": "embeddings",
                                    "required_inputs": [
                                        "openai_api_key"
                                    ],
                                    "selected": "Embeddings",
                                    "types": [
                                        "Embeddings"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "score": 5.2003277518821525e-05,
                            "template": {
                                "_type": "Component",
                                "chunk_size": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Chunk Size",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "name": "chunk_size",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 1000
                                },
                                "client": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Client",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "client",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langchain_openai import OpenAIEmbeddings\n\nfrom langflow.base.embeddings.model import LCEmbeddingsModel\nfrom langflow.base.models.openai_constants import OPENAI_EMBEDDING_MODEL_NAMES\nfrom langflow.field_typing import Embeddings\nfrom langflow.io import BoolInput, DictInput, DropdownInput, FloatInput, IntInput, MessageTextInput, SecretStrInput\n\n\nclass OpenAIEmbeddingsComponent(LCEmbeddingsModel):\n    display_name = \"OpenAI Embeddings\"\n    description = \"Generate embeddings using OpenAI models.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIEmbeddings\"\n\n    inputs = [\n        DictInput(\n            name=\"default_headers\",\n            display_name=\"Default Headers\",\n            advanced=True,\n            info=\"Default headers to use for the API request.\",\n        ),\n        DictInput(\n            name=\"default_query\",\n            display_name=\"Default Query\",\n            advanced=True,\n            info=\"Default query parameters to use for the API request.\",\n        ),\n        IntInput(name=\"chunk_size\", display_name=\"Chunk Size\", advanced=True, value=1000),\n        MessageTextInput(name=\"client\", display_name=\"Client\", advanced=True),\n        MessageTextInput(name=\"deployment\", display_name=\"Deployment\", advanced=True),\n        IntInput(name=\"embedding_ctx_length\", display_name=\"Embedding Context Length\", advanced=True, value=1536),\n        IntInput(name=\"max_retries\", display_name=\"Max Retries\", value=3, advanced=True),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model\",\n            advanced=False,\n            options=OPENAI_EMBEDDING_MODEL_NAMES,\n            value=\"text-embedding-3-small\",\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        SecretStrInput(name=\"openai_api_key\", display_name=\"OpenAI API Key\", value=\"OPENAI_API_KEY\", required=True),\n        MessageTextInput(name=\"openai_api_base\", display_name=\"OpenAI API Base\", advanced=True),\n        MessageTextInput(name=\"openai_api_type\", display_name=\"OpenAI API Type\", advanced=True),\n        MessageTextInput(name=\"openai_api_version\", display_name=\"OpenAI API Version\", advanced=True),\n        MessageTextInput(\n            name=\"openai_organization\",\n            display_name=\"OpenAI Organization\",\n            advanced=True,\n        ),\n        MessageTextInput(name=\"openai_proxy\", display_name=\"OpenAI Proxy\", advanced=True),\n        FloatInput(name=\"request_timeout\", display_name=\"Request Timeout\", advanced=True),\n        BoolInput(name=\"show_progress_bar\", display_name=\"Show Progress Bar\", advanced=True),\n        BoolInput(name=\"skip_empty\", display_name=\"Skip Empty\", advanced=True),\n        MessageTextInput(\n            name=\"tiktoken_model_name\",\n            display_name=\"TikToken Model Name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"tiktoken_enable\",\n            display_name=\"TikToken Enable\",\n            advanced=True,\n            value=True,\n            info=\"If False, you must have transformers installed.\",\n        ),\n        IntInput(\n            name=\"dimensions\",\n            display_name=\"Dimensions\",\n            info=\"The number of dimensions the resulting output embeddings should have. \"\n            \"Only supported by certain models.\",\n            advanced=True,\n        ),\n    ]\n\n    def build_embeddings(self) -> Embeddings:\n        return OpenAIEmbeddings(\n            client=self.client or None,\n            model=self.model,\n            dimensions=self.dimensions or None,\n            deployment=self.deployment or None,\n            api_version=self.openai_api_version or None,\n            base_url=self.openai_api_base or None,\n            openai_api_type=self.openai_api_type or None,\n            openai_proxy=self.openai_proxy or None,\n            embedding_ctx_length=self.embedding_ctx_length,\n            api_key=self.openai_api_key or None,\n            organization=self.openai_organization or None,\n            allowed_special=\"all\",\n            disallowed_special=\"all\",\n            chunk_size=self.chunk_size,\n            max_retries=self.max_retries,\n            timeout=self.request_timeout or None,\n            tiktoken_enabled=self.tiktoken_enable,\n            tiktoken_model_name=self.tiktoken_model_name or None,\n            show_progress_bar=self.show_progress_bar,\n            model_kwargs=self.model_kwargs,\n            skip_empty=self.skip_empty,\n            default_headers=self.default_headers or None,\n            default_query=self.default_query or None,\n        )\n"
                                },
                                "default_headers": {
                                    "_input_type": "DictInput",
                                    "advanced": true,
                                    "display_name": "Default Headers",
                                    "dynamic": false,
                                    "info": "Default headers to use for the API request.",
                                    "list": false,
                                    "name": "default_headers",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "type": "dict",
                                    "value": {}
                                },
                                "default_query": {
                                    "_input_type": "DictInput",
                                    "advanced": true,
                                    "display_name": "Default Query",
                                    "dynamic": false,
                                    "info": "Default query parameters to use for the API request.",
                                    "list": false,
                                    "name": "default_query",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "type": "dict",
                                    "value": {}
                                },
                                "deployment": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Deployment",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "deployment",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "dimensions": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Dimensions",
                                    "dynamic": false,
                                    "info": "The number of dimensions the resulting output embeddings should have. Only supported by certain models.",
                                    "list": false,
                                    "name": "dimensions",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": ""
                                },
                                "embedding_ctx_length": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Embedding Context Length",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "name": "embedding_ctx_length",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 1536
                                },
                                "max_retries": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Max Retries",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "name": "max_retries",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 3
                                },
                                "model": {
                                    "_input_type": "DropdownInput",
                                    "advanced": false,
                                    "combobox": false,
                                    "display_name": "Model",
                                    "dynamic": false,
                                    "info": "",
                                    "name": "model",
                                    "options": [
                                        "text-embedding-3-small",
                                        "text-embedding-3-large",
                                        "text-embedding-ada-002"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "text-embedding-3-large"
                                },
                                "model_kwargs": {
                                    "_input_type": "DictInput",
                                    "advanced": true,
                                    "display_name": "Model Kwargs",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "name": "model_kwargs",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "type": "dict",
                                    "value": {}
                                },
                                "openai_api_base": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "OpenAI API Base",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "openai_api_base",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "openai_api_key": {
                                    "_input_type": "SecretStrInput",
                                    "advanced": false,
                                    "display_name": "OpenAI API Key",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "load_from_db": true,
                                    "name": "openai_api_key",
                                    "password": true,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": "OPENAI_API_KEY"
                                },
                                "openai_api_type": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "OpenAI API Type",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "openai_api_type",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "openai_api_version": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "OpenAI API Version",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "openai_api_version",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "openai_organization": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "OpenAI Organization",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "openai_organization",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "openai_proxy": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "OpenAI Proxy",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "openai_proxy",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "request_timeout": {
                                    "_input_type": "FloatInput",
                                    "advanced": true,
                                    "display_name": "Request Timeout",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "name": "request_timeout",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "float",
                                    "value": ""
                                },
                                "show_progress_bar": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Show Progress Bar",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "name": "show_progress_bar",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "skip_empty": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Skip Empty",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "name": "skip_empty",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "tiktoken_enable": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "TikToken Enable",
                                    "dynamic": false,
                                    "info": "If False, you must have transformers installed.",
                                    "list": false,
                                    "name": "tiktoken_enable",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "tiktoken_model_name": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "TikToken Model Name",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "tiktoken_model_name",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                }
                            },
                            "tool_mode": false
                        },
                        "showNode": true,
                        "type": "OpenAIEmbeddings"
                    },
                    "dragging": false,
                    "id": "OpenAIEmbeddings-SoMI2",
                    "measured": {
                        "height": 312,
                        "width": 320
                    },
                    "position": {
                        "x": -826.5880014143661,
                        "y": 6515.86676043142
                    },
                    "selected": false,
                    "type": "genericNode"
                },
                {
                    "data": {
                        "id": "note-Nby9n",
                        "node": {
                            "description": "## \ud83d\udcd6 README\n\nLoad your data into a vector database with the \ud83d\udcda **Load Data** flow, and then use your data as chat context with the \ud83d\udc15 **Retriever** flow.\n\n**\ud83d\udea8 Add your OpenAI API key as a global variable to easily add it to all of the OpenAI components in this flow.** \n\n**Quick start**\n1. Run the \ud83d\udcda **Load Data** flow.\n2. Run the \ud83d\udc15 **Retriever** flow.\n\n**Next steps** \n\n- Experiment by changing the prompt and the loaded data to see how the bot's responses change. ",
                            "display_name": "",
                            "documentation": "",
                            "template": {}
                        },
                        "type": "note"
                    },
                    "dragging": false,
                    "height": 695,
                    "id": "note-Nby9n",
                    "measured": {
                        "height": 695,
                        "width": 325
                    },
                    "position": {
                        "x": -2651.9749287591367,
                        "y": 6278.741596879104
                    },
                    "resizing": false,
                    "selected": false,
                    "type": "noteNode",
                    "width": 477
                },
                {
                    "data": {
                        "id": "note-o96q7",
                        "node": {
                            "description": "## \ud83d\udcda 1. Load Data Flow\n\nRun this first! Load data multiple urls, and embed it into the vector database in a graph based format.\n\nClick \u25b6\ufe0f **Run component** on the **Astra DB Graph** component to load your data.\n\n* If you're using OSS Langflow, add your Astra DB Application Token to the Astra DB component.\n\n#### Next steps:\n Experiment by changing the prompt and the contextual data to see how the retrieval flow's responses change.",
                            "display_name": "",
                            "documentation": "",
                            "template": {}
                        },
                        "type": "note"
                    },
                    "dragging": false,
                    "height": 499,
                    "id": "note-o96q7",
                    "measured": {
                        "height": 499,
                        "width": 325
                    },
                    "position": {
                        "x": -2156.877891666127,
                        "y": 5887.194729165318
                    },
                    "resizing": false,
                    "selected": false,
                    "type": "noteNode",
                    "width": 325
                },
                {
                    "data": {
                        "id": "note-Svi05",
                        "node": {
                            "description": "## \ud83d\udc15 2. Retriever Flow\n\nThis flow answers your questions with contextual data retrieved from your vector database. using graph RAG.\n\nOpen the **Playground** and ask, \n\n```\nhow to create a function in Haskell ?\n```\n",
                            "display_name": "",
                            "documentation": "",
                            "template": {}
                        },
                        "type": "note"
                    },
                    "dragging": false,
                    "id": "note-Svi05",
                    "measured": {
                        "height": 325,
                        "width": 325
                    },
                    "position": {
                        "x": -2255.4854518934735,
                        "y": 7190.4854518934735
                    },
                    "selected": false,
                    "type": "noteNode"
                }
            ],
            "viewport": {
                "x": 1003.3024895663839,
                "y": -1906.154829822026,
                "zoom": 0.35536121365456846
            }
        },
        "is_component": false,
        "updated_at": "2025-01-25T04:58:25+00:00",
        "webhook": false,
        "endpoint_name": null,
        "tags": [
            "rag",
            "q-a"
        ],
        "locked": false,
        "id": "4488694d-5d5a-4b0d-8e6a-dd400586e3d1",
        "user_id": null,
        "folder_id": "c54584e6-88eb-4ac0-b70c-68aee37fdce2"
    },
    {
        "name": "Memory Chatbot",
        "description": "Create a chatbot that saves and references previous messages, enabling the model to maintain context throughout the conversation.",
        "icon": "MessagesSquare",
        "icon_bg_color": null,
        "gradient": "4",
        "data": {
            "edges": [
                {
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "Memory",
                            "id": "Memory-W1a3k",
                            "name": "messages_text",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "memory",
                            "id": "Prompt-q8R26",
                            "inputTypes": [
                                "Message",
                                "Text"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "reactflow__edge-Memory-W1a3k{\u0153dataType\u0153:\u0153Memory\u0153,\u0153id\u0153:\u0153Memory-W1a3k\u0153,\u0153name\u0153:\u0153messages_text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-Prompt-q8R26{\u0153fieldName\u0153:\u0153memory\u0153,\u0153id\u0153:\u0153Prompt-q8R26\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153,\u0153Text\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "Memory-W1a3k",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153Memory\u0153, \u0153id\u0153: \u0153Memory-W1a3k\u0153, \u0153name\u0153: \u0153messages_text\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "Prompt-q8R26",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153memory\u0153, \u0153id\u0153: \u0153Prompt-q8R26\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153, \u0153Text\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "data": {
                        "sourceHandle": {
                            "dataType": "ChatInput",
                            "id": "ChatInput-LrPKe",
                            "name": "message",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "input_value",
                            "id": "OpenAIModel-BSFD4",
                            "inputTypes": [
                                "Message"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "xy-edge__ChatInput-LrPKe{\u0153dataType\u0153:\u0153ChatInput\u0153,\u0153id\u0153:\u0153ChatInput-LrPKe\u0153,\u0153name\u0153:\u0153message\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-OpenAIModel-BSFD4{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153OpenAIModel-BSFD4\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "ChatInput-LrPKe",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153ChatInput\u0153, \u0153id\u0153: \u0153ChatInput-LrPKe\u0153, \u0153name\u0153: \u0153message\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "OpenAIModel-BSFD4",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153input_value\u0153, \u0153id\u0153: \u0153OpenAIModel-BSFD4\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "data": {
                        "sourceHandle": {
                            "dataType": "Prompt",
                            "id": "Prompt-q8R26",
                            "name": "prompt",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "system_message",
                            "id": "OpenAIModel-BSFD4",
                            "inputTypes": [
                                "Message"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "xy-edge__Prompt-q8R26{\u0153dataType\u0153:\u0153Prompt\u0153,\u0153id\u0153:\u0153Prompt-q8R26\u0153,\u0153name\u0153:\u0153prompt\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-OpenAIModel-BSFD4{\u0153fieldName\u0153:\u0153system_message\u0153,\u0153id\u0153:\u0153OpenAIModel-BSFD4\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "Prompt-q8R26",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153Prompt\u0153, \u0153id\u0153: \u0153Prompt-q8R26\u0153, \u0153name\u0153: \u0153prompt\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "OpenAIModel-BSFD4",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153system_message\u0153, \u0153id\u0153: \u0153OpenAIModel-BSFD4\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "data": {
                        "sourceHandle": {
                            "dataType": "OpenAIModel",
                            "id": "OpenAIModel-BSFD4",
                            "name": "text_output",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "input_value",
                            "id": "ChatOutput-Fk6pf",
                            "inputTypes": [
                                "Message"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "xy-edge__OpenAIModel-BSFD4{\u0153dataType\u0153:\u0153OpenAIModel\u0153,\u0153id\u0153:\u0153OpenAIModel-BSFD4\u0153,\u0153name\u0153:\u0153text_output\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-ChatOutput-Fk6pf{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153ChatOutput-Fk6pf\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "OpenAIModel-BSFD4",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153OpenAIModel\u0153, \u0153id\u0153: \u0153OpenAIModel-BSFD4\u0153, \u0153name\u0153: \u0153text_output\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "ChatOutput-Fk6pf",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153input_value\u0153, \u0153id\u0153: \u0153ChatOutput-Fk6pf\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153], \u0153type\u0153: \u0153str\u0153}"
                }
            ],
            "nodes": [
                {
                    "data": {
                        "id": "ChatInput-LrPKe",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Get chat inputs from the Playground.",
                            "display_name": "Chat Input",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "input_value",
                                "should_store_message",
                                "sender",
                                "sender_name",
                                "session_id",
                                "files",
                                "background_color",
                                "chat_icon",
                                "text_color"
                            ],
                            "frozen": false,
                            "icon": "MessagesSquare",
                            "legacy": false,
                            "lf_version": "1.0.19.post2",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "message_response",
                                    "name": "message",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "background_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Background Color",
                                    "dynamic": false,
                                    "info": "The background color of the icon.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "background_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "chat_icon": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Icon",
                                    "dynamic": false,
                                    "info": "The icon of the message.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "chat_icon",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import (\n    DropdownInput,\n    FileInput,\n    MessageTextInput,\n    MultilineInput,\n    Output,\n)\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_USER,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatInput\"\n    minimized = True\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n            input_types=[],\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    async def message_response(self) -> Message:\n        background_color = self.background_color\n        text_color = self.text_color\n        icon = self.chat_icon\n\n        message = await Message.create(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n            properties={\n                \"background_color\": background_color,\n                \"text_color\": text_color,\n                \"icon\": icon,\n            },\n        )\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n"
                                },
                                "files": {
                                    "_input_type": "FileInput",
                                    "advanced": true,
                                    "display_name": "Files",
                                    "dynamic": false,
                                    "fileTypes": [
                                        "txt",
                                        "md",
                                        "mdx",
                                        "csv",
                                        "json",
                                        "yaml",
                                        "yml",
                                        "xml",
                                        "html",
                                        "htm",
                                        "pdf",
                                        "docx",
                                        "py",
                                        "sh",
                                        "sql",
                                        "js",
                                        "ts",
                                        "tsx",
                                        "jpg",
                                        "jpeg",
                                        "png",
                                        "bmp",
                                        "image"
                                    ],
                                    "file_path": "",
                                    "info": "Files to be sent with the message.",
                                    "list": true,
                                    "name": "files",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "file",
                                    "value": ""
                                },
                                "input_value": {
                                    "_input_type": "MultilineInput",
                                    "advanced": false,
                                    "display_name": "Text",
                                    "dynamic": false,
                                    "info": "Message to be passed as input.",
                                    "input_types": [],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "what is my name"
                                },
                                "sender": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Sender Type",
                                    "dynamic": false,
                                    "info": "Type of sender.",
                                    "name": "sender",
                                    "options": [
                                        "Machine",
                                        "User"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "User"
                                },
                                "sender_name": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Sender Name",
                                    "dynamic": false,
                                    "info": "Name of the sender.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "sender_name",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "User"
                                },
                                "session_id": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Session ID",
                                    "dynamic": false,
                                    "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "session_id",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "should_store_message": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Store Messages",
                                    "dynamic": false,
                                    "info": "Store the message in the history.",
                                    "list": false,
                                    "name": "should_store_message",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "text_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Text Color",
                                    "dynamic": false,
                                    "info": "The text color of the name",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "text_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "ChatInput"
                    },
                    "dragging": false,
                    "height": 234,
                    "id": "ChatInput-LrPKe",
                    "measured": {
                        "height": 234,
                        "width": 360
                    },
                    "position": {
                        "x": 2321.5543981677606,
                        "y": 374.0457826421628
                    },
                    "positionAbsolute": {
                        "x": 2321.5543981677606,
                        "y": 374.0457826421628
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "description": "Display a chat message in the Playground.",
                        "display_name": "Chat Output",
                        "id": "ChatOutput-Fk6pf",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Display a chat message in the Playground.",
                            "display_name": "Chat Output",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "input_value",
                                "should_store_message",
                                "sender",
                                "sender_name",
                                "session_id",
                                "data_template",
                                "background_color",
                                "chat_icon",
                                "text_color"
                            ],
                            "frozen": false,
                            "icon": "MessagesSquare",
                            "legacy": false,
                            "lf_version": "1.0.19.post2",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "message_response",
                                    "name": "message",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "background_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Background Color",
                                    "dynamic": false,
                                    "info": "The background color of the icon.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "background_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "chat_icon": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Icon",
                                    "dynamic": false,
                                    "info": "The icon of the message.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "chat_icon",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, MessageInput, MessageTextInput, Output\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        MessageInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            source_dict[\"source\"] = source\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n        background_color = self.background_color\n        text_color = self.text_color\n        if self.chat_icon:\n            icon = self.chat_icon\n        message = self.input_value if isinstance(self.input_value, Message) else Message(text=self.input_value)\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n        message.properties.icon = icon\n        message.properties.background_color = background_color\n        message.properties.text_color = text_color\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n"
                                },
                                "data_template": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Data Template",
                                    "dynamic": false,
                                    "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "data_template",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "{text}"
                                },
                                "input_value": {
                                    "_input_type": "MessageInput",
                                    "advanced": false,
                                    "display_name": "Text",
                                    "dynamic": false,
                                    "info": "Message to be passed as output.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "sender": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Sender Type",
                                    "dynamic": false,
                                    "info": "Type of sender.",
                                    "name": "sender",
                                    "options": [
                                        "Machine",
                                        "User"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Machine"
                                },
                                "sender_name": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Sender Name",
                                    "dynamic": false,
                                    "info": "Name of the sender.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "sender_name",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "AI"
                                },
                                "session_id": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Session ID",
                                    "dynamic": false,
                                    "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "session_id",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "should_store_message": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Store Messages",
                                    "dynamic": false,
                                    "info": "Store the message in the history.",
                                    "list": false,
                                    "name": "should_store_message",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "text_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Text Color",
                                    "dynamic": false,
                                    "info": "The text color of the name",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "text_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "ChatOutput"
                    },
                    "dragging": true,
                    "height": 234,
                    "id": "ChatOutput-Fk6pf",
                    "measured": {
                        "height": 234,
                        "width": 360
                    },
                    "position": {
                        "x": 3113.9880204333917,
                        "y": 769.7618411016429
                    },
                    "positionAbsolute": {
                        "x": 3101.965731391458,
                        "y": 776.4408905693839
                    },
                    "selected": true,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "id": "note-gj6hj",
                        "node": {
                            "description": "# Memory Chatbot\n\nA flexible chatbot implementation featuring advanced conversation memory capabilities. This serves as a foundational tool for building chat experiences with persistent context.\n\n## Core Components\n\n1. **Chat Input**\n   - Accepts user messages\n   - Configures conversation storage\n   - Tracks session identity\n\n2. **Chat Memory**\n   - Stores and retrieves up to 100 previous messages\n   - Maintains conversation context\n   - Tracks separate chat sessions\n   - Preserves sender information and message order\n\n3. **Prompt**\n   - Creates dynamic prompt templates\n   - Integrates memory into conversation flow\n\n4. **OpenAI**\n   - Processes user input with context\n   - Accesses conversation history\n   - Includes options for model configuration and API key setup\n\n5. **Chat Output**\n   - Displays formatted responses\n   - Maintains conversation flow\n   - Syncs with memory storage\n\n## Memory Features\n\n- Stores message history\n- Plans conversation trajectory\n- Differentiates between chat sessions\n- Preserves sender and message metadata\n\n## Quick Start\n\n1. **Initialize** with a clear session ID\n2. **Enter** message in Chat Input\n3. **AI Processes** with context from memory\n4. **Response** appears in Chat Output\n5. Context remains available for follow-ups\n\nThis robust system demonstrates thorough memory integration with minimal complexity. \ud83e\udde0\ud83d\udcac\n",
                            "display_name": "",
                            "documentation": "",
                            "template": {}
                        },
                        "type": "note"
                    },
                    "dragging": false,
                    "height": 736,
                    "id": "note-gj6hj",
                    "measured": {
                        "height": 736,
                        "width": 328
                    },
                    "position": {
                        "x": 1512.8976594415833,
                        "y": 312.9558305744385
                    },
                    "positionAbsolute": {
                        "x": 1512.8976594415833,
                        "y": 312.9558305744385
                    },
                    "resizing": false,
                    "selected": false,
                    "style": {
                        "height": 736,
                        "width": 382
                    },
                    "type": "noteNode",
                    "width": 382
                },
                {
                    "data": {
                        "id": "note-SQs3p",
                        "node": {
                            "description": "## Get Your OpenAI API Key\n\n**Steps**:\n\n1. **Visit** [OpenAI's API Key Page](https://platform.openai.com/api-keys).\n\n2. **Log In/Sign Up**:\n   - Log in or create a new OpenAI account.\n\n3. **Generate API Key**:\n   - Click \"Create New Secret Key\" to obtain your key.\n\n4. **Store Your Key Securely**:\n   - Note it down as it will only display once.\n\n5. **Enter API Key**:\n   - Input your key in the OpenAI API Key field within the component setup.\n\nKeep your key safe and manage it responsibly!",
                            "display_name": "",
                            "documentation": "",
                            "template": {
                                "backgroundColor": "rose"
                            }
                        },
                        "type": "note"
                    },
                    "dragging": false,
                    "height": 325,
                    "id": "note-SQs3p",
                    "measured": {
                        "height": 325,
                        "width": 328
                    },
                    "position": {
                        "x": 2727.7060397092964,
                        "y": 115.42518754847691
                    },
                    "positionAbsolute": {
                        "x": 2727.7060397092964,
                        "y": 115.42518754847691
                    },
                    "selected": false,
                    "type": "noteNode",
                    "width": 325
                },
                {
                    "data": {
                        "id": "Memory-W1a3k",
                        "node": {
                            "base_classes": [
                                "Data",
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Retrieves stored chat messages from Langflow tables or an external memory.",
                            "display_name": "Chat Memory",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "memory",
                                "sender",
                                "sender_name",
                                "n_messages",
                                "session_id",
                                "order",
                                "template"
                            ],
                            "frozen": false,
                            "icon": "message-square-more",
                            "legacy": false,
                            "lf_version": "1.0.19.post2",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Data",
                                    "method": "retrieve_messages",
                                    "name": "messages",
                                    "selected": "Data",
                                    "types": [
                                        "Data"
                                    ],
                                    "value": "__UNDEFINED__"
                                },
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "retrieve_messages_as_text",
                                    "name": "messages_text",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.inputs import HandleInput\nfrom langflow.io import DropdownInput, IntInput, MessageTextInput, MultilineInput, Output\nfrom langflow.memory import aget_messages\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_USER\n\n\nclass MemoryComponent(Component):\n    display_name = \"Message History\"\n    description = \"Retrieves stored chat messages from Langflow tables or an external memory.\"\n    icon = \"message-square-more\"\n    name = \"Memory\"\n\n    inputs = [\n        HandleInput(\n            name=\"memory\",\n            display_name=\"External Memory\",\n            input_types=[\"Memory\"],\n            info=\"Retrieve messages from an external memory. If empty, it will use the Langflow tables.\",\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER, \"Machine and User\"],\n            value=\"Machine and User\",\n            info=\"Filter by sender type.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Filter by sender name.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"n_messages\",\n            display_name=\"Number of Messages\",\n            value=100,\n            info=\"Number of messages to retrieve.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"order\",\n            display_name=\"Order\",\n            options=[\"Ascending\", \"Descending\"],\n            value=\"Ascending\",\n            info=\"Order of the messages.\",\n            advanced=True,\n            tool_mode=True,\n        ),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {sender} or any other key in the message data.\",\n            value=\"{sender_name}: {text}\",\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"messages\", method=\"retrieve_messages\"),\n        Output(display_name=\"Message\", name=\"messages_text\", method=\"retrieve_messages_as_text\"),\n    ]\n\n    async def retrieve_messages(self) -> Data:\n        sender = self.sender\n        sender_name = self.sender_name\n        session_id = self.session_id\n        n_messages = self.n_messages\n        order = \"DESC\" if self.order == \"Descending\" else \"ASC\"\n\n        if sender == \"Machine and User\":\n            sender = None\n\n        if self.memory:\n            # override session_id\n            self.memory.session_id = session_id\n\n            stored = await self.memory.aget_messages()\n            # langchain memories are supposed to return messages in ascending order\n            if order == \"DESC\":\n                stored = stored[::-1]\n            if n_messages:\n                stored = stored[:n_messages]\n            stored = [Message.from_lc_message(m) for m in stored]\n            if sender:\n                expected_type = MESSAGE_SENDER_AI if sender == MESSAGE_SENDER_AI else MESSAGE_SENDER_USER\n                stored = [m for m in stored if m.type == expected_type]\n        else:\n            stored = await aget_messages(\n                sender=sender,\n                sender_name=sender_name,\n                session_id=session_id,\n                limit=n_messages,\n                order=order,\n            )\n        self.status = stored\n        return stored\n\n    async def retrieve_messages_as_text(self) -> Message:\n        stored_text = data_to_text(self.template, await self.retrieve_messages())\n        self.status = stored_text\n        return Message(text=stored_text)\n"
                                },
                                "memory": {
                                    "_input_type": "HandleInput",
                                    "advanced": false,
                                    "display_name": "External Memory",
                                    "dynamic": false,
                                    "info": "Retrieve messages from an external memory. If empty, it will use the Langflow tables.",
                                    "input_types": [
                                        "Memory"
                                    ],
                                    "list": false,
                                    "name": "memory",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "other",
                                    "value": ""
                                },
                                "n_messages": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Number of Messages",
                                    "dynamic": false,
                                    "info": "Number of messages to retrieve.",
                                    "list": false,
                                    "name": "n_messages",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 100
                                },
                                "order": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Order",
                                    "dynamic": false,
                                    "info": "Order of the messages.",
                                    "name": "order",
                                    "options": [
                                        "Ascending",
                                        "Descending"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Ascending"
                                },
                                "sender": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Sender Type",
                                    "dynamic": false,
                                    "info": "Filter by sender type.",
                                    "name": "sender",
                                    "options": [
                                        "Machine",
                                        "User",
                                        "Machine and User"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Machine and User"
                                },
                                "sender_name": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Sender Name",
                                    "dynamic": false,
                                    "info": "Filter by sender name.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "sender_name",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "session_id": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Session ID",
                                    "dynamic": false,
                                    "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "session_id",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "template": {
                                    "_input_type": "MultilineInput",
                                    "advanced": true,
                                    "display_name": "Template",
                                    "dynamic": false,
                                    "info": "The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "template",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "{sender_name}: {text}"
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "Memory"
                    },
                    "dragging": false,
                    "height": 264,
                    "id": "Memory-W1a3k",
                    "measured": {
                        "height": 264,
                        "width": 360
                    },
                    "position": {
                        "x": 1947.7805399474369,
                        "y": 766.1115984799474
                    },
                    "positionAbsolute": {
                        "x": 1947.7805399474369,
                        "y": 766.1115984799474
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "id": "Prompt-q8R26",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {
                                "template": [
                                    "memory"
                                ]
                            },
                            "description": "Create a prompt template with dynamic variables.",
                            "display_name": "Prompt",
                            "documentation": "",
                            "edited": false,
                            "error": null,
                            "field_order": [
                                "template"
                            ],
                            "frozen": false,
                            "full_path": null,
                            "icon": "prompts",
                            "is_composition": null,
                            "is_input": null,
                            "is_output": null,
                            "legacy": false,
                            "lf_version": "1.0.19.post2",
                            "metadata": {},
                            "name": "",
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Prompt Message",
                                    "method": "build_prompt",
                                    "name": "prompt",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import MessageTextInput, Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            tool_mode=True,\n            advanced=True,\n            info=\"A placeholder input for tool mode.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    async def update_frontend_node(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = await super().update_frontend_node(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n"
                                },
                                "memory": {
                                    "advanced": false,
                                    "display_name": "memory",
                                    "dynamic": false,
                                    "field_type": "str",
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "input_types": [
                                        "Message",
                                        "Text"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "memory",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": ""
                                },
                                "template": {
                                    "_input_type": "PromptInput",
                                    "advanced": false,
                                    "display_name": "Template",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "name": "template",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "type": "prompt",
                                    "value": "You are a helpful assistant that answer questions.\n\nUse markdown to format your answer, properly embedding images and urls.\n\nHistory: \n\n{memory}\n"
                                },
                                "tool_placeholder": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Tool Placeholder",
                                    "dynamic": false,
                                    "info": "A placeholder input for tool mode.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "tool_placeholder",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": true,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "Prompt"
                    },
                    "dragging": false,
                    "height": 347,
                    "id": "Prompt-q8R26",
                    "measured": {
                        "height": 347,
                        "width": 360
                    },
                    "position": {
                        "x": 2327.422938009026,
                        "y": 675.992123914672
                    },
                    "positionAbsolute": {
                        "x": 2327.422938009026,
                        "y": 675.992123914672
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "id": "OpenAIModel-BSFD4",
                        "node": {
                            "base_classes": [
                                "LanguageModel",
                                "Message"
                            ],
                            "beta": false,
                            "category": "models",
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Generates text using OpenAI LLMs.",
                            "display_name": "OpenAI",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "input_value",
                                "system_message",
                                "stream",
                                "max_tokens",
                                "model_kwargs",
                                "json_mode",
                                "model_name",
                                "openai_api_base",
                                "api_key",
                                "temperature",
                                "seed"
                            ],
                            "frozen": false,
                            "icon": "OpenAI",
                            "key": "OpenAIModel",
                            "legacy": false,
                            "metadata": {},
                            "minimized": false,
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "text_response",
                                    "name": "text_output",
                                    "required_inputs": [],
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                },
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Language Model",
                                    "method": "build_model",
                                    "name": "model_output",
                                    "required_inputs": [
                                        "api_key"
                                    ],
                                    "selected": "LanguageModel",
                                    "types": [
                                        "LanguageModel"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "score": 0.14285714285714285,
                            "template": {
                                "_type": "Component",
                                "api_key": {
                                    "_input_type": "SecretStrInput",
                                    "advanced": false,
                                    "display_name": "OpenAI API Key",
                                    "dynamic": false,
                                    "info": "The OpenAI API Key to use for the OpenAI model.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "load_from_db": true,
                                    "name": "api_key",
                                    "password": true,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": "OPENAI_API_KEY"
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.openai_constants import OPENAI_MODEL_NAMES\nfrom langflow.field_typing import LanguageModel\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.inputs import BoolInput, DictInput, DropdownInput, IntInput, SecretStrInput, SliderInput, StrInput\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIModel\"\n\n    inputs = [\n        *LCModelComponent._base_inputs,\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            range_spec=RangeSpec(min=0, max=128000),\n        ),\n        DictInput(\n            name=\"model_kwargs\",\n            display_name=\"Model Kwargs\",\n            advanced=True,\n            info=\"Additional keyword arguments to pass to the model.\",\n        ),\n        BoolInput(\n            name=\"json_mode\",\n            display_name=\"JSON Mode\",\n            advanced=True,\n            info=\"If True, it will output JSON regardless of passing a schema.\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            advanced=False,\n            options=OPENAI_MODEL_NAMES,\n            value=OPENAI_MODEL_NAMES[0],\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. \"\n            \"Defaults to https://api.openai.com/v1. \"\n            \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n            required=True,\n        ),\n        SliderInput(\n            name=\"temperature\", display_name=\"Temperature\", value=0.1, range_spec=RangeSpec(min=0, max=2, step=0.01)\n        ),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        openai_api_key = self.api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\n        json_mode = self.json_mode\n        seed = self.seed\n\n        api_key = SecretStr(openai_api_key).get_secret_value() if openai_api_key else None\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature if temperature is not None else 0.1,\n            seed=seed,\n        )\n        if json_mode:\n            output = output.bind(response_format={\"type\": \"json_object\"})\n\n        return output\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"Get a message from an OpenAI exception.\n\n        Args:\n            e (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return None\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")\n            if message:\n                return message\n        return None\n"
                                },
                                "input_value": {
                                    "_input_type": "MessageInput",
                                    "advanced": false,
                                    "display_name": "Input",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "json_mode": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "JSON Mode",
                                    "dynamic": false,
                                    "info": "If True, it will output JSON regardless of passing a schema.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "json_mode",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "max_tokens": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Max Tokens",
                                    "dynamic": false,
                                    "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "max_tokens",
                                    "placeholder": "",
                                    "range_spec": {
                                        "max": 128000,
                                        "min": 0,
                                        "step": 0.1,
                                        "step_type": "float"
                                    },
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": ""
                                },
                                "model_kwargs": {
                                    "_input_type": "DictInput",
                                    "advanced": true,
                                    "display_name": "Model Kwargs",
                                    "dynamic": false,
                                    "info": "Additional keyword arguments to pass to the model.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "model_kwargs",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "type": "dict",
                                    "value": {}
                                },
                                "model_name": {
                                    "_input_type": "DropdownInput",
                                    "advanced": false,
                                    "combobox": false,
                                    "dialog_inputs": {},
                                    "display_name": "Model Name",
                                    "dynamic": false,
                                    "info": "",
                                    "name": "model_name",
                                    "options": [
                                        "gpt-4o-mini",
                                        "gpt-4o",
                                        "gpt-4-turbo",
                                        "gpt-4-turbo-preview",
                                        "gpt-4",
                                        "gpt-3.5-turbo",
                                        "gpt-3.5-turbo-0125"
                                    ],
                                    "options_metadata": [],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "gpt-4o-mini"
                                },
                                "openai_api_base": {
                                    "_input_type": "StrInput",
                                    "advanced": true,
                                    "display_name": "OpenAI API Base",
                                    "dynamic": false,
                                    "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "name": "openai_api_base",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "seed": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Seed",
                                    "dynamic": false,
                                    "info": "The seed controls the reproducibility of the job.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "seed",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 1
                                },
                                "stream": {
                                    "_input_type": "BoolInput",
                                    "advanced": false,
                                    "display_name": "Stream",
                                    "dynamic": false,
                                    "info": "Stream the response from the model. Streaming works only in Chat.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "stream",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "system_message": {
                                    "_input_type": "MultilineInput",
                                    "advanced": false,
                                    "display_name": "System Message",
                                    "dynamic": false,
                                    "info": "System message to pass to the model.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "system_message",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "temperature": {
                                    "_input_type": "SliderInput",
                                    "advanced": false,
                                    "display_name": "Temperature",
                                    "dynamic": false,
                                    "info": "",
                                    "max_label": "",
                                    "max_label_icon": "",
                                    "min_label": "",
                                    "min_label_icon": "",
                                    "name": "temperature",
                                    "placeholder": "",
                                    "range_spec": {
                                        "max": 2,
                                        "min": 0,
                                        "step": 0.01,
                                        "step_type": "float"
                                    },
                                    "required": false,
                                    "show": true,
                                    "slider_buttons": false,
                                    "slider_buttons_options": [],
                                    "slider_input": false,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "type": "slider",
                                    "value": 0.1
                                }
                            },
                            "tool_mode": false
                        },
                        "showNode": true,
                        "type": "OpenAIModel"
                    },
                    "dragging": false,
                    "id": "OpenAIModel-BSFD4",
                    "measured": {
                        "height": 734,
                        "width": 360
                    },
                    "position": {
                        "x": 2726.7429097065215,
                        "y": 460.96432586131795
                    },
                    "selected": false,
                    "type": "genericNode"
                }
            ],
            "viewport": {
                "x": -1173.6150415418488,
                "y": -168.93756272342318,
                "zoom": 0.7486095175892006
            }
        },
        "is_component": false,
        "updated_at": "2025-01-25T04:58:25+00:00",
        "webhook": false,
        "endpoint_name": null,
        "tags": [
            "chatbots",
            "openai",
            "assistants"
        ],
        "locked": false,
        "id": "d5b3e5b1-b548-463f-b401-fc1b4130197d",
        "user_id": null,
        "folder_id": "c54584e6-88eb-4ac0-b70c-68aee37fdce2"
    },
    {
        "name": "Custom Component Generator",
        "description": "Generates well-structured code for custom components following Langflow's specifications.",
        "icon": "SquareCode",
        "icon_bg_color": null,
        "gradient": "1",
        "data": {
            "edges": [
                {
                    "animated": false,
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "Memory",
                            "id": "Memory-xB9zW",
                            "name": "messages_text",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "CHAT_HISTORY",
                            "id": "Prompt-t7tN0",
                            "inputTypes": [
                                "Message",
                                "Text"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "reactflow__edge-Memory-xB9zW{\u0153dataType\u0153:\u0153Memory\u0153,\u0153id\u0153:\u0153Memory-xB9zW\u0153,\u0153name\u0153:\u0153messages_text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-Prompt-t7tN0{\u0153fieldName\u0153:\u0153CHAT_HISTORY\u0153,\u0153id\u0153:\u0153Prompt-t7tN0\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153,\u0153Text\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "selected": false,
                    "source": "Memory-xB9zW",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153Memory\u0153, \u0153id\u0153: \u0153Memory-xB9zW\u0153, \u0153name\u0153: \u0153messages_text\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "Prompt-t7tN0",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153CHAT_HISTORY\u0153, \u0153id\u0153: \u0153Prompt-t7tN0\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153, \u0153Text\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "animated": false,
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "ChatInput",
                            "id": "ChatInput-g2Y61",
                            "name": "message",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "USER_INPUT",
                            "id": "Prompt-t7tN0",
                            "inputTypes": [
                                "Message",
                                "Text"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "reactflow__edge-ChatInput-g2Y61{\u0153dataType\u0153:\u0153ChatInput\u0153,\u0153id\u0153:\u0153ChatInput-g2Y61\u0153,\u0153name\u0153:\u0153message\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-Prompt-t7tN0{\u0153fieldName\u0153:\u0153USER_INPUT\u0153,\u0153id\u0153:\u0153Prompt-t7tN0\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153,\u0153Text\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "selected": false,
                    "source": "ChatInput-g2Y61",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153ChatInput\u0153, \u0153id\u0153: \u0153ChatInput-g2Y61\u0153, \u0153name\u0153: \u0153message\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "Prompt-t7tN0",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153USER_INPUT\u0153, \u0153id\u0153: \u0153Prompt-t7tN0\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153, \u0153Text\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "animated": false,
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "URL",
                            "id": "URL-l7pdF",
                            "name": "text",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "EXAMPLE_COMPONENTS",
                            "id": "Prompt-t7tN0",
                            "inputTypes": [
                                "Message",
                                "Text"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "reactflow__edge-URL-l7pdF{\u0153dataType\u0153:\u0153URL\u0153,\u0153id\u0153:\u0153URL-l7pdF\u0153,\u0153name\u0153:\u0153text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-Prompt-t7tN0{\u0153fieldName\u0153:\u0153EXAMPLE_COMPONENTS\u0153,\u0153id\u0153:\u0153Prompt-t7tN0\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153,\u0153Text\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "URL-l7pdF",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153URL\u0153, \u0153id\u0153: \u0153URL-l7pdF\u0153, \u0153name\u0153: \u0153text\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "Prompt-t7tN0",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153EXAMPLE_COMPONENTS\u0153, \u0153id\u0153: \u0153Prompt-t7tN0\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153, \u0153Text\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "animated": false,
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "URL",
                            "id": "URL-vp2La",
                            "name": "text",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "BASE_COMPONENT_CODE",
                            "id": "Prompt-t7tN0",
                            "inputTypes": [
                                "Message",
                                "Text"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "reactflow__edge-URL-vp2La{\u0153dataType\u0153:\u0153URL\u0153,\u0153id\u0153:\u0153URL-vp2La\u0153,\u0153name\u0153:\u0153text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-Prompt-t7tN0{\u0153fieldName\u0153:\u0153BASE_COMPONENT_CODE\u0153,\u0153id\u0153:\u0153Prompt-t7tN0\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153,\u0153Text\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "URL-vp2La",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153URL\u0153, \u0153id\u0153: \u0153URL-vp2La\u0153, \u0153name\u0153: \u0153text\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "Prompt-t7tN0",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153BASE_COMPONENT_CODE\u0153, \u0153id\u0153: \u0153Prompt-t7tN0\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153, \u0153Text\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "animated": false,
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "URL",
                            "id": "URL-ak8Jx",
                            "name": "text",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "CUSTOM_COMPONENT_CODE",
                            "id": "Prompt-t7tN0",
                            "inputTypes": [
                                "Message",
                                "Text"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "reactflow__edge-URL-ak8Jx{\u0153dataType\u0153:\u0153URL\u0153,\u0153id\u0153:\u0153URL-ak8Jx\u0153,\u0153name\u0153:\u0153text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-Prompt-t7tN0{\u0153fieldName\u0153:\u0153CUSTOM_COMPONENT_CODE\u0153,\u0153id\u0153:\u0153Prompt-t7tN0\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153,\u0153Text\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "URL-ak8Jx",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153URL\u0153, \u0153id\u0153: \u0153URL-ak8Jx\u0153, \u0153name\u0153: \u0153text\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "Prompt-t7tN0",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153CUSTOM_COMPONENT_CODE\u0153, \u0153id\u0153: \u0153Prompt-t7tN0\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153, \u0153Text\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "data": {
                        "sourceHandle": {
                            "dataType": "Prompt",
                            "id": "Prompt-t7tN0",
                            "name": "prompt",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "input_value",
                            "id": "AnthropicModel-L37Qm",
                            "inputTypes": [
                                "Message"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "xy-edge__Prompt-t7tN0{\u0153dataType\u0153:\u0153Prompt\u0153,\u0153id\u0153:\u0153Prompt-t7tN0\u0153,\u0153name\u0153:\u0153prompt\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-AnthropicModel-L37Qm{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153AnthropicModel-L37Qm\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "Prompt-t7tN0",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153Prompt\u0153, \u0153id\u0153: \u0153Prompt-t7tN0\u0153, \u0153name\u0153: \u0153prompt\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "AnthropicModel-L37Qm",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153input_value\u0153, \u0153id\u0153: \u0153AnthropicModel-L37Qm\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "data": {
                        "sourceHandle": {
                            "dataType": "AnthropicModel",
                            "id": "AnthropicModel-L37Qm",
                            "name": "text_output",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "input_value",
                            "id": "ChatOutput-y7MoT",
                            "inputTypes": [
                                "Message"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "xy-edge__AnthropicModel-L37Qm{\u0153dataType\u0153:\u0153AnthropicModel\u0153,\u0153id\u0153:\u0153AnthropicModel-L37Qm\u0153,\u0153name\u0153:\u0153text_output\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-ChatOutput-y7MoT{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153ChatOutput-y7MoT\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "AnthropicModel-L37Qm",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153AnthropicModel\u0153, \u0153id\u0153: \u0153AnthropicModel-L37Qm\u0153, \u0153name\u0153: \u0153text_output\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "ChatOutput-y7MoT",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153input_value\u0153, \u0153id\u0153: \u0153ChatOutput-y7MoT\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153], \u0153type\u0153: \u0153str\u0153}"
                }
            ],
            "nodes": [
                {
                    "data": {
                        "description": "Get chat inputs from the Playground.",
                        "display_name": "Chat Input",
                        "id": "ChatInput-g2Y61",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Get chat inputs from the Playground.",
                            "display_name": "Chat Input",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "input_value",
                                "should_store_message",
                                "sender",
                                "sender_name",
                                "session_id",
                                "files",
                                "background_color",
                                "chat_icon",
                                "text_color"
                            ],
                            "frozen": false,
                            "icon": "MessagesSquare",
                            "legacy": false,
                            "lf_version": "1.0.19.post2",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "message_response",
                                    "name": "message",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "background_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Background Color",
                                    "dynamic": false,
                                    "info": "The background color of the icon.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "background_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "chat_icon": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Icon",
                                    "dynamic": false,
                                    "info": "The icon of the message.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "chat_icon",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import (\n    DropdownInput,\n    FileInput,\n    MessageTextInput,\n    MultilineInput,\n    Output,\n)\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_USER,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatInput\"\n    minimized = True\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n            input_types=[],\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    async def message_response(self) -> Message:\n        background_color = self.background_color\n        text_color = self.text_color\n        icon = self.chat_icon\n\n        message = await Message.create(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n            properties={\n                \"background_color\": background_color,\n                \"text_color\": text_color,\n                \"icon\": icon,\n            },\n        )\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n"
                                },
                                "files": {
                                    "_input_type": "FileInput",
                                    "advanced": true,
                                    "display_name": "Files",
                                    "dynamic": false,
                                    "fileTypes": [
                                        "txt",
                                        "md",
                                        "mdx",
                                        "csv",
                                        "json",
                                        "yaml",
                                        "yml",
                                        "xml",
                                        "html",
                                        "htm",
                                        "pdf",
                                        "docx",
                                        "py",
                                        "sh",
                                        "sql",
                                        "js",
                                        "ts",
                                        "tsx",
                                        "jpg",
                                        "jpeg",
                                        "png",
                                        "bmp",
                                        "image"
                                    ],
                                    "file_path": "",
                                    "info": "Files to be sent with the message.",
                                    "list": true,
                                    "name": "files",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "file",
                                    "value": ""
                                },
                                "input_value": {
                                    "_input_type": "MultilineInput",
                                    "advanced": false,
                                    "display_name": "Text",
                                    "dynamic": false,
                                    "info": "Message to be passed as input.",
                                    "input_types": [],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Failed to get YouTube transcripts: 1 validation error for Data\ndata\n  Input should be a valid dictionary [type=dict_type, input_value=Document(metadata={'sourc...adding the API key and\"), input_type=Document]\n    For further information visit https://errors.pydantic.dev/2.9/v/dict_type\n\n\nAlso, adapt the \"text\" bc it returns this \"Document(metadata={'source': 'UkV79sJAvz8'}, page_content=\"assembly AI is one of the leaders in transcription services so you can convert speech into text and they have many different products available on their platform and we can use assembly within langlow and the way we can get started is to First make an account with assembly Ai and once you get started you will be provided with an API key this is something we're going to need in langlow now back in link flow there are a few different components available and in this example we are using the start transcript component within this component we can provide a file and what I did is I uploaded a 1-hour talk by Andre karpati and this is intro to the large language models and this is an MP3 file so after adding the API key and then the audio file we can select a model that we want to use for the transcription there are two different options available here best and Nano now after you select the model you can either have the language detection on or leave defaults so I left everything in default and then I started the task and once we run the flow we get a transcript ID and attaching this component with the assembly AI pole transcript component we can now get the results and if we were to look at the results available able from this component there are quite a lot of fields that we can see as a result of this component and some of the most important ones you can see is the text from the transcript as you can see it's quite a large file and all of that was converted from speech to text easily by assembly AI it just took a few seconds and then we can see Word level timestamps if needed as what was spoken at what time the starting and end time for that and also the confidence if there are multiple speakers then it also identifies the speakers for us and then we can also see the utterances at different times so there's also word there's a full text and there's some additional information available here now we can use this data for many different things one is we can parse the transcript so we can just look at the full transcript that was available from this video or in this case this MP3 file and then we can also run to get subtitles and this could be used for any Services where we want to add subtitles in different formats so there is the SRT and the VT format available and the way this looks so I ran it for SRT We have basically the time stamps as well as the sentences those were converted from those time stamps and we can see that it goes on for the full length of the audio file and then if needed we can also convert that to vtt last thing is that if you have credits available in your assembly AI account you can also perform a summary of the audio or you could perhaps do some additional task so for example in our case we could say that create a summary of the transcript we could also say that create a blog post from the transcript or perhaps an essay from the transcript so we can get creative with the available information since the transcript of the file is now available and we can utilize that text for many different purposes the flow and the components should be available in the store be sure to add your API key in all of these components wherever it says to add the API key if not it might throw some errors and there are also some additional components available you can check those out based on your use cases as well give it a try and let us know if you found it helpful\")\" \n\nwe only want the page_content "
                                },
                                "sender": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Sender Type",
                                    "dynamic": false,
                                    "info": "Type of sender.",
                                    "name": "sender",
                                    "options": [
                                        "Machine",
                                        "User"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "User"
                                },
                                "sender_name": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Sender Name",
                                    "dynamic": false,
                                    "info": "Name of the sender.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "sender_name",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "User"
                                },
                                "session_id": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Session ID",
                                    "dynamic": false,
                                    "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "session_id",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "should_store_message": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Store Messages",
                                    "dynamic": false,
                                    "info": "Store the message in the history.",
                                    "list": false,
                                    "name": "should_store_message",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "text_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Text Color",
                                    "dynamic": false,
                                    "info": "The text color of the name",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "text_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "ChatInput"
                    },
                    "dragging": false,
                    "height": 231,
                    "id": "ChatInput-g2Y61",
                    "measured": {
                        "height": 231,
                        "width": 360
                    },
                    "position": {
                        "x": 1436.7228707197569,
                        "y": 1045.2749109595
                    },
                    "positionAbsolute": {
                        "x": 1436.7228707197569,
                        "y": 1045.2749109595
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "description": "Retrieves stored chat messages from Langflow tables or an external memory.",
                        "display_name": "Chat Memory",
                        "id": "Memory-xB9zW",
                        "node": {
                            "base_classes": [
                                "Data",
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Retrieves stored chat messages from Langflow tables or an external memory.",
                            "display_name": "Chat Memory",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "memory",
                                "sender",
                                "sender_name",
                                "n_messages",
                                "session_id",
                                "order",
                                "template"
                            ],
                            "frozen": false,
                            "icon": "message-square-more",
                            "legacy": false,
                            "lf_version": "1.0.19.post2",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Data",
                                    "method": "retrieve_messages",
                                    "name": "messages",
                                    "selected": "Data",
                                    "types": [
                                        "Data"
                                    ],
                                    "value": "__UNDEFINED__"
                                },
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "retrieve_messages_as_text",
                                    "name": "messages_text",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.inputs import HandleInput\nfrom langflow.io import DropdownInput, IntInput, MessageTextInput, MultilineInput, Output\nfrom langflow.memory import aget_messages\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_USER\n\n\nclass MemoryComponent(Component):\n    display_name = \"Message History\"\n    description = \"Retrieves stored chat messages from Langflow tables or an external memory.\"\n    icon = \"message-square-more\"\n    name = \"Memory\"\n\n    inputs = [\n        HandleInput(\n            name=\"memory\",\n            display_name=\"External Memory\",\n            input_types=[\"Memory\"],\n            info=\"Retrieve messages from an external memory. If empty, it will use the Langflow tables.\",\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER, \"Machine and User\"],\n            value=\"Machine and User\",\n            info=\"Filter by sender type.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Filter by sender name.\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"n_messages\",\n            display_name=\"Number of Messages\",\n            value=100,\n            info=\"Number of messages to retrieve.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"order\",\n            display_name=\"Order\",\n            options=[\"Ascending\", \"Descending\"],\n            value=\"Ascending\",\n            info=\"Order of the messages.\",\n            advanced=True,\n            tool_mode=True,\n        ),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {sender} or any other key in the message data.\",\n            value=\"{sender_name}: {text}\",\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"messages\", method=\"retrieve_messages\"),\n        Output(display_name=\"Message\", name=\"messages_text\", method=\"retrieve_messages_as_text\"),\n    ]\n\n    async def retrieve_messages(self) -> Data:\n        sender = self.sender\n        sender_name = self.sender_name\n        session_id = self.session_id\n        n_messages = self.n_messages\n        order = \"DESC\" if self.order == \"Descending\" else \"ASC\"\n\n        if sender == \"Machine and User\":\n            sender = None\n\n        if self.memory:\n            # override session_id\n            self.memory.session_id = session_id\n\n            stored = await self.memory.aget_messages()\n            # langchain memories are supposed to return messages in ascending order\n            if order == \"DESC\":\n                stored = stored[::-1]\n            if n_messages:\n                stored = stored[:n_messages]\n            stored = [Message.from_lc_message(m) for m in stored]\n            if sender:\n                expected_type = MESSAGE_SENDER_AI if sender == MESSAGE_SENDER_AI else MESSAGE_SENDER_USER\n                stored = [m for m in stored if m.type == expected_type]\n        else:\n            stored = await aget_messages(\n                sender=sender,\n                sender_name=sender_name,\n                session_id=session_id,\n                limit=n_messages,\n                order=order,\n            )\n        self.status = stored\n        return stored\n\n    async def retrieve_messages_as_text(self) -> Message:\n        stored_text = data_to_text(self.template, await self.retrieve_messages())\n        self.status = stored_text\n        return Message(text=stored_text)\n"
                                },
                                "memory": {
                                    "_input_type": "HandleInput",
                                    "advanced": false,
                                    "display_name": "External Memory",
                                    "dynamic": false,
                                    "info": "Retrieve messages from an external memory. If empty, it will use the Langflow tables.",
                                    "input_types": [
                                        "Memory"
                                    ],
                                    "list": false,
                                    "name": "memory",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "other",
                                    "value": ""
                                },
                                "n_messages": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Number of Messages",
                                    "dynamic": false,
                                    "info": "Number of messages to retrieve.",
                                    "list": false,
                                    "name": "n_messages",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 100
                                },
                                "order": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Order",
                                    "dynamic": false,
                                    "info": "Order of the messages.",
                                    "name": "order",
                                    "options": [
                                        "Ascending",
                                        "Descending"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Ascending"
                                },
                                "sender": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Sender Type",
                                    "dynamic": false,
                                    "info": "Filter by sender type.",
                                    "name": "sender",
                                    "options": [
                                        "Machine",
                                        "User",
                                        "Machine and User"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Machine and User"
                                },
                                "sender_name": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Sender Name",
                                    "dynamic": false,
                                    "info": "Filter by sender name.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "sender_name",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "session_id": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Session ID",
                                    "dynamic": false,
                                    "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "session_id",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "template": {
                                    "_input_type": "MultilineInput",
                                    "advanced": true,
                                    "display_name": "Template",
                                    "dynamic": false,
                                    "info": "The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "template",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "{sender_name}: {text}"
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "Memory"
                    },
                    "dragging": false,
                    "height": 262,
                    "id": "Memory-xB9zW",
                    "measured": {
                        "height": 262,
                        "width": 360
                    },
                    "position": {
                        "x": 1830.6888981898887,
                        "y": 946.1205963195098
                    },
                    "positionAbsolute": {
                        "x": 1830.6888981898887,
                        "y": 946.1205963195098
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "description": "Create a prompt template with dynamic variables.",
                        "display_name": "Prompt",
                        "id": "Prompt-t7tN0",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {
                                "template": [
                                    "BASE_COMPONENT_CODE",
                                    "CUSTOM_COMPONENT_CODE",
                                    "EXAMPLE_COMPONENTS",
                                    "CHAT_HISTORY",
                                    "USER_INPUT"
                                ]
                            },
                            "description": "Create a prompt template with dynamic variables.",
                            "display_name": "Prompt",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "template"
                            ],
                            "frozen": false,
                            "icon": "prompts",
                            "legacy": false,
                            "lf_version": "1.0.19.post2",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Prompt Message",
                                    "method": "build_prompt",
                                    "name": "prompt",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "BASE_COMPONENT_CODE": {
                                    "advanced": false,
                                    "display_name": "BASE_COMPONENT_CODE",
                                    "dynamic": false,
                                    "field_type": "str",
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "input_types": [
                                        "Message",
                                        "Text"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "BASE_COMPONENT_CODE",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": ""
                                },
                                "CHAT_HISTORY": {
                                    "advanced": false,
                                    "display_name": "CHAT_HISTORY",
                                    "dynamic": false,
                                    "field_type": "str",
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "input_types": [
                                        "Message",
                                        "Text"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "CHAT_HISTORY",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": ""
                                },
                                "CUSTOM_COMPONENT_CODE": {
                                    "advanced": false,
                                    "display_name": "CUSTOM_COMPONENT_CODE",
                                    "dynamic": false,
                                    "field_type": "str",
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "input_types": [
                                        "Message",
                                        "Text"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "CUSTOM_COMPONENT_CODE",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": ""
                                },
                                "EXAMPLE_COMPONENTS": {
                                    "advanced": false,
                                    "display_name": "EXAMPLE_COMPONENTS",
                                    "dynamic": false,
                                    "field_type": "str",
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "input_types": [
                                        "Message",
                                        "Text"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "EXAMPLE_COMPONENTS",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": ""
                                },
                                "USER_INPUT": {
                                    "advanced": false,
                                    "display_name": "USER_INPUT",
                                    "dynamic": false,
                                    "field_type": "str",
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "input_types": [
                                        "Message",
                                        "Text"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "USER_INPUT",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": ""
                                },
                                "_type": "Component",
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import MessageTextInput, Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            tool_mode=True,\n            advanced=True,\n            info=\"A placeholder input for tool mode.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    async def update_frontend_node(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = await super().update_frontend_node(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n"
                                },
                                "template": {
                                    "_input_type": "PromptInput",
                                    "advanced": false,
                                    "display_name": "Template",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "template",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "type": "prompt",
                                    "value": "<Instructions>\nYou are an AI assistant specialized in creating Langflow components based on user requirements. Your task is to generate the code for a custom Langflow component according to the user's specifications.\n\nFirst, review the following code snippets for reference:\n\n<base_component>\n{BASE_COMPONENT_CODE}\n</base_component>\n\n<custom_component>\n{CUSTOM_COMPONENT_CODE}\n</custom_component>\n\n<example_components>\n{EXAMPLE_COMPONENTS}\n</example_components>\n\nNow, follow these steps to create a custom Langflow component:\n\n1. Analyze the user's input to determine the requirements for the component.\n2. Use an <inner_monologue> section to plan out the component structure and features based on the user's requirements.\n3. Generate the code for the custom component, using the provided code snippets as reference and inspiration.\n4. Provide a brief explanation of the component's functionality and how to use it.\n\nHere's the chat history and user input:\n\n<ChatHistory>\n{CHAT_HISTORY}\n</ChatHistory>\n\n<UserInput>\n{USER_INPUT}\n</UserInput>\n\nBased on the user's input, create a custom Langflow component that meets their requirements. Your response should include:\n\n1. <inner_monologue>\n   Use this section to analyze the user's requirements and plan the component structure.\n</inner_monologue>\n\n2. <component_code>\n   Generate the complete code for the custom Langflow component here.\n</component_code>\n\n3. <explanation>\n   Provide a brief explanation of the component's functionality and how to use it.\n</explanation>\n\nRemember to:\n- Use the provided code snippets as a reference, but create a unique component tailored to the user's needs.\n- Include all necessary imports and class definitions.\n- Implement the required inputs, outputs, and any additional features specified by the user.\n- Use clear and descriptive variable names and comments to enhance code readability.\n- Ensure that the component follows Langflow best practices and conventions.\n\nIf the user's input is unclear or lacks specific details, make reasonable assumptions based on the context and explain these assumptions in your response.\n\n</Instructions>"
                                },
                                "tool_placeholder": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Tool Placeholder",
                                    "dynamic": false,
                                    "info": "A placeholder input for tool mode.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "tool_placeholder",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": true,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "Prompt"
                    },
                    "dragging": false,
                    "height": 685,
                    "id": "Prompt-t7tN0",
                    "measured": {
                        "height": 685,
                        "width": 360
                    },
                    "position": {
                        "x": 2219.5265974825707,
                        "y": 521.6320563271215
                    },
                    "positionAbsolute": {
                        "x": 2219.5265974825707,
                        "y": 521.6320563271215
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "description": "Display a chat message in the Playground.",
                        "display_name": "Chat Output",
                        "id": "ChatOutput-y7MoT",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Display a chat message in the Playground.",
                            "display_name": "Chat Output",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "input_value",
                                "should_store_message",
                                "sender",
                                "sender_name",
                                "session_id",
                                "data_template",
                                "background_color",
                                "chat_icon",
                                "text_color"
                            ],
                            "frozen": false,
                            "icon": "MessagesSquare",
                            "legacy": false,
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "message_response",
                                    "name": "message",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "background_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Background Color",
                                    "dynamic": false,
                                    "info": "The background color of the icon.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "background_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "chat_icon": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Icon",
                                    "dynamic": false,
                                    "info": "The icon of the message.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "chat_icon",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, MessageInput, MessageTextInput, Output\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        MessageInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            source_dict[\"source\"] = source\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n        background_color = self.background_color\n        text_color = self.text_color\n        if self.chat_icon:\n            icon = self.chat_icon\n        message = self.input_value if isinstance(self.input_value, Message) else Message(text=self.input_value)\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n        message.properties.icon = icon\n        message.properties.background_color = background_color\n        message.properties.text_color = text_color\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n"
                                },
                                "data_template": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Data Template",
                                    "dynamic": false,
                                    "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "data_template",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "{text}"
                                },
                                "input_value": {
                                    "_input_type": "MessageInput",
                                    "advanced": false,
                                    "display_name": "Text",
                                    "dynamic": false,
                                    "info": "Message to be passed as output.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "sender": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Sender Type",
                                    "dynamic": false,
                                    "info": "Type of sender.",
                                    "name": "sender",
                                    "options": [
                                        "Machine",
                                        "User"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Machine"
                                },
                                "sender_name": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Sender Name",
                                    "dynamic": false,
                                    "info": "Name of the sender.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "sender_name",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "AI"
                                },
                                "session_id": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Session ID",
                                    "dynamic": false,
                                    "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "session_id",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "should_store_message": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Store Messages",
                                    "dynamic": false,
                                    "info": "Store the message in the history.",
                                    "list": false,
                                    "name": "should_store_message",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "text_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Text Color",
                                    "dynamic": false,
                                    "info": "The text color of the name",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "text_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "ChatOutput"
                    },
                    "dragging": false,
                    "height": 232,
                    "id": "ChatOutput-y7MoT",
                    "measured": {
                        "height": 232,
                        "width": 360
                    },
                    "position": {
                        "x": 2947.267779013826,
                        "y": 891.8123698756774
                    },
                    "positionAbsolute": {
                        "x": 2947.267779013826,
                        "y": 891.8123698756774
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "id": "note-T4gpA",
                        "node": {
                            "description": "# Fetch Components code \n\nUsing the URL component we are extracting from Github, the code from a few classes to provide as example to the LLM. \n\nThis ensures we are always up to date with recent information from the codebase.",
                            "display_name": "",
                            "documentation": "",
                            "template": {}
                        },
                        "type": "note"
                    },
                    "dragging": false,
                    "height": 324,
                    "id": "note-T4gpA",
                    "measured": {
                        "height": 324,
                        "width": 328
                    },
                    "position": {
                        "x": 1430.2014058924922,
                        "y": -19.30392196909918
                    },
                    "positionAbsolute": {
                        "x": 1430.2014058924922,
                        "y": -19.30392196909918
                    },
                    "selected": false,
                    "type": "noteNode",
                    "width": 324
                },
                {
                    "data": {
                        "id": "note-SQ4yw",
                        "node": {
                            "description": "# \ud83d\udee0\ufe0f Custom Component Generator \ud83d\ude80\n\nHi! I'm here to help you create custom components for Langflow. Think of me as your technical partner who can help turn your ideas into working components! \n\n## \ud83c\udfaf How to Work With Me\n\n### 1. \ud83d\udcad Tell Me What You Want to Build\nSimply describe what you want your component to do in plain English. For example:\n- \"I need a component that sends Slack messages\"\n- \"I want to create a tool that can process CSV files\"\n- \"I need something that can translate text\"\n\n### 2. \ud83d\udcda Share Any Relevant Information\nIf you're working with a specific:\n- \ud83d\udd11 API or service (just share the documentation link or main endpoints)\n- \ud83d\udcc4 File format\n- \ud83d\udd04 Data structure\n- \ud83d\udd27 Existing component you want to modify\n\n### 3. \ud83c\udfa8 Let Me Help Design It\nI'll help by:\n- \ud83d\udcca Breaking down complex requirements into manageable pieces\n- \ud83d\udca1 Suggesting the best way to structure inputs and outputs\n- \u2699\ufe0f Creating the component code\n- \ud83d\udcdd Explaining how to use it\n\n### 4. \ud83d\udd04 Iterative Refinement\nWe can then:\n- \u2705 Test and refine the component\n- \u2b50 Add features\n- \ud83d\udd27 Modify behavior\n- \ud83d\udee1\ufe0f Improve error handling\n- \ud83d\udcd6 Add documentation\n\n## \ud83d\ude80 What I Can Help With\n\nI can help create components that:\n- \ud83d\udcca Process different file types (CSV, JSON, Excel, etc.)\n- \ud83d\udd0c Integrate with external APIs\n- \ud83d\udd04 Transform data\n- \ud83d\udd00 Route messages\n- \ud83c\udf10 Handle web requests\n- \ud83c\udfaf Parse structured data\n- \u2728 And much more!\n\n## \ud83d\udca1 Tips for Best Results\n\n1. **Be Specific** \ud83c\udfaf: The more details you provide about what you want to accomplish, the better I can help.\n\n2. **Share Examples** \ud83d\udccb: If you have example data or specific use cases, share them.\n\n3. **Ask Questions** \u2753: Don't hesitate to ask for clarification or modifications.\n\nJust start by telling me what kind of component you'd like to create, and I'll guide you through the process! \n\nReady to build something awesome? \ud83d\ude80 Let's get started!",
                            "display_name": "",
                            "documentation": "",
                            "template": {}
                        },
                        "type": "note"
                    },
                    "dragging": false,
                    "height": 573,
                    "id": "note-SQ4yw",
                    "measured": {
                        "height": 573,
                        "width": 328
                    },
                    "position": {
                        "x": 807.6293964045135,
                        "y": 605.6504562080672
                    },
                    "positionAbsolute": {
                        "x": 807.6293964045135,
                        "y": 605.6504562080672
                    },
                    "resizing": false,
                    "selected": false,
                    "style": {
                        "height": 573,
                        "width": 564
                    },
                    "type": "noteNode",
                    "width": 564
                },
                {
                    "data": {
                        "id": "URL-vp2La",
                        "node": {
                            "base_classes": [
                                "Data",
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Fetch content from one or more URLs.",
                            "display_name": "URL",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "urls",
                                "format"
                            ],
                            "frozen": false,
                            "icon": "layout-template",
                            "legacy": false,
                            "lf_version": "1.0.19.post2",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Data",
                                    "method": "fetch_content",
                                    "name": "data",
                                    "selected": "Data",
                                    "types": [
                                        "Data"
                                    ],
                                    "value": "__UNDEFINED__"
                                },
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "fetch_content_text",
                                    "name": "text",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                },
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "DataFrame",
                                    "method": "as_dataframe",
                                    "name": "dataframe",
                                    "selected": "DataFrame",
                                    "types": [
                                        "DataFrame"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "import re\n\nfrom langchain_community.document_loaders import AsyncHtmlLoader, WebBaseLoader\n\nfrom langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.schema import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\n\n\nclass URLComponent(Component):\n    display_name = \"URL\"\n    description = \"Load and retrive data from specified URLs.\"\n    icon = \"layout-template\"\n    name = \"URL\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"urls\",\n            display_name=\"URLs\",\n            is_list=True,\n            tool_mode=True,\n            placeholder=\"Enter a URL...\",\n            list_add_label=\"Add URL\",\n        ),\n        DropdownInput(\n            name=\"format\",\n            display_name=\"Output Format\",\n            info=\"Output Format. Use 'Text' to extract the text from the HTML or 'Raw HTML' for the raw HTML content.\",\n            options=[\"Text\", \"Raw HTML\"],\n            value=\"Text\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"fetch_content\"),\n        Output(display_name=\"Message\", name=\"text\", method=\"fetch_content_text\"),\n        Output(display_name=\"DataFrame\", name=\"dataframe\", method=\"as_dataframe\"),\n    ]\n\n    def ensure_url(self, string: str) -> str:\n        \"\"\"Ensures the given string is a URL by adding 'http://' if it doesn't start with 'http://' or 'https://'.\n\n        Raises an error if the string is not a valid URL.\n\n        Parameters:\n            string (str): The string to be checked and possibly modified.\n\n        Returns:\n            str: The modified string that is ensured to be a URL.\n\n        Raises:\n            ValueError: If the string is not a valid URL.\n        \"\"\"\n        if not string.startswith((\"http://\", \"https://\")):\n            string = \"http://\" + string\n\n        # Basic URL validation regex\n        url_regex = re.compile(\n            r\"^(https?:\\/\\/)?\"  # optional protocol\n            r\"(www\\.)?\"  # optional www\n            r\"([a-zA-Z0-9.-]+)\"  # domain\n            r\"(\\.[a-zA-Z]{2,})?\"  # top-level domain\n            r\"(:\\d+)?\"  # optional port\n            r\"(\\/[^\\s]*)?$\",  # optional path\n            re.IGNORECASE,\n        )\n\n        if not url_regex.match(string):\n            msg = f\"Invalid URL: {string}\"\n            raise ValueError(msg)\n\n        return string\n\n    def fetch_content(self) -> list[Data]:\n        urls = [self.ensure_url(url.strip()) for url in self.urls if url.strip()]\n        if self.format == \"Raw HTML\":\n            loader = AsyncHtmlLoader(web_path=urls, encoding=\"utf-8\")\n        else:\n            loader = WebBaseLoader(web_paths=urls, encoding=\"utf-8\")\n        docs = loader.load()\n        data = [Data(text=doc.page_content, **doc.metadata) for doc in docs]\n        self.status = data\n        return data\n\n    def fetch_content_text(self) -> Message:\n        data = self.fetch_content()\n\n        result_string = data_to_text(\"{text}\", data)\n        self.status = result_string\n        return Message(text=result_string)\n\n    def as_dataframe(self) -> DataFrame:\n        return DataFrame(self.fetch_content())\n"
                                },
                                "format": {
                                    "_input_type": "DropdownInput",
                                    "advanced": false,
                                    "combobox": false,
                                    "display_name": "Output Format",
                                    "dynamic": false,
                                    "info": "Output Format. Use 'Text' to extract the text from the HTML or 'Raw HTML' for the raw HTML content.",
                                    "name": "format",
                                    "options": [
                                        "Text",
                                        "Raw HTML"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Text"
                                },
                                "urls": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": false,
                                    "display_name": "URLs",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": true,
                                    "load_from_db": false,
                                    "name": "urls",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": true,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": [
                                        "https://raw.githubusercontent.com/langflow-ai/langflow/refs/heads/main/src/backend/base/langflow/custom/custom_component/component.py"
                                    ]
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "URL"
                    },
                    "dragging": false,
                    "height": 365,
                    "id": "URL-vp2La",
                    "measured": {
                        "height": 365,
                        "width": 360
                    },
                    "position": {
                        "x": 1436.3617127766433,
                        "y": 264.218898085405
                    },
                    "positionAbsolute": {
                        "x": 1436.3617127766433,
                        "y": 264.218898085405
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "id": "URL-l7pdF",
                        "node": {
                            "base_classes": [
                                "Data",
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Fetch content from one or more URLs.",
                            "display_name": "URL",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "urls",
                                "format"
                            ],
                            "frozen": false,
                            "icon": "layout-template",
                            "legacy": false,
                            "lf_version": "1.0.19.post2",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Data",
                                    "method": "fetch_content",
                                    "name": "data",
                                    "selected": "Data",
                                    "types": [
                                        "Data"
                                    ],
                                    "value": "__UNDEFINED__"
                                },
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "fetch_content_text",
                                    "name": "text",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                },
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "DataFrame",
                                    "method": "as_dataframe",
                                    "name": "dataframe",
                                    "selected": "DataFrame",
                                    "types": [
                                        "DataFrame"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "import re\n\nfrom langchain_community.document_loaders import AsyncHtmlLoader, WebBaseLoader\n\nfrom langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.schema import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\n\n\nclass URLComponent(Component):\n    display_name = \"URL\"\n    description = \"Load and retrive data from specified URLs.\"\n    icon = \"layout-template\"\n    name = \"URL\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"urls\",\n            display_name=\"URLs\",\n            is_list=True,\n            tool_mode=True,\n            placeholder=\"Enter a URL...\",\n            list_add_label=\"Add URL\",\n        ),\n        DropdownInput(\n            name=\"format\",\n            display_name=\"Output Format\",\n            info=\"Output Format. Use 'Text' to extract the text from the HTML or 'Raw HTML' for the raw HTML content.\",\n            options=[\"Text\", \"Raw HTML\"],\n            value=\"Text\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"fetch_content\"),\n        Output(display_name=\"Message\", name=\"text\", method=\"fetch_content_text\"),\n        Output(display_name=\"DataFrame\", name=\"dataframe\", method=\"as_dataframe\"),\n    ]\n\n    def ensure_url(self, string: str) -> str:\n        \"\"\"Ensures the given string is a URL by adding 'http://' if it doesn't start with 'http://' or 'https://'.\n\n        Raises an error if the string is not a valid URL.\n\n        Parameters:\n            string (str): The string to be checked and possibly modified.\n\n        Returns:\n            str: The modified string that is ensured to be a URL.\n\n        Raises:\n            ValueError: If the string is not a valid URL.\n        \"\"\"\n        if not string.startswith((\"http://\", \"https://\")):\n            string = \"http://\" + string\n\n        # Basic URL validation regex\n        url_regex = re.compile(\n            r\"^(https?:\\/\\/)?\"  # optional protocol\n            r\"(www\\.)?\"  # optional www\n            r\"([a-zA-Z0-9.-]+)\"  # domain\n            r\"(\\.[a-zA-Z]{2,})?\"  # top-level domain\n            r\"(:\\d+)?\"  # optional port\n            r\"(\\/[^\\s]*)?$\",  # optional path\n            re.IGNORECASE,\n        )\n\n        if not url_regex.match(string):\n            msg = f\"Invalid URL: {string}\"\n            raise ValueError(msg)\n\n        return string\n\n    def fetch_content(self) -> list[Data]:\n        urls = [self.ensure_url(url.strip()) for url in self.urls if url.strip()]\n        if self.format == \"Raw HTML\":\n            loader = AsyncHtmlLoader(web_path=urls, encoding=\"utf-8\")\n        else:\n            loader = WebBaseLoader(web_paths=urls, encoding=\"utf-8\")\n        docs = loader.load()\n        data = [Data(text=doc.page_content, **doc.metadata) for doc in docs]\n        self.status = data\n        return data\n\n    def fetch_content_text(self) -> Message:\n        data = self.fetch_content()\n\n        result_string = data_to_text(\"{text}\", data)\n        self.status = result_string\n        return Message(text=result_string)\n\n    def as_dataframe(self) -> DataFrame:\n        return DataFrame(self.fetch_content())\n"
                                },
                                "format": {
                                    "_input_type": "DropdownInput",
                                    "advanced": false,
                                    "combobox": false,
                                    "display_name": "Output Format",
                                    "dynamic": false,
                                    "info": "Output Format. Use 'Text' to extract the text from the HTML or 'Raw HTML' for the raw HTML content.",
                                    "name": "format",
                                    "options": [
                                        "Text",
                                        "Raw HTML"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Text"
                                },
                                "urls": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": false,
                                    "display_name": "URLs",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": true,
                                    "load_from_db": false,
                                    "name": "urls",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": true,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": [
                                        "https://github.com/langflow-ai/langflow/blob/main/src/backend/base/langflow/components/agents/agent.py",
                                        "https://github.com/langflow-ai/langflow/blob/main/src/backend/base/langflow/components/helpers/structured_output.py",
                                        "https://raw.githubusercontent.com/langflow-ai/langflow/refs/heads/main/src/backend/base/langflow/components/tools/calculator.py",
                                        "https://raw.githubusercontent.com/langflow-ai/langflow/refs/heads/main/src/backend/base/langflow/components/tools/tavily_search.py",
                                        "https://raw.githubusercontent.com/langflow-ai/langflow/refs/heads/main/src/backend/base/langflow/components/models/ollama.py",
                                        "https://raw.githubusercontent.com/langflow-ai/langflow/refs/heads/main/src/backend/base/langflow/components/logic/conditional_router.py",
                                        "https://raw.githubusercontent.com/langflow-ai/langflow/refs/heads/main/src/backend/base/langflow/components/data/file.py"
                                    ]
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "URL"
                    },
                    "dragging": false,
                    "height": 661,
                    "id": "URL-l7pdF",
                    "measured": {
                        "height": 661,
                        "width": 360
                    },
                    "position": {
                        "x": 1831.5895760156684,
                        "y": 245.62940316018893
                    },
                    "positionAbsolute": {
                        "x": 1831.5895760156684,
                        "y": 245.62940316018893
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "id": "URL-ak8Jx",
                        "node": {
                            "base_classes": [
                                "Data",
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Fetch content from one or more URLs.",
                            "display_name": "URL",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "urls",
                                "format"
                            ],
                            "frozen": false,
                            "icon": "layout-template",
                            "legacy": false,
                            "lf_version": "1.0.19.post2",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Data",
                                    "method": "fetch_content",
                                    "name": "data",
                                    "selected": "Data",
                                    "types": [
                                        "Data"
                                    ],
                                    "value": "__UNDEFINED__"
                                },
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "fetch_content_text",
                                    "name": "text",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                },
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "DataFrame",
                                    "method": "as_dataframe",
                                    "name": "dataframe",
                                    "selected": "DataFrame",
                                    "types": [
                                        "DataFrame"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "import re\n\nfrom langchain_community.document_loaders import AsyncHtmlLoader, WebBaseLoader\n\nfrom langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.schema import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\n\n\nclass URLComponent(Component):\n    display_name = \"URL\"\n    description = \"Load and retrive data from specified URLs.\"\n    icon = \"layout-template\"\n    name = \"URL\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"urls\",\n            display_name=\"URLs\",\n            is_list=True,\n            tool_mode=True,\n            placeholder=\"Enter a URL...\",\n            list_add_label=\"Add URL\",\n        ),\n        DropdownInput(\n            name=\"format\",\n            display_name=\"Output Format\",\n            info=\"Output Format. Use 'Text' to extract the text from the HTML or 'Raw HTML' for the raw HTML content.\",\n            options=[\"Text\", \"Raw HTML\"],\n            value=\"Text\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"fetch_content\"),\n        Output(display_name=\"Message\", name=\"text\", method=\"fetch_content_text\"),\n        Output(display_name=\"DataFrame\", name=\"dataframe\", method=\"as_dataframe\"),\n    ]\n\n    def ensure_url(self, string: str) -> str:\n        \"\"\"Ensures the given string is a URL by adding 'http://' if it doesn't start with 'http://' or 'https://'.\n\n        Raises an error if the string is not a valid URL.\n\n        Parameters:\n            string (str): The string to be checked and possibly modified.\n\n        Returns:\n            str: The modified string that is ensured to be a URL.\n\n        Raises:\n            ValueError: If the string is not a valid URL.\n        \"\"\"\n        if not string.startswith((\"http://\", \"https://\")):\n            string = \"http://\" + string\n\n        # Basic URL validation regex\n        url_regex = re.compile(\n            r\"^(https?:\\/\\/)?\"  # optional protocol\n            r\"(www\\.)?\"  # optional www\n            r\"([a-zA-Z0-9.-]+)\"  # domain\n            r\"(\\.[a-zA-Z]{2,})?\"  # top-level domain\n            r\"(:\\d+)?\"  # optional port\n            r\"(\\/[^\\s]*)?$\",  # optional path\n            re.IGNORECASE,\n        )\n\n        if not url_regex.match(string):\n            msg = f\"Invalid URL: {string}\"\n            raise ValueError(msg)\n\n        return string\n\n    def fetch_content(self) -> list[Data]:\n        urls = [self.ensure_url(url.strip()) for url in self.urls if url.strip()]\n        if self.format == \"Raw HTML\":\n            loader = AsyncHtmlLoader(web_path=urls, encoding=\"utf-8\")\n        else:\n            loader = WebBaseLoader(web_paths=urls, encoding=\"utf-8\")\n        docs = loader.load()\n        data = [Data(text=doc.page_content, **doc.metadata) for doc in docs]\n        self.status = data\n        return data\n\n    def fetch_content_text(self) -> Message:\n        data = self.fetch_content()\n\n        result_string = data_to_text(\"{text}\", data)\n        self.status = result_string\n        return Message(text=result_string)\n\n    def as_dataframe(self) -> DataFrame:\n        return DataFrame(self.fetch_content())\n"
                                },
                                "format": {
                                    "_input_type": "DropdownInput",
                                    "advanced": false,
                                    "combobox": false,
                                    "display_name": "Output Format",
                                    "dynamic": false,
                                    "info": "Output Format. Use 'Text' to extract the text from the HTML or 'Raw HTML' for the raw HTML content.",
                                    "name": "format",
                                    "options": [
                                        "Text",
                                        "Raw HTML"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Text"
                                },
                                "urls": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": false,
                                    "display_name": "URLs",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": true,
                                    "load_from_db": false,
                                    "name": "urls",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": true,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": [
                                        "https://raw.githubusercontent.com/langflow-ai/langflow/refs/heads/main/src/backend/base/langflow/components/custom_component/custom_component.py"
                                    ]
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "URL"
                    },
                    "dragging": false,
                    "height": 365,
                    "id": "URL-ak8Jx",
                    "measured": {
                        "height": 365,
                        "width": 360
                    },
                    "position": {
                        "x": 1436.982480021523,
                        "y": 651.1409296825055
                    },
                    "positionAbsolute": {
                        "x": 1436.982480021523,
                        "y": 651.1409296825055
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "id": "AnthropicModel-L37Qm",
                        "node": {
                            "base_classes": [
                                "LanguageModel",
                                "Message"
                            ],
                            "beta": false,
                            "category": "models",
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Generate text using Anthropic Chat&Completion LLMs with prefill support.",
                            "display_name": "Anthropic",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "input_value",
                                "system_message",
                                "stream",
                                "max_tokens",
                                "model_name",
                                "api_key",
                                "temperature",
                                "base_url",
                                "tool_model_enabled",
                                "prefill"
                            ],
                            "frozen": false,
                            "icon": "Anthropic",
                            "key": "AnthropicModel",
                            "legacy": false,
                            "metadata": {},
                            "minimized": false,
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "text_response",
                                    "name": "text_output",
                                    "required_inputs": [],
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                },
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Language Model",
                                    "method": "build_model",
                                    "name": "model_output",
                                    "required_inputs": [
                                        "api_key"
                                    ],
                                    "selected": "LanguageModel",
                                    "types": [
                                        "LanguageModel"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "score": 0.0005851173668140926,
                            "template": {
                                "_type": "Component",
                                "api_key": {
                                    "_input_type": "SecretStrInput",
                                    "advanced": false,
                                    "display_name": "Anthropic API Key",
                                    "dynamic": false,
                                    "info": "Your Anthropic API key.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "load_from_db": true,
                                    "name": "api_key",
                                    "password": true,
                                    "placeholder": "",
                                    "real_time_refresh": true,
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": ""
                                },
                                "base_url": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": false,
                                    "display_name": "Anthropic API URL",
                                    "dynamic": false,
                                    "info": "Endpoint of the Anthropic API. Defaults to 'https://api.anthropic.com' if not specified.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "name": "base_url",
                                    "placeholder": "",
                                    "real_time_refresh": true,
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "https://api.anthropic.com"
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from typing import Any\n\nimport requests\nfrom loguru import logger\n\nfrom langflow.base.models.anthropic_constants import ANTHROPIC_MODELS\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.field_typing import LanguageModel\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.io import BoolInput, DropdownInput, IntInput, MessageTextInput, SecretStrInput, SliderInput\nfrom langflow.schema.dotdict import dotdict\n\n\nclass AnthropicModelComponent(LCModelComponent):\n    display_name = \"Anthropic\"\n    description = \"Generate text using Anthropic Chat&Completion LLMs with prefill support.\"\n    icon = \"Anthropic\"\n    name = \"AnthropicModel\"\n\n    inputs = [\n        *LCModelComponent._base_inputs,\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            value=4096,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            options=ANTHROPIC_MODELS,\n            refresh_button=True,\n            value=ANTHROPIC_MODELS[0],\n            combobox=True,\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"Anthropic API Key\",\n            info=\"Your Anthropic API key.\",\n            value=None,\n            required=True,\n            real_time_refresh=True,\n        ),\n        SliderInput(\n            name=\"temperature\",\n            display_name=\"Temperature\",\n            value=0.1,\n            info=\"Run inference with this temperature. Must by in the closed interval [0.0, 1.0].\",\n            range_spec=RangeSpec(min=0, max=1, step=0.01),\n        ),\n        MessageTextInput(\n            name=\"base_url\",\n            display_name=\"Anthropic API URL\",\n            info=\"Endpoint of the Anthropic API. Defaults to 'https://api.anthropic.com' if not specified.\",\n            value=\"https://api.anthropic.com\",\n            real_time_refresh=True,\n        ),\n        BoolInput(\n            name=\"tool_model_enabled\",\n            display_name=\"Enable Tool Models\",\n            info=(\n                \"Select if you want to use models that can work with tools. If yes, only those models will be shown.\"\n            ),\n            advanced=False,\n            value=True,\n            real_time_refresh=True,\n        ),\n        MessageTextInput(\n            name=\"prefill\", display_name=\"Prefill\", info=\"Prefill text to guide the model's response.\", advanced=True\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        try:\n            from langchain_anthropic.chat_models import ChatAnthropic\n        except ImportError as e:\n            msg = \"langchain_anthropic is not installed. Please install it with `pip install langchain_anthropic`.\"\n            raise ImportError(msg) from e\n        try:\n            output = ChatAnthropic(\n                model=self.model_name,\n                anthropic_api_key=self.api_key,\n                max_tokens_to_sample=self.max_tokens,\n                temperature=self.temperature,\n                anthropic_api_url=self.base_url,\n                streaming=self.stream,\n            )\n        except Exception as e:\n            msg = \"Could not connect to Anthropic API.\"\n            raise ValueError(msg) from e\n\n        return output\n\n    def get_models(self, tool_model_enabled: bool | None = None) -> list[str]:\n        try:\n            import anthropic\n\n            client = anthropic.Anthropic(api_key=self.api_key)\n            models = client.models.list(limit=20).data\n            model_ids = [model.id for model in models]\n        except (ImportError, ValueError, requests.exceptions.RequestException) as e:\n            logger.exception(f\"Error getting model names: {e}\")\n            model_ids = ANTHROPIC_MODELS\n        if tool_model_enabled:\n            try:\n                from langchain_anthropic.chat_models import ChatAnthropic\n            except ImportError as e:\n                msg = \"langchain_anthropic is not installed. Please install it with `pip install langchain_anthropic`.\"\n                raise ImportError(msg) from e\n            for model in model_ids:\n                model_with_tool = ChatAnthropic(\n                    model=self.model_name,\n                    anthropic_api_key=self.api_key,\n                    anthropic_api_url=self.base_url,\n                )\n                if not self.supports_tool_calling(model_with_tool):\n                    model_ids.remove(model)\n        return model_ids\n\n    def _get_exception_message(self, exception: Exception) -> str | None:\n        \"\"\"Get a message from an Anthropic exception.\n\n        Args:\n            exception (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n        try:\n            from anthropic import BadRequestError\n        except ImportError:\n            return None\n        if isinstance(exception, BadRequestError):\n            message = exception.body.get(\"error\", {}).get(\"message\")\n            if message:\n                return message\n        return None\n\n    def update_build_config(self, build_config: dotdict, field_value: Any, field_name: str | None = None):\n        if field_name in (\"base_url\", \"model_name\", \"tool_model_enabled\", \"api_key\") and field_value:\n            try:\n                if len(self.api_key) == 0:\n                    ids = ANTHROPIC_MODELS\n                else:\n                    try:\n                        ids = self.get_models(tool_model_enabled=self.tool_model_enabled)\n                    except (ImportError, ValueError, requests.exceptions.RequestException) as e:\n                        logger.exception(f\"Error getting model names: {e}\")\n                        ids = ANTHROPIC_MODELS\n                build_config[\"model_name\"][\"options\"] = ids\n                build_config[\"model_name\"][\"value\"] = ids[0]\n            except Exception as e:\n                msg = f\"Error getting model names: {e}\"\n                raise ValueError(msg) from e\n        return build_config\n"
                                },
                                "input_value": {
                                    "_input_type": "MessageInput",
                                    "advanced": false,
                                    "display_name": "Input",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "max_tokens": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Max Tokens",
                                    "dynamic": false,
                                    "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "max_tokens",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 4096
                                },
                                "model_name": {
                                    "_input_type": "DropdownInput",
                                    "advanced": false,
                                    "combobox": true,
                                    "dialog_inputs": {},
                                    "display_name": "Model Name",
                                    "dynamic": false,
                                    "info": "",
                                    "name": "model_name",
                                    "options": [
                                        "claude-3-5-sonnet-latest",
                                        "claude-3-5-haiku-latest",
                                        "claude-3-opus-latest",
                                        "claude-3-5-sonnet-20240620",
                                        "claude-3-5-sonnet-20241022",
                                        "claude-3-5-haiku-20241022",
                                        "claude-3-sonnet-20240229",
                                        "claude-3-haiku-20240307"
                                    ],
                                    "options_metadata": [],
                                    "placeholder": "",
                                    "refresh_button": true,
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "claude-3-5-sonnet-latest"
                                },
                                "prefill": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Prefill",
                                    "dynamic": false,
                                    "info": "Prefill text to guide the model's response.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "name": "prefill",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "stream": {
                                    "_input_type": "BoolInput",
                                    "advanced": false,
                                    "display_name": "Stream",
                                    "dynamic": false,
                                    "info": "Stream the response from the model. Streaming works only in Chat.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "stream",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "system_message": {
                                    "_input_type": "MultilineInput",
                                    "advanced": false,
                                    "display_name": "System Message",
                                    "dynamic": false,
                                    "info": "System message to pass to the model.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "system_message",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "temperature": {
                                    "_input_type": "SliderInput",
                                    "advanced": false,
                                    "display_name": "Temperature",
                                    "dynamic": false,
                                    "info": "Run inference with this temperature. Must by in the closed interval [0.0, 1.0].",
                                    "max_label": "",
                                    "max_label_icon": "",
                                    "min_label": "",
                                    "min_label_icon": "",
                                    "name": "temperature",
                                    "placeholder": "",
                                    "range_spec": {
                                        "max": 1,
                                        "min": 0,
                                        "step": 0.01,
                                        "step_type": "float"
                                    },
                                    "required": false,
                                    "show": true,
                                    "slider_buttons": false,
                                    "slider_buttons_options": [],
                                    "slider_input": false,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "type": "slider",
                                    "value": 0.1
                                },
                                "tool_model_enabled": {
                                    "_input_type": "BoolInput",
                                    "advanced": false,
                                    "display_name": "Enable Tool Models",
                                    "dynamic": false,
                                    "info": "Select if you want to use models that can work with tools. If yes, only those models will be shown.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "tool_model_enabled",
                                    "placeholder": "",
                                    "real_time_refresh": true,
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                }
                            },
                            "tool_mode": false
                        },
                        "showNode": true,
                        "type": "AnthropicModel"
                    },
                    "dragging": false,
                    "id": "AnthropicModel-L37Qm",
                    "measured": {
                        "height": 896,
                        "width": 360
                    },
                    "position": {
                        "x": 2585.5577736139826,
                        "y": 454.98013556663204
                    },
                    "selected": false,
                    "type": "genericNode"
                }
            ],
            "viewport": {
                "x": -637.4755295542625,
                "y": -182.36005379554103,
                "zoom": 0.5837207970729746
            }
        },
        "is_component": false,
        "updated_at": "2025-01-25T04:58:25+00:00",
        "webhook": false,
        "endpoint_name": null,
        "tags": [
            "coding",
            "web-scraping"
        ],
        "locked": false,
        "id": "10b83dfd-6417-4a94-8293-d67e0de1520c",
        "user_id": null,
        "folder_id": "c54584e6-88eb-4ac0-b70c-68aee37fdce2"
    },
    {
        "name": "Instagram Copywriter",
        "description": " Create engaging Instagram posts with AI-generated content and image prompts, streamlining social media content creation.",
        "icon": "InstagramIcon",
        "icon_bg_color": null,
        "gradient": "0",
        "data": {
            "edges": [
                {
                    "animated": false,
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "TextInput",
                            "id": "TextInput-Uonj7",
                            "name": "text",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "guidelines",
                            "id": "Prompt-DfQRZ",
                            "inputTypes": [
                                "Message",
                                "Text"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "reactflow__edge-TextInput-Uonj7{\u0153dataType\u0153:\u0153TextInput\u0153,\u0153id\u0153:\u0153TextInput-Uonj7\u0153,\u0153name\u0153:\u0153text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-Prompt-DfQRZ{\u0153fieldName\u0153:\u0153guidelines\u0153,\u0153id\u0153:\u0153Prompt-DfQRZ\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153,\u0153Text\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "TextInput-Uonj7",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153TextInput\u0153, \u0153id\u0153: \u0153TextInput-Uonj7\u0153, \u0153name\u0153: \u0153text\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "Prompt-DfQRZ",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153guidelines\u0153, \u0153id\u0153: \u0153Prompt-DfQRZ\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153, \u0153Text\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "animated": false,
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "ChatInput",
                            "id": "ChatInput-ferrV",
                            "name": "message",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "input_value",
                            "id": "Agent-pNUOq",
                            "inputTypes": [
                                "Message"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "reactflow__edge-ChatInput-ferrV{\u0153dataType\u0153:\u0153ChatInput\u0153,\u0153id\u0153:\u0153ChatInput-ferrV\u0153,\u0153name\u0153:\u0153message\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-Agent-pNUOq{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153Agent-pNUOq\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "ChatInput-ferrV",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153ChatInput\u0153, \u0153id\u0153: \u0153ChatInput-ferrV\u0153, \u0153name\u0153: \u0153message\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "Agent-pNUOq",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153input_value\u0153, \u0153id\u0153: \u0153Agent-pNUOq\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "animated": false,
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "Agent",
                            "id": "Agent-pNUOq",
                            "name": "response",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "context",
                            "id": "Prompt-DfQRZ",
                            "inputTypes": [
                                "Message",
                                "Text"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "reactflow__edge-Agent-pNUOq{\u0153dataType\u0153:\u0153Agent\u0153,\u0153id\u0153:\u0153Agent-pNUOq\u0153,\u0153name\u0153:\u0153response\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-Prompt-DfQRZ{\u0153fieldName\u0153:\u0153context\u0153,\u0153id\u0153:\u0153Prompt-DfQRZ\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153,\u0153Text\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "Agent-pNUOq",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153Agent\u0153, \u0153id\u0153: \u0153Agent-pNUOq\u0153, \u0153name\u0153: \u0153response\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "Prompt-DfQRZ",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153context\u0153, \u0153id\u0153: \u0153Prompt-DfQRZ\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153, \u0153Text\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "animated": false,
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "Prompt",
                            "id": "Prompt-R9hC2",
                            "name": "prompt",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "input_value",
                            "id": "ChatOutput-hU0Qy",
                            "inputTypes": [
                                "Message"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "reactflow__edge-Prompt-R9hC2{\u0153dataType\u0153:\u0153Prompt\u0153,\u0153id\u0153:\u0153Prompt-R9hC2\u0153,\u0153name\u0153:\u0153prompt\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-ChatOutput-hU0Qy{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153ChatOutput-hU0Qy\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "Prompt-R9hC2",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153Prompt\u0153, \u0153id\u0153: \u0153Prompt-R9hC2\u0153, \u0153name\u0153: \u0153prompt\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "ChatOutput-hU0Qy",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153input_value\u0153, \u0153id\u0153: \u0153ChatOutput-hU0Qy\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "TavilySearchComponent",
                            "id": "TavilySearchComponent-h8yAo",
                            "name": "component_as_tool",
                            "output_types": [
                                "Tool"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "tools",
                            "id": "Agent-pNUOq",
                            "inputTypes": [
                                "Tool"
                            ],
                            "type": "other"
                        }
                    },
                    "id": "reactflow__edge-TavilySearchComponent-h8yAo{\u0153dataType\u0153:\u0153TavilySearchComponent\u0153,\u0153id\u0153:\u0153TavilySearchComponent-h8yAo\u0153,\u0153name\u0153:\u0153component_as_tool\u0153,\u0153output_types\u0153:[\u0153Tool\u0153]}-Agent-pNUOq{\u0153fieldName\u0153:\u0153tools\u0153,\u0153id\u0153:\u0153Agent-pNUOq\u0153,\u0153inputTypes\u0153:[\u0153Tool\u0153],\u0153type\u0153:\u0153other\u0153}",
                    "source": "TavilySearchComponent-h8yAo",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153TavilySearchComponent\u0153, \u0153id\u0153: \u0153TavilySearchComponent-h8yAo\u0153, \u0153name\u0153: \u0153component_as_tool\u0153, \u0153output_types\u0153: [\u0153Tool\u0153]}",
                    "target": "Agent-pNUOq",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153tools\u0153, \u0153id\u0153: \u0153Agent-pNUOq\u0153, \u0153inputTypes\u0153: [\u0153Tool\u0153], \u0153type\u0153: \u0153other\u0153}"
                },
                {
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "Prompt",
                            "id": "Prompt-DfQRZ",
                            "name": "prompt",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "input_value",
                            "id": "OpenAIModel-N7jW7",
                            "inputTypes": [
                                "Message"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "reactflow__edge-Prompt-DfQRZ{\u0153dataType\u0153:\u0153Prompt\u0153,\u0153id\u0153:\u0153Prompt-DfQRZ\u0153,\u0153name\u0153:\u0153prompt\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-OpenAIModel-N7jW7{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153OpenAIModel-N7jW7\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "Prompt-DfQRZ",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153Prompt\u0153, \u0153id\u0153: \u0153Prompt-DfQRZ\u0153, \u0153name\u0153: \u0153prompt\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "OpenAIModel-N7jW7",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153input_value\u0153, \u0153id\u0153: \u0153OpenAIModel-N7jW7\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "OpenAIModel",
                            "id": "OpenAIModel-N7jW7",
                            "name": "text_output",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "post",
                            "id": "Prompt-OcCWU",
                            "inputTypes": [
                                "Message",
                                "Text"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "reactflow__edge-OpenAIModel-N7jW7{\u0153dataType\u0153:\u0153OpenAIModel\u0153,\u0153id\u0153:\u0153OpenAIModel-N7jW7\u0153,\u0153name\u0153:\u0153text_output\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-Prompt-OcCWU{\u0153fieldName\u0153:\u0153post\u0153,\u0153id\u0153:\u0153Prompt-OcCWU\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153,\u0153Text\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "OpenAIModel-N7jW7",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153OpenAIModel\u0153, \u0153id\u0153: \u0153OpenAIModel-N7jW7\u0153, \u0153name\u0153: \u0153text_output\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "Prompt-OcCWU",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153post\u0153, \u0153id\u0153: \u0153Prompt-OcCWU\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153, \u0153Text\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "OpenAIModel",
                            "id": "OpenAIModel-N7jW7",
                            "name": "text_output",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "post",
                            "id": "Prompt-R9hC2",
                            "inputTypes": [
                                "Message",
                                "Text"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "reactflow__edge-OpenAIModel-N7jW7{\u0153dataType\u0153:\u0153OpenAIModel\u0153,\u0153id\u0153:\u0153OpenAIModel-N7jW7\u0153,\u0153name\u0153:\u0153text_output\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-Prompt-R9hC2{\u0153fieldName\u0153:\u0153post\u0153,\u0153id\u0153:\u0153Prompt-R9hC2\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153,\u0153Text\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "OpenAIModel-N7jW7",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153OpenAIModel\u0153, \u0153id\u0153: \u0153OpenAIModel-N7jW7\u0153, \u0153name\u0153: \u0153text_output\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "Prompt-R9hC2",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153post\u0153, \u0153id\u0153: \u0153Prompt-R9hC2\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153, \u0153Text\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "Prompt",
                            "id": "Prompt-OcCWU",
                            "name": "prompt",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "input_value",
                            "id": "OpenAIModel-DdNth",
                            "inputTypes": [
                                "Message"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "reactflow__edge-Prompt-OcCWU{\u0153dataType\u0153:\u0153Prompt\u0153,\u0153id\u0153:\u0153Prompt-OcCWU\u0153,\u0153name\u0153:\u0153prompt\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-OpenAIModel-DdNth{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153OpenAIModel-DdNth\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "Prompt-OcCWU",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153Prompt\u0153, \u0153id\u0153: \u0153Prompt-OcCWU\u0153, \u0153name\u0153: \u0153prompt\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "OpenAIModel-DdNth",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153input_value\u0153, \u0153id\u0153: \u0153OpenAIModel-DdNth\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "OpenAIModel",
                            "id": "OpenAIModel-DdNth",
                            "name": "text_output",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "image_description",
                            "id": "Prompt-R9hC2",
                            "inputTypes": [
                                "Message",
                                "Text"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "reactflow__edge-OpenAIModel-DdNth{\u0153dataType\u0153:\u0153OpenAIModel\u0153,\u0153id\u0153:\u0153OpenAIModel-DdNth\u0153,\u0153name\u0153:\u0153text_output\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-Prompt-R9hC2{\u0153fieldName\u0153:\u0153image_description\u0153,\u0153id\u0153:\u0153Prompt-R9hC2\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153,\u0153Text\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "OpenAIModel-DdNth",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153OpenAIModel\u0153, \u0153id\u0153: \u0153OpenAIModel-DdNth\u0153, \u0153name\u0153: \u0153text_output\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "Prompt-R9hC2",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153image_description\u0153, \u0153id\u0153: \u0153Prompt-R9hC2\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153, \u0153Text\u0153], \u0153type\u0153: \u0153str\u0153}"
                }
            ],
            "nodes": [
                {
                    "data": {
                        "id": "ChatInput-ferrV",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Get chat inputs from the Playground.",
                            "display_name": "Chat Input",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "input_value",
                                "should_store_message",
                                "sender",
                                "sender_name",
                                "session_id",
                                "files",
                                "background_color",
                                "chat_icon",
                                "text_color"
                            ],
                            "frozen": false,
                            "icon": "MessagesSquare",
                            "legacy": false,
                            "lf_version": "1.1.1",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "message_response",
                                    "name": "message",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "background_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Background Color",
                                    "dynamic": false,
                                    "info": "The background color of the icon.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "background_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "chat_icon": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Icon",
                                    "dynamic": false,
                                    "info": "The icon of the message.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "chat_icon",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import (\n    DropdownInput,\n    FileInput,\n    MessageTextInput,\n    MultilineInput,\n    Output,\n)\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_USER,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatInput\"\n    minimized = True\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n            input_types=[],\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    async def message_response(self) -> Message:\n        background_color = self.background_color\n        text_color = self.text_color\n        icon = self.chat_icon\n\n        message = await Message.create(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n            properties={\n                \"background_color\": background_color,\n                \"text_color\": text_color,\n                \"icon\": icon,\n            },\n        )\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n"
                                },
                                "files": {
                                    "_input_type": "FileInput",
                                    "advanced": true,
                                    "display_name": "Files",
                                    "dynamic": false,
                                    "fileTypes": [
                                        "txt",
                                        "md",
                                        "mdx",
                                        "csv",
                                        "json",
                                        "yaml",
                                        "yml",
                                        "xml",
                                        "html",
                                        "htm",
                                        "pdf",
                                        "docx",
                                        "py",
                                        "sh",
                                        "sql",
                                        "js",
                                        "ts",
                                        "tsx",
                                        "jpg",
                                        "jpeg",
                                        "png",
                                        "bmp",
                                        "image"
                                    ],
                                    "file_path": "",
                                    "info": "Files to be sent with the message.",
                                    "list": true,
                                    "name": "files",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "file",
                                    "value": ""
                                },
                                "input_value": {
                                    "_input_type": "MultilineInput",
                                    "advanced": false,
                                    "display_name": "Text",
                                    "dynamic": false,
                                    "info": "Message to be passed as input.",
                                    "input_types": [],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Create a Langflow post"
                                },
                                "sender": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Sender Type",
                                    "dynamic": false,
                                    "info": "Type of sender.",
                                    "name": "sender",
                                    "options": [
                                        "Machine",
                                        "User"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "User"
                                },
                                "sender_name": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Sender Name",
                                    "dynamic": false,
                                    "info": "Name of the sender.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "sender_name",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "User"
                                },
                                "session_id": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Session ID",
                                    "dynamic": false,
                                    "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "session_id",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "should_store_message": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Store Messages",
                                    "dynamic": false,
                                    "info": "Store the message in the history.",
                                    "list": false,
                                    "name": "should_store_message",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "text_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Text Color",
                                    "dynamic": false,
                                    "info": "The text color of the name",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "text_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                }
                            }
                        },
                        "type": "ChatInput"
                    },
                    "dragging": false,
                    "height": 234,
                    "id": "ChatInput-ferrV",
                    "measured": {
                        "height": 234,
                        "width": 360
                    },
                    "position": {
                        "x": 5183.264962599111,
                        "y": 3024.7129453201533
                    },
                    "positionAbsolute": {
                        "x": 5183.264962599111,
                        "y": 3024.7129453201533
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "description": "Create a prompt template with dynamic variables.",
                        "display_name": "Prompt",
                        "id": "Prompt-DfQRZ",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {
                                "template": [
                                    "context",
                                    "guidelines"
                                ]
                            },
                            "description": "Create a prompt template with dynamic variables.",
                            "display_name": "Prompt",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "template"
                            ],
                            "frozen": false,
                            "icon": "prompts",
                            "legacy": false,
                            "lf_version": "1.0.19.post2",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Prompt Message",
                                    "method": "build_prompt",
                                    "name": "prompt",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import MessageTextInput, Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            tool_mode=True,\n            advanced=True,\n            info=\"A placeholder input for tool mode.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    async def update_frontend_node(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = await super().update_frontend_node(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n"
                                },
                                "context": {
                                    "advanced": false,
                                    "display_name": "context",
                                    "dynamic": false,
                                    "field_type": "str",
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "input_types": [
                                        "Message",
                                        "Text"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "context",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": ""
                                },
                                "guidelines": {
                                    "advanced": false,
                                    "display_name": "guidelines",
                                    "dynamic": false,
                                    "field_type": "str",
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "input_types": [
                                        "Message",
                                        "Text"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "guidelines",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": ""
                                },
                                "template": {
                                    "_input_type": "PromptInput",
                                    "advanced": false,
                                    "display_name": "Template",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "template",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "type": "prompt",
                                    "value": "Based on the following context: \n\n{context} \n\n\nFollow these guidelines: \n\n{guidelines}"
                                },
                                "tool_placeholder": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Tool Placeholder",
                                    "dynamic": false,
                                    "info": "A placeholder input for tool mode.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "tool_placeholder",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": true,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "Prompt"
                    },
                    "dragging": false,
                    "height": 433,
                    "id": "Prompt-DfQRZ",
                    "measured": {
                        "height": 433,
                        "width": 360
                    },
                    "position": {
                        "x": 6044.447585613556,
                        "y": 2937.851014457363
                    },
                    "positionAbsolute": {
                        "x": 6013.179772864059,
                        "y": 2937.851014457363
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "id": "TextInput-Uonj7",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Get text inputs from the Playground.",
                            "display_name": "Text Input",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "input_value"
                            ],
                            "frozen": false,
                            "icon": "type",
                            "legacy": false,
                            "lf_version": "1.0.19.post2",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "text_response",
                                    "name": "text",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.base.io.text import TextComponent\nfrom langflow.io import MultilineInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        return Message(\n            text=self.input_value,\n        )\n"
                                },
                                "input_value": {
                                    "_input_type": "MultilineInput",
                                    "advanced": false,
                                    "display_name": "Text",
                                    "dynamic": false,
                                    "info": "Text to be passed as input.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Build a post for Instagram:\n\n1. **Opening Line**: Start with a powerful, intriguing question or statement to grab attention. Example: \"Ever wondered what it feels like to fly?\"\n\n2. **Main Content**: \n   - Briefly share a personal story or insight related to the opening line. Keep it engaging and relatable.\n   - Include valuable information or a lesson learned that your audience can benefit from.\n\n3. **Emojis**: Integrate emojis naturally within your text to emphasize key points and add a playful tone.\n\n4. **Call to Action (CTA)**: End with a clear CTA. Encourage your audience to share their thoughts, experiences, or to take a specific action. Example: \"Share your dream adventure in the comments! \ud83c\udf0d\u2708\ufe0f\"\n\n5. **Hashtags**: Conclude with a selection of relevant hashtags. Place them at the end of your post to maintain focus on your message."
                                }
                            }
                        },
                        "type": "TextInput"
                    },
                    "dragging": false,
                    "height": 234,
                    "id": "TextInput-Uonj7",
                    "measured": {
                        "height": 234,
                        "width": 360
                    },
                    "position": {
                        "x": 5672.768365094557,
                        "y": 3457.8151629350077
                    },
                    "positionAbsolute": {
                        "x": 5671.190001393486,
                        "y": 3422.371192525402
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "description": "Create a prompt template with dynamic variables.",
                        "display_name": "Prompt",
                        "id": "Prompt-OcCWU",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {
                                "template": [
                                    "post"
                                ]
                            },
                            "description": "Create a prompt template with dynamic variables.",
                            "display_name": "Prompt",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "template"
                            ],
                            "frozen": false,
                            "icon": "prompts",
                            "legacy": false,
                            "lf_version": "1.0.19.post2",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Prompt Message",
                                    "method": "build_prompt",
                                    "name": "prompt",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import MessageTextInput, Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            tool_mode=True,\n            advanced=True,\n            info=\"A placeholder input for tool mode.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    async def update_frontend_node(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = await super().update_frontend_node(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n"
                                },
                                "post": {
                                    "advanced": false,
                                    "display_name": "post",
                                    "dynamic": false,
                                    "field_type": "str",
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "input_types": [
                                        "Message",
                                        "Text"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "post",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": ""
                                },
                                "template": {
                                    "_input_type": "PromptInput",
                                    "advanced": false,
                                    "display_name": "Template",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "template",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "type": "prompt",
                                    "value": "Based on the following post: \n\n{post} \n\nCraft a compelling prompt for image generator involving a blend of specificity, creativity, and clarity. Begin with a clear, concise description of the subject or scene you envision, incorporating specific details such as the setting, mood, and any key elements that are crucial to your vision. It's important to use descriptive language that conveys not just the visual aspects but also the emotional tone or atmosphere you wish to capture. Modifiers that specify the style, technique, or artistic influences can greatly enhance the prompt, guiding the AI to produce results that align closely with your expectations. Additionally, consider including any particular textures, lighting styles, or perspectives that will help refine the image to your liking. The goal is to provide Leonardo AI with a well-rounded, detailed description that leaves little room for ambiguity, enabling it to generate an image that closely matches your request.\n\nA good prompt should read like a brief to an artist, containing all the necessary information but leaving enough creative freedom for the AI to work effectively. It's a delicate balance between being overly prescriptive and too vague. The inclusion of what to avoid, using negative prompts, can also be helpful in steering the AI away from undesired outcomes. Remember, the effectiveness of a prompt often improves with experimentation and iteration, refining your approach based on the results you receive.\n\nExample 1: \"Create a digital painting of a serene lakeside at dusk, reflecting the vibrant hues of the sunset. The scene should be framed by weeping willows, with a lone wooden rowboat gently bobbing on the water's surface. Aim for a realistic style with a touch of impressionism, focusing on the interplay of light and shadow.\"\n\nExample 2: \"Illustrate a bustling medieval marketplace scene, vibrant and full of life, set within a walled city. Include diverse merchants, from a blacksmith to a spice trader, and townsfolk in period attire. The artwork should capture the dynamic energy of the market, with attention to historical accuracy and rich, earthy colors. Opt for a detailed, digital illustration style that brings out the textures of fabrics, metals, and natural elements.\""
                                },
                                "tool_placeholder": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Tool Placeholder",
                                    "dynamic": false,
                                    "info": "A placeholder input for tool mode.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "tool_placeholder",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": true,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "Prompt"
                    },
                    "dragging": false,
                    "height": 347,
                    "id": "Prompt-OcCWU",
                    "measured": {
                        "height": 347,
                        "width": 360
                    },
                    "position": {
                        "x": 6818.9410289594325,
                        "y": 3033.5959958342423
                    },
                    "positionAbsolute": {
                        "x": 6786.650693383261,
                        "y": 3042.4668667721307
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "description": "Display a chat message in the Playground.",
                        "display_name": "Chat Output",
                        "id": "ChatOutput-hU0Qy",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Display a chat message in the Playground.",
                            "display_name": "Chat Output",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "input_value",
                                "should_store_message",
                                "sender",
                                "sender_name",
                                "session_id",
                                "data_template",
                                "background_color",
                                "chat_icon",
                                "text_color"
                            ],
                            "frozen": false,
                            "icon": "MessagesSquare",
                            "legacy": false,
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "message_response",
                                    "name": "message",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "background_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Background Color",
                                    "dynamic": false,
                                    "info": "The background color of the icon.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "background_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "chat_icon": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Icon",
                                    "dynamic": false,
                                    "info": "The icon of the message.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "chat_icon",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, MessageInput, MessageTextInput, Output\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        MessageInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            source_dict[\"source\"] = source\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n        background_color = self.background_color\n        text_color = self.text_color\n        if self.chat_icon:\n            icon = self.chat_icon\n        message = self.input_value if isinstance(self.input_value, Message) else Message(text=self.input_value)\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n        message.properties.icon = icon\n        message.properties.background_color = background_color\n        message.properties.text_color = text_color\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n"
                                },
                                "data_template": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Data Template",
                                    "dynamic": false,
                                    "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "data_template",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "{text}"
                                },
                                "input_value": {
                                    "_input_type": "MessageInput",
                                    "advanced": false,
                                    "display_name": "Text",
                                    "dynamic": false,
                                    "info": "Message to be passed as output.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "sender": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Sender Type",
                                    "dynamic": false,
                                    "info": "Type of sender.",
                                    "name": "sender",
                                    "options": [
                                        "Machine",
                                        "User"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Machine"
                                },
                                "sender_name": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Sender Name",
                                    "dynamic": false,
                                    "info": "Name of the sender.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "sender_name",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "AI"
                                },
                                "session_id": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Session ID",
                                    "dynamic": false,
                                    "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "session_id",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "should_store_message": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Store Messages",
                                    "dynamic": false,
                                    "info": "Store the message in the history.",
                                    "list": false,
                                    "name": "should_store_message",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "text_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Text Color",
                                    "dynamic": false,
                                    "info": "The text color of the name",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "text_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "ChatOutput"
                    },
                    "dragging": false,
                    "height": 234,
                    "id": "ChatOutput-hU0Qy",
                    "measured": {
                        "height": 234,
                        "width": 360
                    },
                    "position": {
                        "x": 7980.617825443558,
                        "y": 3377.2219674389726
                    },
                    "positionAbsolute": {
                        "x": 7980.617825443558,
                        "y": 3377.2219674389726
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "description": "Define the agent's instructions, then enter a task to complete using tools.",
                        "display_name": "Agent",
                        "id": "Agent-pNUOq",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Define the agent's instructions, then enter a task to complete using tools.",
                            "display_name": "Agent",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "agent_llm",
                                "max_tokens",
                                "model_kwargs",
                                "json_mode",
                                "output_schema",
                                "model_name",
                                "openai_api_base",
                                "api_key",
                                "temperature",
                                "seed",
                                "output_parser",
                                "system_prompt",
                                "tools",
                                "input_value",
                                "handle_parsing_errors",
                                "verbose",
                                "max_iterations",
                                "agent_description",
                                "memory",
                                "sender",
                                "sender_name",
                                "n_messages",
                                "session_id",
                                "order",
                                "template",
                                "add_current_date_tool"
                            ],
                            "frozen": false,
                            "icon": "bot",
                            "legacy": false,
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Response",
                                    "method": "message_response",
                                    "name": "response",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "add_current_date_tool": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Current Date",
                                    "dynamic": false,
                                    "info": "If true, will add a tool to the agent that returns the current date.",
                                    "list": false,
                                    "name": "add_current_date_tool",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "agent_description": {
                                    "_input_type": "MultilineInput",
                                    "advanced": true,
                                    "display_name": "Agent Description [Deprecated]",
                                    "dynamic": false,
                                    "info": "The description of the agent. This is only used when in Tool Mode. Defaults to 'A helpful assistant with access to the following tools:' and tools are added dynamically. This feature is deprecated and will be removed in future versions.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "agent_description",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "A helpful assistant with access to the following tools:"
                                },
                                "agent_llm": {
                                    "_input_type": "DropdownInput",
                                    "advanced": false,
                                    "combobox": false,
                                    "display_name": "Model Provider",
                                    "dynamic": false,
                                    "info": "The provider of the language model that the agent will use to generate responses.",
                                    "input_types": [],
                                    "name": "agent_llm",
                                    "options": [
                                        "Amazon Bedrock",
                                        "Anthropic",
                                        "Azure OpenAI",
                                        "Google Generative AI",
                                        "Groq",
                                        "NVIDIA",
                                        "OpenAI",
                                        "Custom"
                                    ],
                                    "placeholder": "",
                                    "real_time_refresh": true,
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "OpenAI"
                                },
                                "api_key": {
                                    "_input_type": "SecretStrInput",
                                    "advanced": false,
                                    "display_name": "OpenAI API Key",
                                    "dynamic": false,
                                    "info": "The OpenAI API Key to use for the OpenAI model.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "load_from_db": true,
                                    "name": "api_key",
                                    "password": true,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": "OPENAI_API_KEY"
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langchain_core.tools import StructuredTool\n\nfrom langflow.base.agents.agent import LCToolsAgentComponent\nfrom langflow.base.models.model_input_constants import (\n    ALL_PROVIDER_FIELDS,\n    MODEL_DYNAMIC_UPDATE_FIELDS,\n    MODEL_PROVIDERS_DICT,\n)\nfrom langflow.base.models.model_utils import get_model_name\nfrom langflow.components.helpers import CurrentDateComponent\nfrom langflow.components.helpers.memory import MemoryComponent\nfrom langflow.components.langchain_utilities.tool_calling import ToolCallingAgentComponent\nfrom langflow.custom.utils import update_component_build_config\nfrom langflow.io import BoolInput, DropdownInput, MultilineInput, Output\nfrom langflow.logging import logger\nfrom langflow.schema.dotdict import dotdict\nfrom langflow.schema.message import Message\n\n\ndef set_advanced_true(component_input):\n    component_input.advanced = True\n    return component_input\n\n\nclass AgentComponent(ToolCallingAgentComponent):\n    display_name: str = \"Agent\"\n    description: str = \"Define the agent's instructions, then enter a task to complete using tools.\"\n    icon = \"bot\"\n    beta = False\n    name = \"Agent\"\n\n    memory_inputs = [set_advanced_true(component_input) for component_input in MemoryComponent().inputs]\n\n    inputs = [\n        DropdownInput(\n            name=\"agent_llm\",\n            display_name=\"Model Provider\",\n            info=\"The provider of the language model that the agent will use to generate responses.\",\n            options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n            value=\"OpenAI\",\n            real_time_refresh=True,\n            input_types=[],\n        ),\n        *MODEL_PROVIDERS_DICT[\"OpenAI\"][\"inputs\"],\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=\"Agent Instructions\",\n            info=\"System Prompt: Initial instructions and context provided to guide the agent's behavior.\",\n            value=\"You are a helpful assistant that can use tools to answer questions and perform tasks.\",\n            advanced=False,\n        ),\n        *LCToolsAgentComponent._base_inputs,\n        *memory_inputs,\n        BoolInput(\n            name=\"add_current_date_tool\",\n            display_name=\"Current Date\",\n            advanced=True,\n            info=\"If true, will add a tool to the agent that returns the current date.\",\n            value=True,\n        ),\n    ]\n    outputs = [Output(name=\"response\", display_name=\"Response\", method=\"message_response\")]\n\n    async def message_response(self) -> Message:\n        try:\n            llm_model, display_name = self.get_llm()\n            if llm_model is None:\n                msg = \"No language model selected\"\n                raise ValueError(msg)\n            self.model_name = get_model_name(llm_model, display_name=display_name)\n        except Exception as e:\n            # Log the error for debugging purposes\n            logger.error(f\"Error retrieving language model: {e}\")\n            raise\n\n        try:\n            self.chat_history = await self.get_memory_data()\n        except Exception as e:\n            logger.error(f\"Error retrieving chat history: {e}\")\n            raise\n\n        if self.add_current_date_tool:\n            try:\n                if not isinstance(self.tools, list):  # type: ignore[has-type]\n                    self.tools = []\n                # Convert CurrentDateComponent to a StructuredTool\n                current_date_tool = (await CurrentDateComponent().to_toolkit()).pop(0)\n                # current_date_tool = CurrentDateComponent().to_toolkit()[0]\n                if isinstance(current_date_tool, StructuredTool):\n                    self.tools.append(current_date_tool)\n                else:\n                    msg = \"CurrentDateComponent must be converted to a StructuredTool\"\n                    raise TypeError(msg)\n            except Exception as e:\n                logger.error(f\"Error adding current date tool: {e}\")\n                raise\n\n        if not self.tools:\n            msg = \"Tools are required to run the agent.\"\n            logger.error(msg)\n            raise ValueError(msg)\n\n        try:\n            self.set(\n                llm=llm_model,\n                tools=self.tools,\n                chat_history=self.chat_history,\n                input_value=self.input_value,\n                system_prompt=self.system_prompt,\n            )\n            agent = self.create_agent_runnable()\n        except Exception as e:\n            logger.error(f\"Error setting up the agent: {e}\")\n            raise\n\n        return await self.run_agent(agent)\n\n    async def get_memory_data(self):\n        memory_kwargs = {\n            component_input.name: getattr(self, f\"{component_input.name}\") for component_input in self.memory_inputs\n        }\n        # filter out empty values\n        memory_kwargs = {k: v for k, v in memory_kwargs.items() if v}\n\n        return await MemoryComponent().set(**memory_kwargs).retrieve_messages()\n\n    def get_llm(self):\n        if isinstance(self.agent_llm, str):\n            try:\n                provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n                if provider_info:\n                    component_class = provider_info.get(\"component_class\")\n                    display_name = component_class.display_name\n                    inputs = provider_info.get(\"inputs\")\n                    prefix = provider_info.get(\"prefix\", \"\")\n                    return (\n                        self._build_llm_model(component_class, inputs, prefix),\n                        display_name,\n                    )\n            except Exception as e:\n                msg = f\"Error building {self.agent_llm} language model\"\n                raise ValueError(msg) from e\n        return self.agent_llm, None\n\n    def _build_llm_model(self, component, inputs, prefix=\"\"):\n        model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n        return component.set(**model_kwargs).build_model()\n\n    def set_component_params(self, component):\n        provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n        if provider_info:\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\")\n            model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n\n            return component.set(**model_kwargs)\n        return component\n\n    def delete_fields(self, build_config: dotdict, fields: dict | list[str]) -> None:\n        \"\"\"Delete specified fields from build_config.\"\"\"\n        for field in fields:\n            build_config.pop(field, None)\n\n    def update_input_types(self, build_config: dotdict) -> dotdict:\n        \"\"\"Update input types for all fields in build_config.\"\"\"\n        for key, value in build_config.items():\n            if isinstance(value, dict):\n                if value.get(\"input_types\") is None:\n                    build_config[key][\"input_types\"] = []\n            elif hasattr(value, \"input_types\") and value.input_types is None:\n                value.input_types = []\n        return build_config\n\n    async def update_build_config(\n        self, build_config: dotdict, field_value: str, field_name: str | None = None\n    ) -> dotdict:\n        # Iterate over all providers in the MODEL_PROVIDERS_DICT\n        # Existing logic for updating build_config\n        if field_name in (\"agent_llm\",):\n            build_config[\"agent_llm\"][\"value\"] = field_value\n            provider_info = MODEL_PROVIDERS_DICT.get(field_value)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call the component class's update_build_config method\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n\n            provider_configs: dict[str, tuple[dict, list[dict]]] = {\n                provider: (\n                    MODEL_PROVIDERS_DICT[provider][\"fields\"],\n                    [\n                        MODEL_PROVIDERS_DICT[other_provider][\"fields\"]\n                        for other_provider in MODEL_PROVIDERS_DICT\n                        if other_provider != provider\n                    ],\n                )\n                for provider in MODEL_PROVIDERS_DICT\n            }\n            if field_value in provider_configs:\n                fields_to_add, fields_to_delete = provider_configs[field_value]\n\n                # Delete fields from other providers\n                for fields in fields_to_delete:\n                    self.delete_fields(build_config, fields)\n\n                # Add provider-specific fields\n                if field_value == \"OpenAI\" and not any(field in build_config for field in fields_to_add):\n                    build_config.update(fields_to_add)\n                else:\n                    build_config.update(fields_to_add)\n                # Reset input types for agent_llm\n                build_config[\"agent_llm\"][\"input_types\"] = []\n            elif field_value == \"Custom\":\n                # Delete all provider fields\n                self.delete_fields(build_config, ALL_PROVIDER_FIELDS)\n                # Update with custom component\n                custom_component = DropdownInput(\n                    name=\"agent_llm\",\n                    display_name=\"Language Model\",\n                    options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n                    value=\"Custom\",\n                    real_time_refresh=True,\n                    input_types=[\"LanguageModel\"],\n                )\n                build_config.update({\"agent_llm\": custom_component.to_dict()})\n            # Update input types for all fields\n            build_config = self.update_input_types(build_config)\n\n            # Validate required keys\n            default_keys = [\n                \"code\",\n                \"_type\",\n                \"agent_llm\",\n                \"tools\",\n                \"input_value\",\n                \"add_current_date_tool\",\n                \"system_prompt\",\n                \"agent_description\",\n                \"max_iterations\",\n                \"handle_parsing_errors\",\n                \"verbose\",\n            ]\n            missing_keys = [key for key in default_keys if key not in build_config]\n            if missing_keys:\n                msg = f\"Missing required keys in build_config: {missing_keys}\"\n                raise ValueError(msg)\n        if (\n            isinstance(self.agent_llm, str)\n            and self.agent_llm in MODEL_PROVIDERS_DICT\n            and field_name in MODEL_DYNAMIC_UPDATE_FIELDS\n        ):\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                component_class = self.set_component_params(component_class)\n                prefix = provider_info.get(\"prefix\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call each component class's update_build_config method\n                    # remove the prefix from the field_name\n                    if isinstance(field_name, str) and isinstance(prefix, str):\n                        field_name = field_name.replace(prefix, \"\")\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n        return dotdict({k: v.to_dict() if hasattr(v, \"to_dict\") else v for k, v in build_config.items()})\n"
                                },
                                "handle_parsing_errors": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Handle Parse Errors",
                                    "dynamic": false,
                                    "info": "Should the Agent fix errors when reading user input for better processing?",
                                    "list": false,
                                    "name": "handle_parsing_errors",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "input_value": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": false,
                                    "display_name": "Input",
                                    "dynamic": false,
                                    "info": "The input provided by the user for the agent to process.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": true,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "json_mode": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "JSON Mode",
                                    "dynamic": false,
                                    "info": "If True, it will output JSON regardless of passing a schema.",
                                    "list": false,
                                    "name": "json_mode",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "max_iterations": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Max Iterations",
                                    "dynamic": false,
                                    "info": "The maximum number of attempts the agent can make to complete its task before it stops.",
                                    "list": false,
                                    "name": "max_iterations",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 15
                                },
                                "max_tokens": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Max Tokens",
                                    "dynamic": false,
                                    "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                                    "list": false,
                                    "name": "max_tokens",
                                    "placeholder": "",
                                    "range_spec": {
                                        "max": 128000,
                                        "min": 0,
                                        "step": 0.1,
                                        "step_type": "float"
                                    },
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": ""
                                },
                                "memory": {
                                    "_input_type": "HandleInput",
                                    "advanced": true,
                                    "display_name": "External Memory",
                                    "dynamic": false,
                                    "info": "Retrieve messages from an external memory. If empty, it will use the Langflow tables.",
                                    "input_types": [
                                        "Memory"
                                    ],
                                    "list": false,
                                    "name": "memory",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "other",
                                    "value": ""
                                },
                                "model_kwargs": {
                                    "_input_type": "DictInput",
                                    "advanced": true,
                                    "display_name": "Model Kwargs",
                                    "dynamic": false,
                                    "info": "Additional keyword arguments to pass to the model.",
                                    "list": false,
                                    "name": "model_kwargs",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "type": "dict",
                                    "value": {}
                                },
                                "model_name": {
                                    "_input_type": "DropdownInput",
                                    "advanced": false,
                                    "combobox": true,
                                    "display_name": "Model Name",
                                    "dynamic": false,
                                    "info": "To see the model names, first choose a provider. Then, enter your API key and click the refresh button next to the model name.",
                                    "name": "model_name",
                                    "options": [
                                        "gpt-4o-mini",
                                        "gpt-4o",
                                        "gpt-4-turbo",
                                        "gpt-4-turbo-preview",
                                        "gpt-4",
                                        "gpt-3.5-turbo",
                                        "gpt-3.5-turbo-0125"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "gpt-4o-mini"
                                },
                                "n_messages": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Number of Messages",
                                    "dynamic": false,
                                    "info": "Number of messages to retrieve.",
                                    "list": false,
                                    "name": "n_messages",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 100
                                },
                                "openai_api_base": {
                                    "_input_type": "StrInput",
                                    "advanced": true,
                                    "display_name": "OpenAI API Base",
                                    "dynamic": false,
                                    "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "openai_api_base",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "order": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Order",
                                    "dynamic": false,
                                    "info": "Order of the messages.",
                                    "name": "order",
                                    "options": [
                                        "Ascending",
                                        "Descending"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Ascending"
                                },
                                "seed": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Seed",
                                    "dynamic": false,
                                    "info": "The seed controls the reproducibility of the job.",
                                    "list": false,
                                    "name": "seed",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 1
                                },
                                "sender": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Sender Type",
                                    "dynamic": false,
                                    "info": "Filter by sender type.",
                                    "name": "sender",
                                    "options": [
                                        "Machine",
                                        "User",
                                        "Machine and User"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Machine and User"
                                },
                                "sender_name": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Sender Name",
                                    "dynamic": false,
                                    "info": "Filter by sender name.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "sender_name",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "session_id": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Session ID",
                                    "dynamic": false,
                                    "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "session_id",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "system_prompt": {
                                    "_input_type": "MultilineInput",
                                    "advanced": false,
                                    "display_name": "Agent Instructions",
                                    "dynamic": false,
                                    "info": "System Prompt: Initial instructions and context provided to guide the agent's behavior.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "system_prompt",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "You are a helpful AI assistant. Use the following information from a web search to answer the user's question. If the search results don't contain relevant information, say so and offer to help with something else.\n\n{input}"
                                },
                                "temperature": {
                                    "_input_type": "FloatInput",
                                    "advanced": true,
                                    "display_name": "Temperature",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "name": "temperature",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "float",
                                    "value": 0.1
                                },
                                "template": {
                                    "_input_type": "MultilineInput",
                                    "advanced": true,
                                    "display_name": "Template",
                                    "dynamic": false,
                                    "info": "The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "template",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "{sender_name}: {text}"
                                },
                                "tools": {
                                    "_input_type": "HandleInput",
                                    "advanced": false,
                                    "display_name": "Tools",
                                    "dynamic": false,
                                    "info": "These are the tools that the agent can use to help with tasks.",
                                    "input_types": [
                                        "Tool"
                                    ],
                                    "list": true,
                                    "name": "tools",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "other",
                                    "value": ""
                                },
                                "verbose": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Verbose",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "name": "verbose",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "Agent"
                    },
                    "dragging": false,
                    "height": 650,
                    "id": "Agent-pNUOq",
                    "measured": {
                        "height": 650,
                        "width": 360
                    },
                    "position": {
                        "x": 5665.465212822881,
                        "y": 2760.0819124193113
                    },
                    "positionAbsolute": {
                        "x": 5665.465212822881,
                        "y": 2760.0819124193113
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "description": "Create a prompt template with dynamic variables.",
                        "display_name": "Prompt",
                        "id": "Prompt-R9hC2",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {
                                "template": [
                                    "post",
                                    "image_description"
                                ]
                            },
                            "description": "Create a prompt template with dynamic variables.",
                            "display_name": "Prompt",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "template"
                            ],
                            "frozen": false,
                            "icon": "prompts",
                            "legacy": false,
                            "lf_version": "1.0.19.post2",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Prompt Message",
                                    "method": "build_prompt",
                                    "name": "prompt",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import MessageTextInput, Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            tool_mode=True,\n            advanced=True,\n            info=\"A placeholder input for tool mode.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    async def update_frontend_node(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = await super().update_frontend_node(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n"
                                },
                                "image_description": {
                                    "advanced": false,
                                    "display_name": "image_description",
                                    "dynamic": false,
                                    "field_type": "str",
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "input_types": [
                                        "Message",
                                        "Text"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "image_description",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": ""
                                },
                                "post": {
                                    "advanced": false,
                                    "display_name": "post",
                                    "dynamic": false,
                                    "field_type": "str",
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "input_types": [
                                        "Message",
                                        "Text"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "post",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": ""
                                },
                                "template": {
                                    "_input_type": "PromptInput",
                                    "advanced": false,
                                    "display_name": "Template",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "template",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "type": "prompt",
                                    "value": "{post}\n \n\n{image_description} "
                                },
                                "tool_placeholder": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Tool Placeholder",
                                    "dynamic": false,
                                    "info": "A placeholder input for tool mode.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "tool_placeholder",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": true,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "Prompt"
                    },
                    "dragging": false,
                    "height": 433,
                    "id": "Prompt-R9hC2",
                    "measured": {
                        "height": 433,
                        "width": 360
                    },
                    "position": {
                        "x": 7613.837241084599,
                        "y": 3139.8282595890087
                    },
                    "positionAbsolute": {
                        "x": 7613.837241084599,
                        "y": 3139.8282595890087
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "id": "note-grPkG",
                        "node": {
                            "description": "# Instagram Copywriter \n\nWelcome to the Instagram Copywriter! This flow helps you create compelling Instagram posts with AI-generated content and image prompts.\n\n## Instructions\n1. Enter Your Topic\n   - In the Chat Input, enter a brief description of the topic you want to post about.\n   - Example: \"Create a post about meditation and its benefits\"\n\n2. Review the Generated Content\n   - The flow will use AI to research your topic and generate a formatted Instagram post.\n   - The post will include an opening line, main content, emojis, a call-to-action, and hashtags.\n\n3. Check the Image Prompt\n   - The flow will also generate a detailed image prompt based on your post content.\n   - This prompt can be used with image generation tools to create a matching visual.\n\n4. Copy the Final Output\n   - The Chat Output will display the complete Instagram post text followed by the image generation prompt.\n   - Copy this output to use in your Instagram content creation process.\n\n5. Refine if Needed\n   - If you're not satisfied with the result, you can adjust the input or modify the OpenAI model settings for different outputs.\n\nRemember: Keep your initial topic input clear and concise for best results! \ud83c\udfa8\u2728",
                            "display_name": "",
                            "documentation": "",
                            "template": {
                                "backgroundColor": "amber"
                            }
                        },
                        "type": "note"
                    },
                    "dragging": false,
                    "height": 648,
                    "id": "note-grPkG",
                    "measured": {
                        "height": 648,
                        "width": 328
                    },
                    "position": {
                        "x": 4492.051129290571,
                        "y": 2746.336592524463
                    },
                    "positionAbsolute": {
                        "x": 4560.051129290571,
                        "y": 2746.336592524463
                    },
                    "resizing": false,
                    "selected": false,
                    "style": {
                        "height": 648,
                        "width": 554
                    },
                    "type": "noteNode",
                    "width": 554
                },
                {
                    "data": {
                        "id": "note-motsF",
                        "node": {
                            "description": "**Text Input (Guidelines Prompt)**\n   - NOTE: \"Contains Instagram post formatting rules. Don't modify this component as it maintains format consistency.\"\n   - Maintains fixed guidelines for:\n     * Opening structure\n     * Main content\n     * Emoji usage\n     * Call to Action (CTA)\n     * Hashtags\n\n4. **First Prompt + OpenAI Sequence**\n   - NOTE: \"Generates initial post content following Instagram guidelines\"\n   - Settings:\n     * Temperature: 0.7 (good balance between creativity and consistency)\n     * Input: Receives research context\n     * Output: Generates formatted post text\n\n",
                            "display_name": "",
                            "documentation": "",
                            "template": {
                                "backgroundColor": "blue"
                            }
                        },
                        "type": "note"
                    },
                    "dragging": false,
                    "height": 325,
                    "id": "note-motsF",
                    "measured": {
                        "height": 325,
                        "width": 328
                    },
                    "position": {
                        "x": 5666.120349284508,
                        "y": 3705.9211122250185
                    },
                    "positionAbsolute": {
                        "x": 5667.476249937603,
                        "y": 3644.9055828357396
                    },
                    "resizing": false,
                    "selected": false,
                    "type": "noteNode",
                    "width": 325
                },
                {
                    "data": {
                        "id": "note-nnYl4",
                        "node": {
                            "description": "**Second Prompt + OpenAI Sequence**\n   - NOTE: \"Transforms the generated post into a prompt for image generation\"\n   - Settings:\n     * Temperature: 0.7\n     * Input: Receives generated post\n     * Output: Creates detailed description for image generation\n\n",
                            "display_name": "",
                            "documentation": "",
                            "template": {
                                "backgroundColor": "blue"
                            }
                        },
                        "type": "note"
                    },
                    "dragging": false,
                    "height": 325,
                    "id": "note-nnYl4",
                    "measured": {
                        "height": 325,
                        "width": 328
                    },
                    "position": {
                        "x": 6786.375917286389,
                        "y": 3393.8522072000146
                    },
                    "positionAbsolute": {
                        "x": 6786.375917286389,
                        "y": 3393.8522072000146
                    },
                    "selected": false,
                    "type": "noteNode",
                    "width": 325
                },
                {
                    "data": {
                        "id": "note-Bw2uq",
                        "node": {
                            "description": "**Final Prompt**\n   - NOTE: \"Combines Instagram post with image prompt in a final format\"\n   - Structure:\n     * First part: Complete Instagram post\n     * Second part: Image generation prompt\n     * Separator: Uses \"**Prompt:**\" to divide sections\n\n7. **Chat Output (Final Output)**\n   - NOTE: \"Presents the combined final result that can be copied and used directly\"\n\nGENERAL USAGE TIPS:\n- Keep initial inputs clear and specific\n- Don't modify pre-defined Instagram guidelines\n- If style adjustments are needed, only modify the OpenAI models' temperature\n- Verify all connections are correct before running\n- Final result will always have two parts: post + image prompt\n\nFLOW CONSIDERATIONS:\n- All tools connect only to the Tool Calling Agent\n- The flow is unidirectional (no loops)\n- Each prompt template maintains specific formatting\n- Temperatures are set for optimal creativity/consistency balance\n\nTROUBLESHOOTING NOTES:\n- If output is too creative: Lower temperature",
                            "display_name": "",
                            "documentation": "",
                            "template": {
                                "backgroundColor": "blue"
                            }
                        },
                        "type": "note"
                    },
                    "dragging": false,
                    "height": 325,
                    "id": "note-Bw2uq",
                    "measured": {
                        "height": 325,
                        "width": 328
                    },
                    "position": {
                        "x": 7606.419013912975,
                        "y": 3612.8149429707646
                    },
                    "positionAbsolute": {
                        "x": 7606.419013912975,
                        "y": 3612.8149429707646
                    },
                    "selected": false,
                    "type": "noteNode",
                    "width": 325
                },
                {
                    "data": {
                        "id": "note-wUxWf",
                        "node": {
                            "description": "# \ud83d\udd11 Tavily AI Search Needs API Key\n\nYou can get 1000 searches/month free [here](https://tavily.com/) ",
                            "display_name": "",
                            "documentation": "",
                            "template": {
                                "backgroundColor": "lime"
                            }
                        },
                        "type": "note"
                    },
                    "dragging": false,
                    "height": 325,
                    "id": "note-wUxWf",
                    "measured": {
                        "height": 325,
                        "width": 328
                    },
                    "position": {
                        "x": 5174.678177457385,
                        "y": 3339.6628854203204
                    },
                    "positionAbsolute": {
                        "x": 5174.678177457385,
                        "y": 3339.6628854203204
                    },
                    "selected": false,
                    "type": "noteNode",
                    "width": 325
                },
                {
                    "data": {
                        "id": "TavilySearchComponent-h8yAo",
                        "node": {
                            "base_classes": [
                                "Data",
                                "Message"
                            ],
                            "beta": false,
                            "category": "tools",
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "**Tavily AI** is a search engine optimized for LLMs and RAG,         aimed at efficient, quick, and persistent search results.",
                            "display_name": "Tavily AI Search",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "api_key",
                                "query",
                                "search_depth",
                                "topic",
                                "max_results",
                                "include_images",
                                "include_answer"
                            ],
                            "frozen": false,
                            "icon": "TavilyIcon",
                            "key": "TavilySearchComponent",
                            "legacy": false,
                            "metadata": {},
                            "minimized": false,
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Toolset",
                                    "hidden": null,
                                    "method": "to_toolkit",
                                    "name": "component_as_tool",
                                    "required_inputs": null,
                                    "selected": "Tool",
                                    "types": [
                                        "Tool"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "score": 0.0075846556637275304,
                            "template": {
                                "_type": "Component",
                                "api_key": {
                                    "_input_type": "SecretStrInput",
                                    "advanced": false,
                                    "display_name": "Tavily API Key",
                                    "dynamic": false,
                                    "info": "Your Tavily API Key.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "load_from_db": true,
                                    "name": "api_key",
                                    "password": true,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": ""
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "import httpx\nfrom loguru import logger\n\nfrom langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import BoolInput, DropdownInput, IntInput, MessageTextInput, Output, SecretStrInput\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\n\n\nclass TavilySearchComponent(Component):\n    display_name = \"Tavily AI Search\"\n    description = \"\"\"**Tavily AI** is a search engine optimized for LLMs and RAG, \\\n        aimed at efficient, quick, and persistent search results.\"\"\"\n    icon = \"TavilyIcon\"\n\n    inputs = [\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"Tavily API Key\",\n            required=True,\n            info=\"Your Tavily API Key.\",\n        ),\n        MessageTextInput(\n            name=\"query\",\n            display_name=\"Search Query\",\n            info=\"The search query you want to execute with Tavily.\",\n            tool_mode=True,\n        ),\n        DropdownInput(\n            name=\"search_depth\",\n            display_name=\"Search Depth\",\n            info=\"The depth of the search.\",\n            options=[\"basic\", \"advanced\"],\n            value=\"advanced\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"topic\",\n            display_name=\"Search Topic\",\n            info=\"The category of the search.\",\n            options=[\"general\", \"news\"],\n            value=\"general\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"max_results\",\n            display_name=\"Max Results\",\n            info=\"The maximum number of search results to return.\",\n            value=5,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"include_images\",\n            display_name=\"Include Images\",\n            info=\"Include a list of query-related images in the response.\",\n            value=True,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"include_answer\",\n            display_name=\"Include Answer\",\n            info=\"Include a short answer to original query.\",\n            value=True,\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"fetch_content\"),\n        Output(display_name=\"Text\", name=\"text\", method=\"fetch_content_text\"),\n    ]\n\n    def fetch_content(self) -> list[Data]:\n        try:\n            url = \"https://api.tavily.com/search\"\n            headers = {\n                \"content-type\": \"application/json\",\n                \"accept\": \"application/json\",\n            }\n            payload = {\n                \"api_key\": self.api_key,\n                \"query\": self.query,\n                \"search_depth\": self.search_depth,\n                \"topic\": self.topic,\n                \"max_results\": self.max_results,\n                \"include_images\": self.include_images,\n                \"include_answer\": self.include_answer,\n            }\n\n            with httpx.Client() as client:\n                response = client.post(url, json=payload, headers=headers)\n\n            response.raise_for_status()\n            search_results = response.json()\n\n            data_results = []\n\n            if self.include_answer and search_results.get(\"answer\"):\n                data_results.append(Data(text=search_results[\"answer\"]))\n\n            for result in search_results.get(\"results\", []):\n                content = result.get(\"content\", \"\")\n                data_results.append(\n                    Data(\n                        text=content,\n                        data={\n                            \"title\": result.get(\"title\"),\n                            \"url\": result.get(\"url\"),\n                            \"content\": content,\n                            \"score\": result.get(\"score\"),\n                        },\n                    )\n                )\n\n            if self.include_images and search_results.get(\"images\"):\n                data_results.append(Data(text=\"Images found\", data={\"images\": search_results[\"images\"]}))\n        except httpx.HTTPStatusError as exc:\n            error_message = f\"HTTP error occurred: {exc.response.status_code} - {exc.response.text}\"\n            logger.error(error_message)\n            return [Data(text=error_message, data={\"error\": error_message})]\n        except httpx.RequestError as exc:\n            error_message = f\"Request error occurred: {exc}\"\n            logger.error(error_message)\n            return [Data(text=error_message, data={\"error\": error_message})]\n        except ValueError as exc:\n            error_message = f\"Invalid response format: {exc}\"\n            logger.error(error_message)\n            return [Data(text=error_message, data={\"error\": error_message})]\n        else:\n            self.status = data_results\n            return data_results\n\n    def fetch_content_text(self) -> Message:\n        data = self.fetch_content()\n        result_string = data_to_text(\"{text}\", data)\n        self.status = result_string\n        return Message(text=result_string)\n"
                                },
                                "include_answer": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Include Answer",
                                    "dynamic": false,
                                    "info": "Include a short answer to original query.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "include_answer",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "include_images": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Include Images",
                                    "dynamic": false,
                                    "info": "Include a list of query-related images in the response.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "include_images",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "max_results": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Max Results",
                                    "dynamic": false,
                                    "info": "The maximum number of search results to return.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "max_results",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 5
                                },
                                "query": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": false,
                                    "display_name": "Search Query",
                                    "dynamic": false,
                                    "info": "The search query you want to execute with Tavily.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "name": "query",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": true,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "search_depth": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Search Depth",
                                    "dynamic": false,
                                    "info": "The depth of the search.",
                                    "name": "search_depth",
                                    "options": [
                                        "basic",
                                        "advanced"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "advanced"
                                },
                                "tools_metadata": {
                                    "_input_type": "TableInput",
                                    "advanced": false,
                                    "display_name": "Edit tools",
                                    "dynamic": false,
                                    "info": "",
                                    "is_list": true,
                                    "list_add_label": "Add More",
                                    "name": "tools_metadata",
                                    "placeholder": "",
                                    "real_time_refresh": true,
                                    "required": false,
                                    "show": true,
                                    "table_icon": "Hammer",
                                    "table_options": {
                                        "block_add": true,
                                        "block_delete": true,
                                        "block_edit": true,
                                        "block_filter": true,
                                        "block_hide": true,
                                        "block_select": true,
                                        "block_sort": true,
                                        "description": "Modify tool names and descriptions to help agents understand when to use each tool.",
                                        "field_parsers": {
                                            "commands": "commands",
                                            "name": [
                                                "snake_case",
                                                "no_blank"
                                            ]
                                        },
                                        "hide_options": true
                                    },
                                    "table_schema": {
                                        "columns": [
                                            {
                                                "description": "Specify the name of the tool.",
                                                "disable_edit": false,
                                                "display_name": "Tool Name",
                                                "edit_mode": "inline",
                                                "filterable": false,
                                                "formatter": "text",
                                                "name": "name",
                                                "sortable": false,
                                                "type": "text"
                                            },
                                            {
                                                "description": "Describe the purpose of the tool.",
                                                "disable_edit": false,
                                                "display_name": "Tool Description",
                                                "edit_mode": "popover",
                                                "filterable": false,
                                                "formatter": "text",
                                                "name": "description",
                                                "sortable": false,
                                                "type": "text"
                                            },
                                            {
                                                "description": "The default identifiers for the tools and cannot be changed.",
                                                "disable_edit": true,
                                                "display_name": "Tool Identifiers",
                                                "edit_mode": "inline",
                                                "filterable": false,
                                                "formatter": "text",
                                                "name": "tags",
                                                "sortable": false,
                                                "type": "text"
                                            }
                                        ]
                                    },
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "trigger_icon": "Hammer",
                                    "trigger_text": "",
                                    "type": "table",
                                    "value": [
                                        {
                                            "description": "fetch_content(api_key: Message) - **Tavily AI** is a search engine optimized for LLMs and RAG,         aimed at efficient, quick, and persistent search results.",
                                            "name": "None-fetch_content",
                                            "tags": [
                                                "None-fetch_content"
                                            ]
                                        },
                                        {
                                            "description": "fetch_content_text(api_key: Message) - **Tavily AI** is a search engine optimized for LLMs and RAG,         aimed at efficient, quick, and persistent search results.",
                                            "name": "None-fetch_content_text",
                                            "tags": [
                                                "None-fetch_content_text"
                                            ]
                                        }
                                    ]
                                },
                                "topic": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Search Topic",
                                    "dynamic": false,
                                    "info": "The category of the search.",
                                    "name": "topic",
                                    "options": [
                                        "general",
                                        "news"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "general"
                                }
                            },
                            "tool_mode": true
                        },
                        "showNode": true,
                        "type": "TavilySearchComponent"
                    },
                    "dragging": false,
                    "id": "TavilySearchComponent-h8yAo",
                    "measured": {
                        "height": 489,
                        "width": 360
                    },
                    "position": {
                        "x": 5176.638828210268,
                        "y": 3500.9392260830805
                    },
                    "selected": false,
                    "type": "genericNode"
                },
                {
                    "data": {
                        "id": "OpenAIModel-N7jW7",
                        "node": {
                            "base_classes": [
                                "LanguageModel",
                                "Message"
                            ],
                            "beta": false,
                            "category": "models",
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Generates text using OpenAI LLMs.",
                            "display_name": "OpenAI",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "input_value",
                                "system_message",
                                "stream",
                                "max_tokens",
                                "model_kwargs",
                                "json_mode",
                                "model_name",
                                "openai_api_base",
                                "api_key",
                                "temperature",
                                "seed"
                            ],
                            "frozen": false,
                            "icon": "OpenAI",
                            "key": "OpenAIModel",
                            "legacy": false,
                            "metadata": {},
                            "minimized": false,
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "text_response",
                                    "name": "text_output",
                                    "required_inputs": [],
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                },
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Language Model",
                                    "method": "build_model",
                                    "name": "model_output",
                                    "required_inputs": [
                                        "api_key"
                                    ],
                                    "selected": "LanguageModel",
                                    "types": [
                                        "LanguageModel"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "score": 0.14285714285714285,
                            "template": {
                                "_type": "Component",
                                "api_key": {
                                    "_input_type": "SecretStrInput",
                                    "advanced": false,
                                    "display_name": "OpenAI API Key",
                                    "dynamic": false,
                                    "info": "The OpenAI API Key to use for the OpenAI model.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "load_from_db": true,
                                    "name": "api_key",
                                    "password": true,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": "OPENAI_API_KEY"
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.openai_constants import OPENAI_MODEL_NAMES\nfrom langflow.field_typing import LanguageModel\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.inputs import BoolInput, DictInput, DropdownInput, IntInput, SecretStrInput, SliderInput, StrInput\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIModel\"\n\n    inputs = [\n        *LCModelComponent._base_inputs,\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            range_spec=RangeSpec(min=0, max=128000),\n        ),\n        DictInput(\n            name=\"model_kwargs\",\n            display_name=\"Model Kwargs\",\n            advanced=True,\n            info=\"Additional keyword arguments to pass to the model.\",\n        ),\n        BoolInput(\n            name=\"json_mode\",\n            display_name=\"JSON Mode\",\n            advanced=True,\n            info=\"If True, it will output JSON regardless of passing a schema.\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            advanced=False,\n            options=OPENAI_MODEL_NAMES,\n            value=OPENAI_MODEL_NAMES[0],\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. \"\n            \"Defaults to https://api.openai.com/v1. \"\n            \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n            required=True,\n        ),\n        SliderInput(\n            name=\"temperature\", display_name=\"Temperature\", value=0.1, range_spec=RangeSpec(min=0, max=2, step=0.01)\n        ),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        openai_api_key = self.api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\n        json_mode = self.json_mode\n        seed = self.seed\n\n        api_key = SecretStr(openai_api_key).get_secret_value() if openai_api_key else None\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature if temperature is not None else 0.1,\n            seed=seed,\n        )\n        if json_mode:\n            output = output.bind(response_format={\"type\": \"json_object\"})\n\n        return output\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"Get a message from an OpenAI exception.\n\n        Args:\n            e (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return None\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")\n            if message:\n                return message\n        return None\n"
                                },
                                "input_value": {
                                    "_input_type": "MessageInput",
                                    "advanced": false,
                                    "display_name": "Input",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "json_mode": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "JSON Mode",
                                    "dynamic": false,
                                    "info": "If True, it will output JSON regardless of passing a schema.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "json_mode",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "max_tokens": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Max Tokens",
                                    "dynamic": false,
                                    "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "max_tokens",
                                    "placeholder": "",
                                    "range_spec": {
                                        "max": 128000,
                                        "min": 0,
                                        "step": 0.1,
                                        "step_type": "float"
                                    },
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": ""
                                },
                                "model_kwargs": {
                                    "_input_type": "DictInput",
                                    "advanced": true,
                                    "display_name": "Model Kwargs",
                                    "dynamic": false,
                                    "info": "Additional keyword arguments to pass to the model.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "model_kwargs",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "type": "dict",
                                    "value": {}
                                },
                                "model_name": {
                                    "_input_type": "DropdownInput",
                                    "advanced": false,
                                    "combobox": false,
                                    "dialog_inputs": {},
                                    "display_name": "Model Name",
                                    "dynamic": false,
                                    "info": "",
                                    "name": "model_name",
                                    "options": [
                                        "gpt-4o-mini",
                                        "gpt-4o",
                                        "gpt-4-turbo",
                                        "gpt-4-turbo-preview",
                                        "gpt-4",
                                        "gpt-3.5-turbo",
                                        "gpt-3.5-turbo-0125"
                                    ],
                                    "options_metadata": [],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "gpt-4o-mini"
                                },
                                "openai_api_base": {
                                    "_input_type": "StrInput",
                                    "advanced": true,
                                    "display_name": "OpenAI API Base",
                                    "dynamic": false,
                                    "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "name": "openai_api_base",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "seed": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Seed",
                                    "dynamic": false,
                                    "info": "The seed controls the reproducibility of the job.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "seed",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 1
                                },
                                "stream": {
                                    "_input_type": "BoolInput",
                                    "advanced": false,
                                    "display_name": "Stream",
                                    "dynamic": false,
                                    "info": "Stream the response from the model. Streaming works only in Chat.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "stream",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "system_message": {
                                    "_input_type": "MultilineInput",
                                    "advanced": false,
                                    "display_name": "System Message",
                                    "dynamic": false,
                                    "info": "System message to pass to the model.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "system_message",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "temperature": {
                                    "_input_type": "SliderInput",
                                    "advanced": false,
                                    "display_name": "Temperature",
                                    "dynamic": false,
                                    "info": "",
                                    "max_label": "",
                                    "max_label_icon": "",
                                    "min_label": "",
                                    "min_label_icon": "",
                                    "name": "temperature",
                                    "placeholder": "",
                                    "range_spec": {
                                        "max": 2,
                                        "min": 0,
                                        "step": 0.01,
                                        "step_type": "float"
                                    },
                                    "required": false,
                                    "show": true,
                                    "slider_buttons": false,
                                    "slider_buttons_options": [],
                                    "slider_input": false,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "type": "slider",
                                    "value": 0.1
                                }
                            },
                            "tool_mode": false
                        },
                        "showNode": true,
                        "type": "OpenAIModel"
                    },
                    "dragging": false,
                    "id": "OpenAIModel-N7jW7",
                    "measured": {
                        "height": 734,
                        "width": 360
                    },
                    "position": {
                        "x": 6411.984293767987,
                        "y": 2939.9259924956145
                    },
                    "selected": false,
                    "type": "genericNode"
                },
                {
                    "data": {
                        "id": "OpenAIModel-DdNth",
                        "node": {
                            "base_classes": [
                                "LanguageModel",
                                "Message"
                            ],
                            "beta": false,
                            "category": "models",
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Generates text using OpenAI LLMs.",
                            "display_name": "OpenAI",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "input_value",
                                "system_message",
                                "stream",
                                "max_tokens",
                                "model_kwargs",
                                "json_mode",
                                "model_name",
                                "openai_api_base",
                                "api_key",
                                "temperature",
                                "seed"
                            ],
                            "frozen": false,
                            "icon": "OpenAI",
                            "key": "OpenAIModel",
                            "legacy": false,
                            "metadata": {},
                            "minimized": false,
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "text_response",
                                    "name": "text_output",
                                    "required_inputs": [],
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                },
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Language Model",
                                    "method": "build_model",
                                    "name": "model_output",
                                    "required_inputs": [
                                        "api_key"
                                    ],
                                    "selected": "LanguageModel",
                                    "types": [
                                        "LanguageModel"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "score": 0.14285714285714285,
                            "template": {
                                "_type": "Component",
                                "api_key": {
                                    "_input_type": "SecretStrInput",
                                    "advanced": false,
                                    "display_name": "OpenAI API Key",
                                    "dynamic": false,
                                    "info": "The OpenAI API Key to use for the OpenAI model.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "load_from_db": true,
                                    "name": "api_key",
                                    "password": true,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": "OPENAI_API_KEY"
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.openai_constants import OPENAI_MODEL_NAMES\nfrom langflow.field_typing import LanguageModel\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.inputs import BoolInput, DictInput, DropdownInput, IntInput, SecretStrInput, SliderInput, StrInput\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIModel\"\n\n    inputs = [\n        *LCModelComponent._base_inputs,\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            range_spec=RangeSpec(min=0, max=128000),\n        ),\n        DictInput(\n            name=\"model_kwargs\",\n            display_name=\"Model Kwargs\",\n            advanced=True,\n            info=\"Additional keyword arguments to pass to the model.\",\n        ),\n        BoolInput(\n            name=\"json_mode\",\n            display_name=\"JSON Mode\",\n            advanced=True,\n            info=\"If True, it will output JSON regardless of passing a schema.\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            advanced=False,\n            options=OPENAI_MODEL_NAMES,\n            value=OPENAI_MODEL_NAMES[0],\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. \"\n            \"Defaults to https://api.openai.com/v1. \"\n            \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n            required=True,\n        ),\n        SliderInput(\n            name=\"temperature\", display_name=\"Temperature\", value=0.1, range_spec=RangeSpec(min=0, max=2, step=0.01)\n        ),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        openai_api_key = self.api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\n        json_mode = self.json_mode\n        seed = self.seed\n\n        api_key = SecretStr(openai_api_key).get_secret_value() if openai_api_key else None\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature if temperature is not None else 0.1,\n            seed=seed,\n        )\n        if json_mode:\n            output = output.bind(response_format={\"type\": \"json_object\"})\n\n        return output\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"Get a message from an OpenAI exception.\n\n        Args:\n            e (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return None\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")\n            if message:\n                return message\n        return None\n"
                                },
                                "input_value": {
                                    "_input_type": "MessageInput",
                                    "advanced": false,
                                    "display_name": "Input",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "json_mode": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "JSON Mode",
                                    "dynamic": false,
                                    "info": "If True, it will output JSON regardless of passing a schema.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "json_mode",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "max_tokens": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Max Tokens",
                                    "dynamic": false,
                                    "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "max_tokens",
                                    "placeholder": "",
                                    "range_spec": {
                                        "max": 128000,
                                        "min": 0,
                                        "step": 0.1,
                                        "step_type": "float"
                                    },
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": ""
                                },
                                "model_kwargs": {
                                    "_input_type": "DictInput",
                                    "advanced": true,
                                    "display_name": "Model Kwargs",
                                    "dynamic": false,
                                    "info": "Additional keyword arguments to pass to the model.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "model_kwargs",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "type": "dict",
                                    "value": {}
                                },
                                "model_name": {
                                    "_input_type": "DropdownInput",
                                    "advanced": false,
                                    "combobox": false,
                                    "dialog_inputs": {},
                                    "display_name": "Model Name",
                                    "dynamic": false,
                                    "info": "",
                                    "name": "model_name",
                                    "options": [
                                        "gpt-4o-mini",
                                        "gpt-4o",
                                        "gpt-4-turbo",
                                        "gpt-4-turbo-preview",
                                        "gpt-4",
                                        "gpt-3.5-turbo",
                                        "gpt-3.5-turbo-0125"
                                    ],
                                    "options_metadata": [],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "gpt-4o-mini"
                                },
                                "openai_api_base": {
                                    "_input_type": "StrInput",
                                    "advanced": true,
                                    "display_name": "OpenAI API Base",
                                    "dynamic": false,
                                    "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "name": "openai_api_base",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "seed": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Seed",
                                    "dynamic": false,
                                    "info": "The seed controls the reproducibility of the job.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "seed",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 1
                                },
                                "stream": {
                                    "_input_type": "BoolInput",
                                    "advanced": false,
                                    "display_name": "Stream",
                                    "dynamic": false,
                                    "info": "Stream the response from the model. Streaming works only in Chat.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "stream",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "system_message": {
                                    "_input_type": "MultilineInput",
                                    "advanced": false,
                                    "display_name": "System Message",
                                    "dynamic": false,
                                    "info": "System message to pass to the model.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "system_message",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "temperature": {
                                    "_input_type": "SliderInput",
                                    "advanced": false,
                                    "display_name": "Temperature",
                                    "dynamic": false,
                                    "info": "",
                                    "max_label": "",
                                    "max_label_icon": "",
                                    "min_label": "",
                                    "min_label_icon": "",
                                    "name": "temperature",
                                    "placeholder": "",
                                    "range_spec": {
                                        "max": 2,
                                        "min": 0,
                                        "step": 0.01,
                                        "step_type": "float"
                                    },
                                    "required": false,
                                    "show": true,
                                    "slider_buttons": false,
                                    "slider_buttons_options": [],
                                    "slider_input": false,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "type": "slider",
                                    "value": 0.1
                                }
                            },
                            "tool_mode": false
                        },
                        "showNode": true,
                        "type": "OpenAIModel"
                    },
                    "dragging": false,
                    "id": "OpenAIModel-DdNth",
                    "measured": {
                        "height": 734,
                        "width": 360
                    },
                    "position": {
                        "x": 7206.924894456788,
                        "y": 2971.632992278429
                    },
                    "selected": false,
                    "type": "genericNode"
                }
            ],
            "viewport": {
                "x": -3779.2997720436124,
                "y": -2148.895244030505,
                "zoom": 0.7375171608018025
            }
        },
        "is_component": false,
        "updated_at": "2025-01-25T04:58:25+00:00",
        "webhook": false,
        "endpoint_name": null,
        "tags": [
            "content-generation",
            "chatbots",
            "agents"
        ],
        "locked": false,
        "id": "c3ab8346-aa46-460f-82d3-28956901fa9f",
        "user_id": null,
        "folder_id": "c54584e6-88eb-4ac0-b70c-68aee37fdce2"
    },
    {
        "name": "Blog Writer",
        "description": "Auto-generate a customized blog post from instructions and referenced articles.",
        "icon": "NotebookPen",
        "icon_bg_color": null,
        "gradient": "4",
        "data": {
            "edges": [
                {
                    "animated": false,
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "ParseData",
                            "id": "ParseData-E96Aq",
                            "name": "text",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "references",
                            "id": "Prompt-so3We",
                            "inputTypes": [
                                "Message",
                                "Text"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "reactflow__edge-ParseData-E96Aq{\u0153dataType\u0153:\u0153ParseData\u0153,\u0153id\u0153:\u0153ParseData-E96Aq\u0153,\u0153name\u0153:\u0153text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-Prompt-so3We{\u0153fieldName\u0153:\u0153references\u0153,\u0153id\u0153:\u0153Prompt-so3We\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153,\u0153Text\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "ParseData-E96Aq",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153ParseData\u0153, \u0153id\u0153: \u0153ParseData-E96Aq\u0153, \u0153name\u0153: \u0153text\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "Prompt-so3We",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153references\u0153, \u0153id\u0153: \u0153Prompt-so3We\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153, \u0153Text\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "animated": false,
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "TextInput",
                            "id": "TextInput-NyDgC",
                            "name": "text",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "instructions",
                            "id": "Prompt-so3We",
                            "inputTypes": [
                                "Message",
                                "Text"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "reactflow__edge-TextInput-NyDgC{\u0153dataType\u0153:\u0153TextInput\u0153,\u0153id\u0153:\u0153TextInput-NyDgC\u0153,\u0153name\u0153:\u0153text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-Prompt-so3We{\u0153fieldName\u0153:\u0153instructions\u0153,\u0153id\u0153:\u0153Prompt-so3We\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153,\u0153Text\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "TextInput-NyDgC",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153TextInput\u0153, \u0153id\u0153: \u0153TextInput-NyDgC\u0153, \u0153name\u0153: \u0153text\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "Prompt-so3We",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153instructions\u0153, \u0153id\u0153: \u0153Prompt-so3We\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153, \u0153Text\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "Prompt",
                            "id": "Prompt-so3We",
                            "name": "prompt",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "input_value",
                            "id": "OpenAIModel-PSlnR",
                            "inputTypes": [
                                "Message"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "reactflow__edge-Prompt-so3We{\u0153dataType\u0153:\u0153Prompt\u0153,\u0153id\u0153:\u0153Prompt-so3We\u0153,\u0153name\u0153:\u0153prompt\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-OpenAIModel-PSlnR{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153OpenAIModel-PSlnR\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "Prompt-so3We",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153Prompt\u0153, \u0153id\u0153: \u0153Prompt-so3We\u0153, \u0153name\u0153: \u0153prompt\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "OpenAIModel-PSlnR",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153input_value\u0153, \u0153id\u0153: \u0153OpenAIModel-PSlnR\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "OpenAIModel",
                            "id": "OpenAIModel-PSlnR",
                            "name": "text_output",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "input_value",
                            "id": "ChatOutput-rX0kw",
                            "inputTypes": [
                                "Message"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "reactflow__edge-OpenAIModel-PSlnR{\u0153dataType\u0153:\u0153OpenAIModel\u0153,\u0153id\u0153:\u0153OpenAIModel-PSlnR\u0153,\u0153name\u0153:\u0153text_output\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-ChatOutput-rX0kw{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153ChatOutput-rX0kw\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "OpenAIModel-PSlnR",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153OpenAIModel\u0153, \u0153id\u0153: \u0153OpenAIModel-PSlnR\u0153, \u0153name\u0153: \u0153text_output\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "ChatOutput-rX0kw",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153input_value\u0153, \u0153id\u0153: \u0153ChatOutput-rX0kw\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "data": {
                        "sourceHandle": {
                            "dataType": "URL",
                            "id": "URL-3QRyA",
                            "name": "data",
                            "output_types": [
                                "Data"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "data",
                            "id": "ParseData-E96Aq",
                            "inputTypes": [
                                "Data"
                            ],
                            "type": "other"
                        }
                    },
                    "id": "xy-edge__URL-3QRyA{\u0153dataType\u0153:\u0153URL\u0153,\u0153id\u0153:\u0153URL-3QRyA\u0153,\u0153name\u0153:\u0153data\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}-ParseData-E96Aq{\u0153fieldName\u0153:\u0153data\u0153,\u0153id\u0153:\u0153ParseData-E96Aq\u0153,\u0153inputTypes\u0153:[\u0153Data\u0153],\u0153type\u0153:\u0153other\u0153}",
                    "source": "URL-3QRyA",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153URL\u0153, \u0153id\u0153: \u0153URL-3QRyA\u0153, \u0153name\u0153: \u0153data\u0153, \u0153output_types\u0153: [\u0153Data\u0153]}",
                    "target": "ParseData-E96Aq",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153data\u0153, \u0153id\u0153: \u0153ParseData-E96Aq\u0153, \u0153inputTypes\u0153: [\u0153Data\u0153], \u0153type\u0153: \u0153other\u0153}"
                }
            ],
            "nodes": [
                {
                    "data": {
                        "description": "Convert Data into plain text following a specified template.",
                        "display_name": "Parse Data",
                        "id": "ParseData-E96Aq",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Convert Data into plain text following a specified template.",
                            "display_name": "Parse Data",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "data",
                                "template",
                                "sep"
                            ],
                            "frozen": false,
                            "icon": "message-square",
                            "legacy": false,
                            "lf_version": "1.0.19.post2",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "parse_data",
                                    "name": "text",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                },
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Data List",
                                    "method": "parse_data_as_list",
                                    "name": "data_list",
                                    "selected": "Data",
                                    "types": [
                                        "Data"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text, data_to_text_list\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Data to Message\"\n    description = \"Convert Data objects into Messages using any {field_name} from input data.\"\n    icon = \"message-square\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\", is_list=True, required=True),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n            required=True,\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"text\",\n            info=\"Data as a single Message, with each input Data separated by Separator\",\n            method=\"parse_data\",\n        ),\n        Output(\n            display_name=\"Data List\",\n            name=\"data_list\",\n            info=\"Data as a list of new Data, each having `text` formatted by Template\",\n            method=\"parse_data_as_list\",\n        ),\n    ]\n\n    def _clean_args(self) -> tuple[list[Data], str, str]:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n        sep = self.sep\n        return data, template, sep\n\n    def parse_data(self) -> Message:\n        data, template, sep = self._clean_args()\n        result_string = data_to_text(template, data, sep)\n        self.status = result_string\n        return Message(text=result_string)\n\n    def parse_data_as_list(self) -> list[Data]:\n        data, template, _ = self._clean_args()\n        text_list, data_list = data_to_text_list(template, data)\n        for item, text in zip(data_list, text_list, strict=True):\n            item.set_text(text)\n        self.status = data_list\n        return data_list\n"
                                },
                                "data": {
                                    "advanced": false,
                                    "display_name": "Data",
                                    "dynamic": false,
                                    "info": "The data to convert to text.",
                                    "input_types": [
                                        "Data"
                                    ],
                                    "list": true,
                                    "name": "data",
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "other",
                                    "value": ""
                                },
                                "sep": {
                                    "advanced": true,
                                    "display_name": "Separator",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "sep",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "\n"
                                },
                                "template": {
                                    "advanced": false,
                                    "display_name": "Template",
                                    "dynamic": false,
                                    "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "template",
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "{text}"
                                }
                            }
                        },
                        "type": "ParseData"
                    },
                    "dragging": false,
                    "height": 302,
                    "id": "ParseData-E96Aq",
                    "measured": {
                        "height": 302,
                        "width": 360
                    },
                    "position": {
                        "x": 955.6736985046297,
                        "y": 702.7003891105396
                    },
                    "positionAbsolute": {
                        "x": 955.6736985046297,
                        "y": 702.7003891105396
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "description": "Create a prompt template with dynamic variables.",
                        "display_name": "Prompt",
                        "id": "Prompt-so3We",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {
                                "template": [
                                    "references",
                                    "instructions"
                                ]
                            },
                            "description": "Create a prompt template with dynamic variables.",
                            "display_name": "Prompt",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "template"
                            ],
                            "frozen": false,
                            "icon": "prompts",
                            "legacy": false,
                            "lf_version": "1.0.19.post2",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Prompt Message",
                                    "method": "build_prompt",
                                    "name": "prompt",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import MessageTextInput, Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            tool_mode=True,\n            advanced=True,\n            info=\"A placeholder input for tool mode.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    async def update_frontend_node(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = await super().update_frontend_node(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n"
                                },
                                "instructions": {
                                    "advanced": false,
                                    "display_name": "instructions",
                                    "dynamic": false,
                                    "field_type": "str",
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "input_types": [
                                        "Message",
                                        "Text"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "instructions",
                                    "password": false,
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": ""
                                },
                                "references": {
                                    "advanced": false,
                                    "display_name": "references",
                                    "dynamic": false,
                                    "field_type": "str",
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "input_types": [
                                        "Message",
                                        "Text"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "references",
                                    "password": false,
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": ""
                                },
                                "template": {
                                    "advanced": false,
                                    "display_name": "Template",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "template",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "type": "prompt",
                                    "value": "Reference 1:\n\n{references}\n\n---\n\n{instructions}\n\nBlog: \n\n"
                                },
                                "tool_placeholder": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Tool Placeholder",
                                    "dynamic": false,
                                    "info": "A placeholder input for tool mode.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "tool_placeholder",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": true,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                }
                            }
                        },
                        "type": "Prompt"
                    },
                    "dragging": false,
                    "height": 433,
                    "id": "Prompt-so3We",
                    "measured": {
                        "height": 433,
                        "width": 360
                    },
                    "position": {
                        "x": 1341.1018009526915,
                        "y": 456.4098573354365
                    },
                    "positionAbsolute": {
                        "x": 1341.1018009526915,
                        "y": 456.4098573354365
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "description": "Get text inputs from the Playground.",
                        "display_name": "Instructions",
                        "id": "TextInput-NyDgC",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Get text inputs from the Playground.",
                            "display_name": "Instructions",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "input_value"
                            ],
                            "frozen": false,
                            "icon": "type",
                            "legacy": false,
                            "lf_version": "1.0.19.post2",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "text_response",
                                    "name": "text",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.base.io.text import TextComponent\nfrom langflow.io import MultilineInput, Output\nfrom langflow.schema.message import Message\n\n\nclass TextInputComponent(TextComponent):\n    display_name = \"Text Input\"\n    description = \"Get text inputs from the Playground.\"\n    icon = \"type\"\n    name = \"TextInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Text to be passed as input.\",\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"text\", method=\"text_response\"),\n    ]\n\n    def text_response(self) -> Message:\n        return Message(\n            text=self.input_value,\n        )\n"
                                },
                                "input_value": {
                                    "_input_type": "MultilineInput",
                                    "advanced": false,
                                    "display_name": "Text",
                                    "dynamic": false,
                                    "info": "Text to be passed as input.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Use the references above for style to write a new blog/tutorial about Langflow and AI. Suggest non-covered topics."
                                }
                            }
                        },
                        "type": "TextInput"
                    },
                    "dragging": false,
                    "height": 234,
                    "id": "TextInput-NyDgC",
                    "measured": {
                        "height": 234,
                        "width": 360
                    },
                    "position": {
                        "x": 955.8314364398983,
                        "y": 402.24423846638155
                    },
                    "positionAbsolute": {
                        "x": 955.8314364398983,
                        "y": 402.24423846638155
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "description": "Display a chat message in the Playground.",
                        "display_name": "Chat Output",
                        "id": "ChatOutput-rX0kw",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Display a chat message in the Playground.",
                            "display_name": "Chat Output",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "input_value",
                                "store_message",
                                "sender",
                                "sender_name",
                                "session_id",
                                "data_template"
                            ],
                            "frozen": false,
                            "icon": "MessagesSquare",
                            "legacy": false,
                            "lf_version": "1.0.19.post2",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "message_response",
                                    "name": "message",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "background_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Background Color",
                                    "dynamic": false,
                                    "info": "The background color of the icon.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "background_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "chat_icon": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Icon",
                                    "dynamic": false,
                                    "info": "The icon of the message.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "chat_icon",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, MessageInput, MessageTextInput, Output\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        MessageInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            source_dict[\"source\"] = source\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n        background_color = self.background_color\n        text_color = self.text_color\n        if self.chat_icon:\n            icon = self.chat_icon\n        message = self.input_value if isinstance(self.input_value, Message) else Message(text=self.input_value)\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n        message.properties.icon = icon\n        message.properties.background_color = background_color\n        message.properties.text_color = text_color\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n"
                                },
                                "data_template": {
                                    "advanced": true,
                                    "display_name": "Data Template",
                                    "dynamic": false,
                                    "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "data_template",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "{text}"
                                },
                                "input_value": {
                                    "advanced": false,
                                    "display_name": "Text",
                                    "dynamic": false,
                                    "info": "Message to be passed as output.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "sender": {
                                    "advanced": true,
                                    "display_name": "Sender Type",
                                    "dynamic": false,
                                    "info": "Type of sender.",
                                    "name": "sender",
                                    "options": [
                                        "Machine",
                                        "User"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Machine"
                                },
                                "sender_name": {
                                    "advanced": true,
                                    "display_name": "Sender Name",
                                    "dynamic": false,
                                    "info": "Name of the sender.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "sender_name",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "AI"
                                },
                                "session_id": {
                                    "advanced": true,
                                    "display_name": "Session ID",
                                    "dynamic": false,
                                    "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "session_id",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "should_store_message": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Store Messages",
                                    "dynamic": false,
                                    "info": "Store the message in the history.",
                                    "list": false,
                                    "name": "should_store_message",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "text_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Text Color",
                                    "dynamic": false,
                                    "info": "The text color of the name",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "text_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                }
                            }
                        },
                        "type": "ChatOutput"
                    },
                    "dragging": false,
                    "height": 234,
                    "id": "ChatOutput-rX0kw",
                    "measured": {
                        "height": 234,
                        "width": 360
                    },
                    "position": {
                        "x": 2097.489047349972,
                        "y": 603.355618581002
                    },
                    "positionAbsolute": {
                        "x": 2113.228183852361,
                        "y": 594.6116538574528
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "id": "note-o0nz4",
                        "node": {
                            "description": "## URL Component Setup\n\n**Purpose:**\nFetch and process content from the web to use as reference material for creating a blog post.\n\n**Instructions:**\n1. **Input URLs**: List the URLs of web pages whose content you want to fetch. Ensure the URLs start with `http://` or `https://`.\n2. **Select Output Format**:\n   - **Text**: To extract plain text from the pages.\n   - **Raw HTML**: To retrieve the raw HTML content for advanced uses.\n\n**Tips**:\n- Double-check URL formats to prevent any data fetching errors.\n- Use the '+' button to add multiple URLs as needed for comprehensive references.\n",
                            "display_name": "",
                            "documentation": "",
                            "template": {
                                "backgroundColor": "blue"
                            }
                        },
                        "type": "note"
                    },
                    "dragging": false,
                    "height": 329,
                    "id": "note-o0nz4",
                    "measured": {
                        "height": 329,
                        "width": 328
                    },
                    "position": {
                        "x": 484.73635938598477,
                        "y": 153.29803159918163
                    },
                    "positionAbsolute": {
                        "x": 484.73635938598477,
                        "y": 153.29803159918163
                    },
                    "resizing": false,
                    "selected": false,
                    "style": {
                        "height": 329,
                        "width": 414
                    },
                    "type": "noteNode",
                    "width": 414
                },
                {
                    "data": {
                        "id": "note-ioTU5",
                        "node": {
                            "description": "# Blog Writing Flow Overview\n\n**Workflow Description:**\nThis flow assists in creating a blog post by using content fetched from URLs and user-provided instructions. It combines external references and user inputs to generate coherent and context-rich text.\n\n**Components**:\n1. **URL Component**: Fetches reference content from specified web pages.\n2. **Parse Data**: Converts the fetched content into a text format.\n3. **Text Input**: Accepts user-specific instructions for the blog post.\n4. **Prompt with Variables**: Merges references and instructions into a dynamic writing prompt.\n5. **OpenAI Model**: Generates the blog post using an AI language model.\n6. **Chat Output**: Displays the final blog text for user review and further refinement.\n\n**Steps to Execute**:\n1. Enter the relevant URLs and specify the output format in the **URL Component**.\n2. Provide detailed writing **Instructions** for AI to follow.\n3. Run the flow to generate the blog and view the result in **Chat Output**.\n\n**Benefits**:\n- Simplifies blog creation by using AI to structure and write content.\n- Incorporates comprehensive reference material to enhance post depth and accuracy.",
                            "display_name": "",
                            "documentation": "",
                            "template": {}
                        },
                        "type": "note"
                    },
                    "dragging": false,
                    "height": 509,
                    "id": "note-ioTU5",
                    "measured": {
                        "height": 509,
                        "width": 328
                    },
                    "position": {
                        "x": -78.41970365609802,
                        "y": 405.04114164010207
                    },
                    "positionAbsolute": {
                        "x": -78.41970365609802,
                        "y": 405.04114164010207
                    },
                    "resizing": false,
                    "selected": false,
                    "style": {
                        "height": 509,
                        "width": 562
                    },
                    "type": "noteNode",
                    "width": 562
                },
                {
                    "data": {
                        "id": "note-OFdB9",
                        "node": {
                            "description": "## Get Your OpenAI API Key\n**Steps**:\n1. **Visit** [OpenAI's API Key Page](https://platform.openai.com/api-keys).\n\n2. **Log In/Sign Up**:\n   - Log in or create a new OpenAI account.\n\n3. **Generate API Key**:\n   - Click \"Create New Secret Key\" to obtain your key.\n\n4. **Store Your Key Securely**:\n   - Note it down as it will only display once.\n\n5. **Enter API Key**:\n   - Input your key in the OpenAI API Key field within the component setup.\n\nKeep your key safe and manage it responsibly!",
                            "display_name": "",
                            "documentation": "",
                            "template": {
                                "backgroundColor": "rose"
                            }
                        },
                        "type": "note"
                    },
                    "dragging": false,
                    "height": 324,
                    "id": "note-OFdB9",
                    "measured": {
                        "height": 324,
                        "width": 328
                    },
                    "position": {
                        "x": 1703.974189852056,
                        "y": 125.15366878585462
                    },
                    "positionAbsolute": {
                        "x": 1703.974189852056,
                        "y": 125.15366878585462
                    },
                    "resizing": false,
                    "selected": false,
                    "style": {
                        "height": 324,
                        "width": 343
                    },
                    "type": "noteNode",
                    "width": 343
                },
                {
                    "data": {
                        "id": "OpenAIModel-PSlnR",
                        "node": {
                            "base_classes": [
                                "LanguageModel",
                                "Message"
                            ],
                            "beta": false,
                            "category": "models",
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Generates text using OpenAI LLMs.",
                            "display_name": "OpenAI",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "input_value",
                                "system_message",
                                "stream",
                                "max_tokens",
                                "model_kwargs",
                                "json_mode",
                                "model_name",
                                "openai_api_base",
                                "api_key",
                                "temperature",
                                "seed"
                            ],
                            "frozen": false,
                            "icon": "OpenAI",
                            "key": "OpenAIModel",
                            "legacy": false,
                            "metadata": {},
                            "minimized": false,
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "text_response",
                                    "name": "text_output",
                                    "required_inputs": [],
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                },
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Language Model",
                                    "method": "build_model",
                                    "name": "model_output",
                                    "required_inputs": [
                                        "api_key"
                                    ],
                                    "selected": "LanguageModel",
                                    "types": [
                                        "LanguageModel"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "score": 0.001,
                            "template": {
                                "_type": "Component",
                                "api_key": {
                                    "_input_type": "SecretStrInput",
                                    "advanced": false,
                                    "display_name": "OpenAI API Key",
                                    "dynamic": false,
                                    "info": "The OpenAI API Key to use for the OpenAI model.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "load_from_db": true,
                                    "name": "api_key",
                                    "password": true,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": "OPENAI_API_KEY"
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.openai_constants import OPENAI_MODEL_NAMES\nfrom langflow.field_typing import LanguageModel\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.inputs import BoolInput, DictInput, DropdownInput, IntInput, SecretStrInput, SliderInput, StrInput\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIModel\"\n\n    inputs = [\n        *LCModelComponent._base_inputs,\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            range_spec=RangeSpec(min=0, max=128000),\n        ),\n        DictInput(\n            name=\"model_kwargs\",\n            display_name=\"Model Kwargs\",\n            advanced=True,\n            info=\"Additional keyword arguments to pass to the model.\",\n        ),\n        BoolInput(\n            name=\"json_mode\",\n            display_name=\"JSON Mode\",\n            advanced=True,\n            info=\"If True, it will output JSON regardless of passing a schema.\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            advanced=False,\n            options=OPENAI_MODEL_NAMES,\n            value=OPENAI_MODEL_NAMES[0],\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. \"\n            \"Defaults to https://api.openai.com/v1. \"\n            \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n            required=True,\n        ),\n        SliderInput(\n            name=\"temperature\", display_name=\"Temperature\", value=0.1, range_spec=RangeSpec(min=0, max=2, step=0.01)\n        ),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        openai_api_key = self.api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\n        json_mode = self.json_mode\n        seed = self.seed\n\n        api_key = SecretStr(openai_api_key).get_secret_value() if openai_api_key else None\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature if temperature is not None else 0.1,\n            seed=seed,\n        )\n        if json_mode:\n            output = output.bind(response_format={\"type\": \"json_object\"})\n\n        return output\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"Get a message from an OpenAI exception.\n\n        Args:\n            e (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return None\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")\n            if message:\n                return message\n        return None\n"
                                },
                                "input_value": {
                                    "_input_type": "MessageInput",
                                    "advanced": false,
                                    "display_name": "Input",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "json_mode": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "JSON Mode",
                                    "dynamic": false,
                                    "info": "If True, it will output JSON regardless of passing a schema.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "json_mode",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "max_tokens": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Max Tokens",
                                    "dynamic": false,
                                    "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "max_tokens",
                                    "placeholder": "",
                                    "range_spec": {
                                        "max": 128000,
                                        "min": 0,
                                        "step": 0.1,
                                        "step_type": "float"
                                    },
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": ""
                                },
                                "model_kwargs": {
                                    "_input_type": "DictInput",
                                    "advanced": true,
                                    "display_name": "Model Kwargs",
                                    "dynamic": false,
                                    "info": "Additional keyword arguments to pass to the model.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "model_kwargs",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "type": "dict",
                                    "value": {}
                                },
                                "model_name": {
                                    "_input_type": "DropdownInput",
                                    "advanced": false,
                                    "combobox": false,
                                    "dialog_inputs": {},
                                    "display_name": "Model Name",
                                    "dynamic": false,
                                    "info": "",
                                    "name": "model_name",
                                    "options": [
                                        "gpt-4o-mini",
                                        "gpt-4o",
                                        "gpt-4-turbo",
                                        "gpt-4-turbo-preview",
                                        "gpt-4",
                                        "gpt-3.5-turbo",
                                        "gpt-3.5-turbo-0125"
                                    ],
                                    "options_metadata": [],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "gpt-4o-mini"
                                },
                                "openai_api_base": {
                                    "_input_type": "StrInput",
                                    "advanced": true,
                                    "display_name": "OpenAI API Base",
                                    "dynamic": false,
                                    "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "name": "openai_api_base",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "seed": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Seed",
                                    "dynamic": false,
                                    "info": "The seed controls the reproducibility of the job.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "seed",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 1
                                },
                                "stream": {
                                    "_input_type": "BoolInput",
                                    "advanced": false,
                                    "display_name": "Stream",
                                    "dynamic": false,
                                    "info": "Stream the response from the model. Streaming works only in Chat.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "stream",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "system_message": {
                                    "_input_type": "MultilineInput",
                                    "advanced": false,
                                    "display_name": "System Message",
                                    "dynamic": false,
                                    "info": "System message to pass to the model.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "system_message",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "temperature": {
                                    "_input_type": "SliderInput",
                                    "advanced": false,
                                    "display_name": "Temperature",
                                    "dynamic": false,
                                    "info": "",
                                    "max_label": "",
                                    "max_label_icon": "",
                                    "min_label": "",
                                    "min_label_icon": "",
                                    "name": "temperature",
                                    "placeholder": "",
                                    "range_spec": {
                                        "max": 2,
                                        "min": 0,
                                        "step": 0.01,
                                        "step_type": "float"
                                    },
                                    "required": false,
                                    "show": true,
                                    "slider_buttons": false,
                                    "slider_buttons_options": [],
                                    "slider_input": false,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "type": "slider",
                                    "value": 0.1
                                }
                            },
                            "tool_mode": false
                        },
                        "showNode": true,
                        "type": "OpenAIModel"
                    },
                    "dragging": false,
                    "id": "OpenAIModel-PSlnR",
                    "measured": {
                        "height": 734,
                        "width": 360
                    },
                    "position": {
                        "x": 1715.4141756503298,
                        "y": 434.13478201304184
                    },
                    "selected": false,
                    "type": "genericNode"
                },
                {
                    "data": {
                        "id": "URL-3QRyA",
                        "node": {
                            "base_classes": [
                                "Data",
                                "DataFrame",
                                "Message"
                            ],
                            "beta": false,
                            "category": "data",
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Load and retrive data from specified URLs.",
                            "display_name": "URL",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "urls",
                                "format"
                            ],
                            "frozen": false,
                            "icon": "layout-template",
                            "key": "URL",
                            "legacy": false,
                            "metadata": {},
                            "minimized": false,
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Data",
                                    "method": "fetch_content",
                                    "name": "data",
                                    "selected": "Data",
                                    "types": [
                                        "Data"
                                    ],
                                    "value": "__UNDEFINED__"
                                },
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "fetch_content_text",
                                    "name": "text",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                },
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "DataFrame",
                                    "method": "as_dataframe",
                                    "name": "dataframe",
                                    "selected": "DataFrame",
                                    "types": [
                                        "DataFrame"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "score": 2.220446049250313e-16,
                            "template": {
                                "_type": "Component",
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "import re\n\nfrom langchain_community.document_loaders import AsyncHtmlLoader, WebBaseLoader\n\nfrom langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.schema import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\n\n\nclass URLComponent(Component):\n    display_name = \"URL\"\n    description = \"Load and retrive data from specified URLs.\"\n    icon = \"layout-template\"\n    name = \"URL\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"urls\",\n            display_name=\"URLs\",\n            is_list=True,\n            tool_mode=True,\n            placeholder=\"Enter a URL...\",\n            list_add_label=\"Add URL\",\n        ),\n        DropdownInput(\n            name=\"format\",\n            display_name=\"Output Format\",\n            info=\"Output Format. Use 'Text' to extract the text from the HTML or 'Raw HTML' for the raw HTML content.\",\n            options=[\"Text\", \"Raw HTML\"],\n            value=\"Text\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"fetch_content\"),\n        Output(display_name=\"Message\", name=\"text\", method=\"fetch_content_text\"),\n        Output(display_name=\"DataFrame\", name=\"dataframe\", method=\"as_dataframe\"),\n    ]\n\n    def ensure_url(self, string: str) -> str:\n        \"\"\"Ensures the given string is a URL by adding 'http://' if it doesn't start with 'http://' or 'https://'.\n\n        Raises an error if the string is not a valid URL.\n\n        Parameters:\n            string (str): The string to be checked and possibly modified.\n\n        Returns:\n            str: The modified string that is ensured to be a URL.\n\n        Raises:\n            ValueError: If the string is not a valid URL.\n        \"\"\"\n        if not string.startswith((\"http://\", \"https://\")):\n            string = \"http://\" + string\n\n        # Basic URL validation regex\n        url_regex = re.compile(\n            r\"^(https?:\\/\\/)?\"  # optional protocol\n            r\"(www\\.)?\"  # optional www\n            r\"([a-zA-Z0-9.-]+)\"  # domain\n            r\"(\\.[a-zA-Z]{2,})?\"  # top-level domain\n            r\"(:\\d+)?\"  # optional port\n            r\"(\\/[^\\s]*)?$\",  # optional path\n            re.IGNORECASE,\n        )\n\n        if not url_regex.match(string):\n            msg = f\"Invalid URL: {string}\"\n            raise ValueError(msg)\n\n        return string\n\n    def fetch_content(self) -> list[Data]:\n        urls = [self.ensure_url(url.strip()) for url in self.urls if url.strip()]\n        if self.format == \"Raw HTML\":\n            loader = AsyncHtmlLoader(web_path=urls, encoding=\"utf-8\")\n        else:\n            loader = WebBaseLoader(web_paths=urls, encoding=\"utf-8\")\n        docs = loader.load()\n        data = [Data(text=doc.page_content, **doc.metadata) for doc in docs]\n        self.status = data\n        return data\n\n    def fetch_content_text(self) -> Message:\n        data = self.fetch_content()\n\n        result_string = data_to_text(\"{text}\", data)\n        self.status = result_string\n        return Message(text=result_string)\n\n    def as_dataframe(self) -> DataFrame:\n        return DataFrame(self.fetch_content())\n"
                                },
                                "format": {
                                    "_input_type": "DropdownInput",
                                    "advanced": false,
                                    "combobox": false,
                                    "dialog_inputs": {},
                                    "display_name": "Output Format",
                                    "dynamic": false,
                                    "info": "Output Format. Use 'Text' to extract the text from the HTML or 'Raw HTML' for the raw HTML content.",
                                    "name": "format",
                                    "options": [
                                        "Text",
                                        "Raw HTML"
                                    ],
                                    "options_metadata": [],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Text"
                                },
                                "urls": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": false,
                                    "display_name": "URLs",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": true,
                                    "list_add_label": "Add URL",
                                    "load_from_db": false,
                                    "name": "urls",
                                    "placeholder": "Enter a URL...",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": true,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": [
                                        "https://langflow.org/",
                                        "https://docs.langflow.org/"
                                    ]
                                }
                            },
                            "tool_mode": false
                        },
                        "showNode": true,
                        "type": "URL"
                    },
                    "dragging": false,
                    "id": "URL-3QRyA",
                    "measured": {
                        "height": 522,
                        "width": 360
                    },
                    "position": {
                        "x": 498.72695054312635,
                        "y": 554.4485732587549
                    },
                    "selected": false,
                    "type": "genericNode"
                }
            ],
            "viewport": {
                "x": 118.07504778051486,
                "y": 77.01438585334114,
                "zoom": 0.5753720075740282
            }
        },
        "is_component": false,
        "updated_at": "2025-01-25T04:58:25+00:00",
        "webhook": false,
        "endpoint_name": null,
        "tags": [
            "chatbots",
            "content-generation"
        ],
        "locked": false,
        "id": "ebc8f7ed-9a08-4208-a9a5-2b5e6cdd3e64",
        "user_id": null,
        "folder_id": "c54584e6-88eb-4ac0-b70c-68aee37fdce2"
    },
    {
        "name": "Vector Store RAG",
        "description": "Load your data for chat context with Retrieval Augmented Generation.",
        "icon": null,
        "icon_bg_color": null,
        "gradient": null,
        "data": {
            "edges": [
                {
                    "animated": false,
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "ParseData",
                            "id": "ParseData-lxEEj",
                            "name": "text",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "context",
                            "id": "Prompt-1QowJ",
                            "inputTypes": [
                                "Message",
                                "Text"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "reactflow__edge-ParseData-lxEEj{\u0153dataType\u0153:\u0153ParseData\u0153,\u0153id\u0153:\u0153ParseData-lxEEj\u0153,\u0153name\u0153:\u0153text\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-Prompt-1QowJ{\u0153fieldName\u0153:\u0153context\u0153,\u0153id\u0153:\u0153Prompt-1QowJ\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153,\u0153Text\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "ParseData-lxEEj",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153ParseData\u0153, \u0153id\u0153: \u0153ParseData-lxEEj\u0153, \u0153name\u0153: \u0153text\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "Prompt-1QowJ",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153context\u0153, \u0153id\u0153: \u0153Prompt-1QowJ\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153, \u0153Text\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "animated": false,
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "ChatInput",
                            "id": "ChatInput-X0oUk",
                            "name": "message",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "question",
                            "id": "Prompt-1QowJ",
                            "inputTypes": [
                                "Message",
                                "Text"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "reactflow__edge-ChatInput-X0oUk{\u0153dataType\u0153:\u0153ChatInput\u0153,\u0153id\u0153:\u0153ChatInput-X0oUk\u0153,\u0153name\u0153:\u0153message\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-Prompt-1QowJ{\u0153fieldName\u0153:\u0153question\u0153,\u0153id\u0153:\u0153Prompt-1QowJ\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153,\u0153Text\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "ChatInput-X0oUk",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153ChatInput\u0153, \u0153id\u0153: \u0153ChatInput-X0oUk\u0153, \u0153name\u0153: \u0153message\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "Prompt-1QowJ",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153question\u0153, \u0153id\u0153: \u0153Prompt-1QowJ\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153, \u0153Text\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "animated": false,
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "File",
                            "id": "File-2ugwa",
                            "name": "data",
                            "output_types": [
                                "Data"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "data_inputs",
                            "id": "SplitText-Zppn2",
                            "inputTypes": [
                                "Data"
                            ],
                            "type": "other"
                        }
                    },
                    "id": "reactflow__edge-File-2ugwa{\u0153dataType\u0153:\u0153File\u0153,\u0153id\u0153:\u0153File-2ugwa\u0153,\u0153name\u0153:\u0153data\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}-SplitText-Zppn2{\u0153fieldName\u0153:\u0153data_inputs\u0153,\u0153id\u0153:\u0153SplitText-Zppn2\u0153,\u0153inputTypes\u0153:[\u0153Data\u0153],\u0153type\u0153:\u0153other\u0153}",
                    "source": "File-2ugwa",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153File\u0153, \u0153id\u0153: \u0153File-2ugwa\u0153, \u0153name\u0153: \u0153data\u0153, \u0153output_types\u0153: [\u0153Data\u0153]}",
                    "target": "SplitText-Zppn2",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153data_inputs\u0153, \u0153id\u0153: \u0153SplitText-Zppn2\u0153, \u0153inputTypes\u0153: [\u0153Data\u0153], \u0153type\u0153: \u0153other\u0153}"
                },
                {
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "Prompt",
                            "id": "Prompt-1QowJ",
                            "name": "prompt",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "input_value",
                            "id": "OpenAIModel-qQpEA",
                            "inputTypes": [
                                "Message"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "reactflow__edge-Prompt-1QowJ{\u0153dataType\u0153:\u0153Prompt\u0153,\u0153id\u0153:\u0153Prompt-1QowJ\u0153,\u0153name\u0153:\u0153prompt\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-OpenAIModel-qQpEA{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153OpenAIModel-qQpEA\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "Prompt-1QowJ",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153Prompt\u0153, \u0153id\u0153: \u0153Prompt-1QowJ\u0153, \u0153name\u0153: \u0153prompt\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "OpenAIModel-qQpEA",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153input_value\u0153, \u0153id\u0153: \u0153OpenAIModel-qQpEA\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "OpenAIModel",
                            "id": "OpenAIModel-qQpEA",
                            "name": "text_output",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "input_value",
                            "id": "ChatOutput-bhnRK",
                            "inputTypes": [
                                "Message"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "reactflow__edge-OpenAIModel-qQpEA{\u0153dataType\u0153:\u0153OpenAIModel\u0153,\u0153id\u0153:\u0153OpenAIModel-qQpEA\u0153,\u0153name\u0153:\u0153text_output\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-ChatOutput-bhnRK{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153ChatOutput-bhnRK\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "OpenAIModel-qQpEA",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153OpenAIModel\u0153, \u0153id\u0153: \u0153OpenAIModel-qQpEA\u0153, \u0153name\u0153: \u0153text_output\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "ChatOutput-bhnRK",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153input_value\u0153, \u0153id\u0153: \u0153ChatOutput-bhnRK\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "data": {
                        "sourceHandle": {
                            "dataType": "OpenAIEmbeddings",
                            "id": "OpenAIEmbeddings-5Qjc4",
                            "name": "embeddings",
                            "output_types": [
                                "Embeddings"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "embedding_model",
                            "id": "AstraDB-buLOo",
                            "inputTypes": [
                                "Embeddings"
                            ],
                            "type": "other"
                        }
                    },
                    "id": "xy-edge__OpenAIEmbeddings-5Qjc4{\u0153dataType\u0153:\u0153OpenAIEmbeddings\u0153,\u0153id\u0153:\u0153OpenAIEmbeddings-5Qjc4\u0153,\u0153name\u0153:\u0153embeddings\u0153,\u0153output_types\u0153:[\u0153Embeddings\u0153]}-AstraDB-buLOo{\u0153fieldName\u0153:\u0153embedding_model\u0153,\u0153id\u0153:\u0153AstraDB-buLOo\u0153,\u0153inputTypes\u0153:[\u0153Embeddings\u0153],\u0153type\u0153:\u0153other\u0153}",
                    "source": "OpenAIEmbeddings-5Qjc4",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153OpenAIEmbeddings\u0153, \u0153id\u0153: \u0153OpenAIEmbeddings-5Qjc4\u0153, \u0153name\u0153: \u0153embeddings\u0153, \u0153output_types\u0153: [\u0153Embeddings\u0153]}",
                    "target": "AstraDB-buLOo",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153embedding_model\u0153, \u0153id\u0153: \u0153AstraDB-buLOo\u0153, \u0153inputTypes\u0153: [\u0153Embeddings\u0153], \u0153type\u0153: \u0153other\u0153}"
                },
                {
                    "data": {
                        "sourceHandle": {
                            "dataType": "ChatInput",
                            "id": "ChatInput-X0oUk",
                            "name": "message",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "search_query",
                            "id": "AstraDB-buLOo",
                            "inputTypes": [
                                "Message"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "xy-edge__ChatInput-X0oUk{\u0153dataType\u0153:\u0153ChatInput\u0153,\u0153id\u0153:\u0153ChatInput-X0oUk\u0153,\u0153name\u0153:\u0153message\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-AstraDB-buLOo{\u0153fieldName\u0153:\u0153search_query\u0153,\u0153id\u0153:\u0153AstraDB-buLOo\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "ChatInput-X0oUk",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153ChatInput\u0153, \u0153id\u0153: \u0153ChatInput-X0oUk\u0153, \u0153name\u0153: \u0153message\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "AstraDB-buLOo",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153search_query\u0153, \u0153id\u0153: \u0153AstraDB-buLOo\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "data": {
                        "sourceHandle": {
                            "dataType": "AstraDB",
                            "id": "AstraDB-buLOo",
                            "name": "search_results",
                            "output_types": [
                                "Data"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "data",
                            "id": "ParseData-lxEEj",
                            "inputTypes": [
                                "Data"
                            ],
                            "type": "other"
                        }
                    },
                    "id": "xy-edge__AstraDB-buLOo{\u0153dataType\u0153:\u0153AstraDB\u0153,\u0153id\u0153:\u0153AstraDB-buLOo\u0153,\u0153name\u0153:\u0153search_results\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}-ParseData-lxEEj{\u0153fieldName\u0153:\u0153data\u0153,\u0153id\u0153:\u0153ParseData-lxEEj\u0153,\u0153inputTypes\u0153:[\u0153Data\u0153],\u0153type\u0153:\u0153other\u0153}",
                    "source": "AstraDB-buLOo",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153AstraDB\u0153, \u0153id\u0153: \u0153AstraDB-buLOo\u0153, \u0153name\u0153: \u0153search_results\u0153, \u0153output_types\u0153: [\u0153Data\u0153]}",
                    "target": "ParseData-lxEEj",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153data\u0153, \u0153id\u0153: \u0153ParseData-lxEEj\u0153, \u0153inputTypes\u0153: [\u0153Data\u0153], \u0153type\u0153: \u0153other\u0153}"
                },
                {
                    "data": {
                        "sourceHandle": {
                            "dataType": "OpenAIEmbeddings",
                            "id": "OpenAIEmbeddings-Indqd",
                            "name": "embeddings",
                            "output_types": [
                                "Embeddings"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "embedding_model",
                            "id": "AstraDB-g91YK",
                            "inputTypes": [
                                "Embeddings"
                            ],
                            "type": "other"
                        }
                    },
                    "id": "xy-edge__OpenAIEmbeddings-Indqd{\u0153dataType\u0153:\u0153OpenAIEmbeddings\u0153,\u0153id\u0153:\u0153OpenAIEmbeddings-Indqd\u0153,\u0153name\u0153:\u0153embeddings\u0153,\u0153output_types\u0153:[\u0153Embeddings\u0153]}-AstraDB-g91YK{\u0153fieldName\u0153:\u0153embedding_model\u0153,\u0153id\u0153:\u0153AstraDB-g91YK\u0153,\u0153inputTypes\u0153:[\u0153Embeddings\u0153],\u0153type\u0153:\u0153other\u0153}",
                    "source": "OpenAIEmbeddings-Indqd",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153OpenAIEmbeddings\u0153, \u0153id\u0153: \u0153OpenAIEmbeddings-Indqd\u0153, \u0153name\u0153: \u0153embeddings\u0153, \u0153output_types\u0153: [\u0153Embeddings\u0153]}",
                    "target": "AstraDB-g91YK",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153embedding_model\u0153, \u0153id\u0153: \u0153AstraDB-g91YK\u0153, \u0153inputTypes\u0153: [\u0153Embeddings\u0153], \u0153type\u0153: \u0153other\u0153}"
                },
                {
                    "data": {
                        "sourceHandle": {
                            "dataType": "SplitText",
                            "id": "SplitText-Zppn2",
                            "name": "chunks",
                            "output_types": [
                                "Data"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "ingest_data",
                            "id": "AstraDB-g91YK",
                            "inputTypes": [
                                "Data"
                            ],
                            "type": "other"
                        }
                    },
                    "id": "xy-edge__SplitText-Zppn2{\u0153dataType\u0153:\u0153SplitText\u0153,\u0153id\u0153:\u0153SplitText-Zppn2\u0153,\u0153name\u0153:\u0153chunks\u0153,\u0153output_types\u0153:[\u0153Data\u0153]}-AstraDB-g91YK{\u0153fieldName\u0153:\u0153ingest_data\u0153,\u0153id\u0153:\u0153AstraDB-g91YK\u0153,\u0153inputTypes\u0153:[\u0153Data\u0153],\u0153type\u0153:\u0153other\u0153}",
                    "source": "SplitText-Zppn2",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153SplitText\u0153, \u0153id\u0153: \u0153SplitText-Zppn2\u0153, \u0153name\u0153: \u0153chunks\u0153, \u0153output_types\u0153: [\u0153Data\u0153]}",
                    "target": "AstraDB-g91YK",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153ingest_data\u0153, \u0153id\u0153: \u0153AstraDB-g91YK\u0153, \u0153inputTypes\u0153: [\u0153Data\u0153], \u0153type\u0153: \u0153other\u0153}"
                }
            ],
            "nodes": [
                {
                    "data": {
                        "description": "Get chat inputs from the Playground.",
                        "display_name": "Chat Input",
                        "id": "ChatInput-X0oUk",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Get chat inputs from the Playground.",
                            "display_name": "Chat Input",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "input_value",
                                "should_store_message",
                                "sender",
                                "sender_name",
                                "session_id",
                                "files"
                            ],
                            "frozen": false,
                            "icon": "MessagesSquare",
                            "legacy": false,
                            "lf_version": "1.1.1",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "types": [
                                        "Message"
                                    ],
                                    "selected": "Message",
                                    "name": "message",
                                    "display_name": "Message",
                                    "method": "message_response",
                                    "value": "__UNDEFINED__",
                                    "cache": true,
                                    "allows_loop": false
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "background_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Background Color",
                                    "dynamic": false,
                                    "info": "The background color of the icon.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "background_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "chat_icon": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Icon",
                                    "dynamic": false,
                                    "info": "The icon of the message.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "chat_icon",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "code": {
                                    "type": "code",
                                    "required": true,
                                    "placeholder": "",
                                    "list": false,
                                    "show": true,
                                    "multiline": true,
                                    "value": "from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import (\n    DropdownInput,\n    FileInput,\n    MessageTextInput,\n    MultilineInput,\n    Output,\n)\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_USER,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatInput\"\n    minimized = True\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n            input_types=[],\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    async def message_response(self) -> Message:\n        background_color = self.background_color\n        text_color = self.text_color\n        icon = self.chat_icon\n\n        message = await Message.create(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n            properties={\n                \"background_color\": background_color,\n                \"text_color\": text_color,\n                \"icon\": icon,\n            },\n        )\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n",
                                    "fileTypes": [],
                                    "file_path": "",
                                    "password": false,
                                    "name": "code",
                                    "advanced": true,
                                    "dynamic": true,
                                    "info": "",
                                    "load_from_db": false,
                                    "title_case": false
                                },
                                "files": {
                                    "advanced": true,
                                    "display_name": "Files",
                                    "dynamic": false,
                                    "fileTypes": [
                                        "txt",
                                        "md",
                                        "mdx",
                                        "csv",
                                        "json",
                                        "yaml",
                                        "yml",
                                        "xml",
                                        "html",
                                        "htm",
                                        "pdf",
                                        "docx",
                                        "py",
                                        "sh",
                                        "sql",
                                        "js",
                                        "ts",
                                        "tsx",
                                        "jpg",
                                        "jpeg",
                                        "png",
                                        "bmp",
                                        "image"
                                    ],
                                    "file_path": "",
                                    "info": "Files to be sent with the message.",
                                    "list": true,
                                    "name": "files",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "file",
                                    "value": ""
                                },
                                "input_value": {
                                    "advanced": false,
                                    "display_name": "Text",
                                    "dynamic": false,
                                    "info": "Message to be passed as input.",
                                    "input_types": [],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "What is the document is about?"
                                },
                                "sender": {
                                    "advanced": true,
                                    "display_name": "Sender Type",
                                    "dynamic": false,
                                    "info": "Type of sender.",
                                    "name": "sender",
                                    "options": [
                                        "Machine",
                                        "User"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "User"
                                },
                                "sender_name": {
                                    "advanced": true,
                                    "display_name": "Sender Name",
                                    "dynamic": false,
                                    "info": "Name of the sender.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "sender_name",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "User"
                                },
                                "session_id": {
                                    "advanced": true,
                                    "display_name": "Session ID",
                                    "dynamic": false,
                                    "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "session_id",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "should_store_message": {
                                    "advanced": true,
                                    "display_name": "Store Messages",
                                    "dynamic": false,
                                    "info": "Store the message in the history.",
                                    "list": false,
                                    "name": "should_store_message",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "text_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Text Color",
                                    "dynamic": false,
                                    "info": "The text color of the name",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "text_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                }
                            }
                        },
                        "type": "ChatInput"
                    },
                    "dragging": false,
                    "height": 234,
                    "id": "ChatInput-X0oUk",
                    "measured": {
                        "height": 234,
                        "width": 320
                    },
                    "position": {
                        "x": 743.9745420290319,
                        "y": 463.6977510207854
                    },
                    "positionAbsolute": {
                        "x": 743.9745420290319,
                        "y": 463.6977510207854
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "description": "Convert Data into plain text following a specified template.",
                        "display_name": "Parse Data",
                        "id": "ParseData-lxEEj",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Convert Data into plain text following a specified template.",
                            "display_name": "Parse Data",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "data",
                                "template",
                                "sep"
                            ],
                            "frozen": false,
                            "icon": "message-square",
                            "legacy": false,
                            "lf_version": "1.1.1",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "types": [
                                        "Message"
                                    ],
                                    "selected": "Message",
                                    "name": "text",
                                    "display_name": "Message",
                                    "method": "parse_data",
                                    "value": "__UNDEFINED__",
                                    "cache": true,
                                    "allows_loop": false
                                },
                                {
                                    "types": [
                                        "Data"
                                    ],
                                    "selected": "Data",
                                    "name": "data_list",
                                    "display_name": "Data List",
                                    "method": "parse_data_as_list",
                                    "value": "__UNDEFINED__",
                                    "cache": true,
                                    "allows_loop": false
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "code": {
                                    "type": "code",
                                    "required": true,
                                    "placeholder": "",
                                    "list": false,
                                    "show": true,
                                    "multiline": true,
                                    "value": "from langflow.custom import Component\nfrom langflow.helpers.data import data_to_text, data_to_text_list\nfrom langflow.io import DataInput, MultilineInput, Output, StrInput\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\n\n\nclass ParseDataComponent(Component):\n    display_name = \"Data to Message\"\n    description = \"Convert Data objects into Messages using any {field_name} from input data.\"\n    icon = \"message-square\"\n    name = \"ParseData\"\n\n    inputs = [\n        DataInput(name=\"data\", display_name=\"Data\", info=\"The data to convert to text.\", is_list=True, required=True),\n        MultilineInput(\n            name=\"template\",\n            display_name=\"Template\",\n            info=\"The template to use for formatting the data. \"\n            \"It can contain the keys {text}, {data} or any other key in the Data.\",\n            value=\"{text}\",\n            required=True,\n        ),\n        StrInput(name=\"sep\", display_name=\"Separator\", advanced=True, value=\"\\n\"),\n    ]\n\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"text\",\n            info=\"Data as a single Message, with each input Data separated by Separator\",\n            method=\"parse_data\",\n        ),\n        Output(\n            display_name=\"Data List\",\n            name=\"data_list\",\n            info=\"Data as a list of new Data, each having `text` formatted by Template\",\n            method=\"parse_data_as_list\",\n        ),\n    ]\n\n    def _clean_args(self) -> tuple[list[Data], str, str]:\n        data = self.data if isinstance(self.data, list) else [self.data]\n        template = self.template\n        sep = self.sep\n        return data, template, sep\n\n    def parse_data(self) -> Message:\n        data, template, sep = self._clean_args()\n        result_string = data_to_text(template, data, sep)\n        self.status = result_string\n        return Message(text=result_string)\n\n    def parse_data_as_list(self) -> list[Data]:\n        data, template, _ = self._clean_args()\n        text_list, data_list = data_to_text_list(template, data)\n        for item, text in zip(data_list, text_list, strict=True):\n            item.set_text(text)\n        self.status = data_list\n        return data_list\n",
                                    "fileTypes": [],
                                    "file_path": "",
                                    "password": false,
                                    "name": "code",
                                    "advanced": true,
                                    "dynamic": true,
                                    "info": "",
                                    "load_from_db": false,
                                    "title_case": false
                                },
                                "data": {
                                    "advanced": false,
                                    "display_name": "Data",
                                    "dynamic": false,
                                    "info": "The data to convert to text.",
                                    "input_types": [
                                        "Data"
                                    ],
                                    "list": true,
                                    "name": "data",
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "other",
                                    "value": ""
                                },
                                "sep": {
                                    "advanced": true,
                                    "display_name": "Separator",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "sep",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "\n"
                                },
                                "template": {
                                    "advanced": false,
                                    "display_name": "Template",
                                    "dynamic": false,
                                    "info": "The template to use for formatting the data. It can contain the keys {text}, {data} or any other key in the Data.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "template",
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "{text}"
                                }
                            }
                        },
                        "type": "ParseData"
                    },
                    "dragging": false,
                    "height": 350,
                    "id": "ParseData-lxEEj",
                    "measured": {
                        "height": 350,
                        "width": 320
                    },
                    "position": {
                        "x": 1606.0595305373527,
                        "y": 751.4473696960695
                    },
                    "positionAbsolute": {
                        "x": 1606.0595305373527,
                        "y": 751.4473696960695
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "description": "Create a prompt template with dynamic variables.",
                        "display_name": "Prompt",
                        "id": "Prompt-1QowJ",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {
                                "template": [
                                    "context",
                                    "question"
                                ]
                            },
                            "description": "Create a prompt template with dynamic variables.",
                            "display_name": "Prompt",
                            "documentation": "",
                            "edited": false,
                            "error": null,
                            "field_order": [
                                "template"
                            ],
                            "frozen": false,
                            "full_path": null,
                            "icon": "prompts",
                            "is_composition": null,
                            "is_input": null,
                            "is_output": null,
                            "legacy": false,
                            "lf_version": "1.1.1",
                            "metadata": {},
                            "name": "",
                            "output_types": [],
                            "outputs": [
                                {
                                    "types": [
                                        "Message"
                                    ],
                                    "selected": "Message",
                                    "name": "prompt",
                                    "display_name": "Prompt Message",
                                    "method": "build_prompt",
                                    "value": "__UNDEFINED__",
                                    "cache": true,
                                    "allows_loop": false
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "code": {
                                    "type": "code",
                                    "required": true,
                                    "placeholder": "",
                                    "list": false,
                                    "show": true,
                                    "multiline": true,
                                    "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import MessageTextInput, Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            tool_mode=True,\n            advanced=True,\n            info=\"A placeholder input for tool mode.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    async def update_frontend_node(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = await super().update_frontend_node(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n",
                                    "fileTypes": [],
                                    "file_path": "",
                                    "password": false,
                                    "name": "code",
                                    "advanced": true,
                                    "dynamic": true,
                                    "info": "",
                                    "load_from_db": false,
                                    "title_case": false
                                },
                                "context": {
                                    "advanced": false,
                                    "display_name": "context",
                                    "dynamic": false,
                                    "field_type": "str",
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "input_types": [
                                        "Message",
                                        "Text"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "context",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": ""
                                },
                                "question": {
                                    "advanced": false,
                                    "display_name": "question",
                                    "dynamic": false,
                                    "field_type": "str",
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "input_types": [
                                        "Message",
                                        "Text"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "question",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": ""
                                },
                                "template": {
                                    "advanced": false,
                                    "display_name": "Template",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "template",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "type": "prompt",
                                    "value": "{context}\n\n---\n\nGiven the context above, answer the question as best as possible.\n\nQuestion: {question}\n\nAnswer: "
                                },
                                "tool_placeholder": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Tool Placeholder",
                                    "dynamic": false,
                                    "info": "A placeholder input for tool mode.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "tool_placeholder",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": true,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "Prompt"
                    },
                    "dragging": false,
                    "height": 433,
                    "id": "Prompt-1QowJ",
                    "measured": {
                        "height": 433,
                        "width": 320
                    },
                    "position": {
                        "x": 1977.9097981422992,
                        "y": 640.5656416923846
                    },
                    "positionAbsolute": {
                        "x": 1977.9097981422992,
                        "y": 640.5656416923846
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "description": "Split text into chunks based on specified criteria.",
                        "display_name": "Split Text",
                        "id": "SplitText-Zppn2",
                        "node": {
                            "base_classes": [
                                "Data"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Split text into chunks based on specified criteria.",
                            "display_name": "Split Text",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "data_inputs",
                                "chunk_overlap",
                                "chunk_size",
                                "separator"
                            ],
                            "frozen": false,
                            "icon": "scissors-line-dashed",
                            "legacy": false,
                            "lf_version": "1.1.1",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "types": [
                                        "Data"
                                    ],
                                    "selected": "Data",
                                    "name": "chunks",
                                    "display_name": "Chunks",
                                    "method": "split_text",
                                    "value": "__UNDEFINED__",
                                    "cache": true,
                                    "allows_loop": false
                                },
                                {
                                    "types": [
                                        "DataFrame"
                                    ],
                                    "selected": "DataFrame",
                                    "name": "dataframe",
                                    "display_name": "DataFrame",
                                    "method": "as_dataframe",
                                    "value": "__UNDEFINED__",
                                    "cache": true,
                                    "allows_loop": false
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "chunk_overlap": {
                                    "advanced": false,
                                    "display_name": "Chunk Overlap",
                                    "dynamic": false,
                                    "info": "Number of characters to overlap between chunks.",
                                    "list": false,
                                    "name": "chunk_overlap",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 200
                                },
                                "chunk_size": {
                                    "advanced": false,
                                    "display_name": "Chunk Size",
                                    "dynamic": false,
                                    "info": "The maximum number of characters in each chunk.",
                                    "list": false,
                                    "name": "chunk_size",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 1000
                                },
                                "code": {
                                    "type": "code",
                                    "required": true,
                                    "placeholder": "",
                                    "list": false,
                                    "show": true,
                                    "multiline": true,
                                    "value": "from langchain_text_splitters import CharacterTextSplitter\n\nfrom langflow.custom import Component\nfrom langflow.io import HandleInput, IntInput, MessageTextInput, Output\nfrom langflow.schema import Data, DataFrame\nfrom langflow.utils.util import unescape_string\n\n\nclass SplitTextComponent(Component):\n    display_name: str = \"Split Text\"\n    description: str = \"Split text into chunks based on specified criteria.\"\n    icon = \"scissors-line-dashed\"\n    name = \"SplitText\"\n\n    inputs = [\n        HandleInput(\n            name=\"data_inputs\",\n            display_name=\"Data Inputs\",\n            info=\"The data to split.\",\n            input_types=[\"Data\"],\n            is_list=True,\n            required=True,\n        ),\n        IntInput(\n            name=\"chunk_overlap\",\n            display_name=\"Chunk Overlap\",\n            info=\"Number of characters to overlap between chunks.\",\n            value=200,\n        ),\n        IntInput(\n            name=\"chunk_size\",\n            display_name=\"Chunk Size\",\n            info=\"The maximum number of characters in each chunk.\",\n            value=1000,\n        ),\n        MessageTextInput(\n            name=\"separator\",\n            display_name=\"Separator\",\n            info=\"The character to split on. Defaults to newline.\",\n            value=\"\\n\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Chunks\", name=\"chunks\", method=\"split_text\"),\n        Output(display_name=\"DataFrame\", name=\"dataframe\", method=\"as_dataframe\"),\n    ]\n\n    def _docs_to_data(self, docs):\n        return [Data(text=doc.page_content, data=doc.metadata) for doc in docs]\n\n    def split_text(self) -> list[Data]:\n        separator = unescape_string(self.separator)\n\n        documents = [_input.to_lc_document() for _input in self.data_inputs if isinstance(_input, Data)]\n\n        splitter = CharacterTextSplitter(\n            chunk_overlap=self.chunk_overlap,\n            chunk_size=self.chunk_size,\n            separator=separator,\n        )\n        docs = splitter.split_documents(documents)\n        data = self._docs_to_data(docs)\n        self.status = data\n        return data\n\n    def as_dataframe(self) -> DataFrame:\n        return DataFrame(self.split_text())\n",
                                    "fileTypes": [],
                                    "file_path": "",
                                    "password": false,
                                    "name": "code",
                                    "advanced": true,
                                    "dynamic": true,
                                    "info": "",
                                    "load_from_db": false,
                                    "title_case": false
                                },
                                "data_inputs": {
                                    "advanced": false,
                                    "display_name": "Data Inputs",
                                    "dynamic": false,
                                    "info": "The data to split.",
                                    "input_types": [
                                        "Data"
                                    ],
                                    "list": true,
                                    "name": "data_inputs",
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "other",
                                    "value": ""
                                },
                                "separator": {
                                    "advanced": false,
                                    "display_name": "Separator",
                                    "dynamic": false,
                                    "info": "The character to split on. Defaults to newline.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "separator",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "\n"
                                }
                            }
                        },
                        "type": "SplitText"
                    },
                    "dragging": false,
                    "height": 475,
                    "id": "SplitText-Zppn2",
                    "measured": {
                        "height": 475,
                        "width": 320
                    },
                    "position": {
                        "x": 1683.4543896546102,
                        "y": 1350.7871623588553
                    },
                    "positionAbsolute": {
                        "x": 1683.4543896546102,
                        "y": 1350.7871623588553
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "id": "note-RYw0J",
                        "node": {
                            "description": "## \ud83d\udc15 2. Retriever Flow\n\nThis flow answers your questions with contextual data retrieved from your vector database.\n\nOpen the **Playground** and ask, \n\n```\nWhat is this document about?\n```\n",
                            "display_name": "",
                            "documentation": "",
                            "template": {
                                "backgroundColor": "neutral"
                            }
                        },
                        "type": "note"
                    },
                    "dragging": false,
                    "height": 324,
                    "id": "note-RYw0J",
                    "measured": {
                        "height": 324,
                        "width": 325
                    },
                    "position": {
                        "x": 374.388314931542,
                        "y": 486.18094072679895
                    },
                    "positionAbsolute": {
                        "x": 374.388314931542,
                        "y": 486.18094072679895
                    },
                    "resizing": false,
                    "selected": false,
                    "style": {
                        "height": 324,
                        "width": 324
                    },
                    "type": "noteNode",
                    "width": 324
                },
                {
                    "data": {
                        "id": "note-JZAZb",
                        "node": {
                            "description": "## \ud83d\udcd6 README\n\nLoad your data into a vector database with the \ud83d\udcda **Load Data** flow, and then use your data as chat context with the \ud83d\udc15 **Retriever** flow.\n\n**\ud83d\udea8 Add your OpenAI API key as a global variable to easily add it to all of the OpenAI components in this flow.** \n\n**Quick start**\n1. Run the \ud83d\udcda **Load Data** flow.\n2. Run the \ud83d\udc15 **Retriever** flow.\n\n**Next steps** \n\n- Experiment by changing the prompt and the loaded data to see how the bot's responses change. \n\nFor more info, see the [Langflow docs](https://docs.langflow.org/starter-projects-vector-store-rag).",
                            "display_name": "Read Me",
                            "documentation": "",
                            "template": {
                                "backgroundColor": "neutral"
                            }
                        },
                        "type": "note"
                    },
                    "dragging": false,
                    "height": 527,
                    "id": "note-JZAZb",
                    "measured": {
                        "height": 527,
                        "width": 325
                    },
                    "position": {
                        "x": 94.28986613312418,
                        "y": 907.6428043837066
                    },
                    "positionAbsolute": {
                        "x": 94.28986613312418,
                        "y": 907.6428043837066
                    },
                    "resizing": false,
                    "selected": false,
                    "style": {
                        "height": 527,
                        "width": 600
                    },
                    "type": "noteNode",
                    "width": 600
                },
                {
                    "data": {
                        "description": "Display a chat message in the Playground.",
                        "display_name": "Chat Output",
                        "id": "ChatOutput-bhnRK",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Display a chat message in the Playground.",
                            "display_name": "Chat Output",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "input_value",
                                "should_store_message",
                                "sender",
                                "sender_name",
                                "session_id",
                                "data_template",
                                "background_color",
                                "chat_icon",
                                "text_color"
                            ],
                            "frozen": false,
                            "icon": "MessagesSquare",
                            "legacy": false,
                            "lf_version": "1.1.1",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "types": [
                                        "Message"
                                    ],
                                    "selected": "Message",
                                    "name": "message",
                                    "display_name": "Message",
                                    "method": "message_response",
                                    "value": "__UNDEFINED__",
                                    "cache": true,
                                    "allows_loop": false
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "background_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Background Color",
                                    "dynamic": false,
                                    "info": "The background color of the icon.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "background_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "chat_icon": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Icon",
                                    "dynamic": false,
                                    "info": "The icon of the message.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "chat_icon",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "code": {
                                    "type": "code",
                                    "required": true,
                                    "placeholder": "",
                                    "list": false,
                                    "show": true,
                                    "multiline": true,
                                    "value": "from langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, MessageInput, MessageTextInput, Output\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        MessageInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            source_dict[\"source\"] = source\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n        background_color = self.background_color\n        text_color = self.text_color\n        if self.chat_icon:\n            icon = self.chat_icon\n        message = self.input_value if isinstance(self.input_value, Message) else Message(text=self.input_value)\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n        message.properties.icon = icon\n        message.properties.background_color = background_color\n        message.properties.text_color = text_color\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n",
                                    "fileTypes": [],
                                    "file_path": "",
                                    "password": false,
                                    "name": "code",
                                    "advanced": true,
                                    "dynamic": true,
                                    "info": "",
                                    "load_from_db": false,
                                    "title_case": false
                                },
                                "data_template": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Data Template",
                                    "dynamic": false,
                                    "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "data_template",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "{text}"
                                },
                                "input_value": {
                                    "_input_type": "MessageInput",
                                    "advanced": false,
                                    "display_name": "Text",
                                    "dynamic": false,
                                    "info": "Message to be passed as output.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "sender": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Sender Type",
                                    "dynamic": false,
                                    "info": "Type of sender.",
                                    "name": "sender",
                                    "options": [
                                        "Machine",
                                        "User"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Machine"
                                },
                                "sender_name": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Sender Name",
                                    "dynamic": false,
                                    "info": "Name of the sender.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "sender_name",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "AI"
                                },
                                "session_id": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Session ID",
                                    "dynamic": false,
                                    "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "session_id",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "should_store_message": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Store Messages",
                                    "dynamic": false,
                                    "info": "Store the message in the history.",
                                    "list": false,
                                    "name": "should_store_message",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "text_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Text Color",
                                    "dynamic": false,
                                    "info": "The text color of the name",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "text_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "ChatOutput"
                    },
                    "dragging": false,
                    "height": 234,
                    "id": "ChatOutput-bhnRK",
                    "measured": {
                        "height": 234,
                        "width": 320
                    },
                    "position": {
                        "x": 2738.611008351098,
                        "y": 829.6219994149209
                    },
                    "positionAbsolute": {
                        "x": 2734.385670401691,
                        "y": 810.6079786425926
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "id": "OpenAIEmbeddings-5Qjc4",
                        "node": {
                            "base_classes": [
                                "Embeddings"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Generate embeddings using OpenAI models.",
                            "display_name": "OpenAI Embeddings",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "default_headers",
                                "default_query",
                                "chunk_size",
                                "client",
                                "deployment",
                                "embedding_ctx_length",
                                "max_retries",
                                "model",
                                "model_kwargs",
                                "openai_api_key",
                                "openai_api_base",
                                "openai_api_type",
                                "openai_api_version",
                                "openai_organization",
                                "openai_proxy",
                                "request_timeout",
                                "show_progress_bar",
                                "skip_empty",
                                "tiktoken_model_name",
                                "tiktoken_enable",
                                "dimensions"
                            ],
                            "frozen": false,
                            "icon": "OpenAI",
                            "legacy": false,
                            "lf_version": "1.1.1",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "types": [
                                        "Embeddings"
                                    ],
                                    "selected": "Embeddings",
                                    "name": "embeddings",
                                    "display_name": "Embeddings",
                                    "method": "build_embeddings",
                                    "value": "__UNDEFINED__",
                                    "cache": true,
                                    "required_inputs": [
                                        "openai_api_key"
                                    ],
                                    "allows_loop": false
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "chunk_size": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Chunk Size",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "name": "chunk_size",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 1000
                                },
                                "client": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Client",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "client",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "code": {
                                    "type": "code",
                                    "required": true,
                                    "placeholder": "",
                                    "list": false,
                                    "show": true,
                                    "multiline": true,
                                    "value": "from langchain_openai import OpenAIEmbeddings\n\nfrom langflow.base.embeddings.model import LCEmbeddingsModel\nfrom langflow.base.models.openai_constants import OPENAI_EMBEDDING_MODEL_NAMES\nfrom langflow.field_typing import Embeddings\nfrom langflow.io import BoolInput, DictInput, DropdownInput, FloatInput, IntInput, MessageTextInput, SecretStrInput\n\n\nclass OpenAIEmbeddingsComponent(LCEmbeddingsModel):\n    display_name = \"OpenAI Embeddings\"\n    description = \"Generate embeddings using OpenAI models.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIEmbeddings\"\n\n    inputs = [\n        DictInput(\n            name=\"default_headers\",\n            display_name=\"Default Headers\",\n            advanced=True,\n            info=\"Default headers to use for the API request.\",\n        ),\n        DictInput(\n            name=\"default_query\",\n            display_name=\"Default Query\",\n            advanced=True,\n            info=\"Default query parameters to use for the API request.\",\n        ),\n        IntInput(name=\"chunk_size\", display_name=\"Chunk Size\", advanced=True, value=1000),\n        MessageTextInput(name=\"client\", display_name=\"Client\", advanced=True),\n        MessageTextInput(name=\"deployment\", display_name=\"Deployment\", advanced=True),\n        IntInput(name=\"embedding_ctx_length\", display_name=\"Embedding Context Length\", advanced=True, value=1536),\n        IntInput(name=\"max_retries\", display_name=\"Max Retries\", value=3, advanced=True),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model\",\n            advanced=False,\n            options=OPENAI_EMBEDDING_MODEL_NAMES,\n            value=\"text-embedding-3-small\",\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        SecretStrInput(name=\"openai_api_key\", display_name=\"OpenAI API Key\", value=\"OPENAI_API_KEY\", required=True),\n        MessageTextInput(name=\"openai_api_base\", display_name=\"OpenAI API Base\", advanced=True),\n        MessageTextInput(name=\"openai_api_type\", display_name=\"OpenAI API Type\", advanced=True),\n        MessageTextInput(name=\"openai_api_version\", display_name=\"OpenAI API Version\", advanced=True),\n        MessageTextInput(\n            name=\"openai_organization\",\n            display_name=\"OpenAI Organization\",\n            advanced=True,\n        ),\n        MessageTextInput(name=\"openai_proxy\", display_name=\"OpenAI Proxy\", advanced=True),\n        FloatInput(name=\"request_timeout\", display_name=\"Request Timeout\", advanced=True),\n        BoolInput(name=\"show_progress_bar\", display_name=\"Show Progress Bar\", advanced=True),\n        BoolInput(name=\"skip_empty\", display_name=\"Skip Empty\", advanced=True),\n        MessageTextInput(\n            name=\"tiktoken_model_name\",\n            display_name=\"TikToken Model Name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"tiktoken_enable\",\n            display_name=\"TikToken Enable\",\n            advanced=True,\n            value=True,\n            info=\"If False, you must have transformers installed.\",\n        ),\n        IntInput(\n            name=\"dimensions\",\n            display_name=\"Dimensions\",\n            info=\"The number of dimensions the resulting output embeddings should have. \"\n            \"Only supported by certain models.\",\n            advanced=True,\n        ),\n    ]\n\n    def build_embeddings(self) -> Embeddings:\n        return OpenAIEmbeddings(\n            client=self.client or None,\n            model=self.model,\n            dimensions=self.dimensions or None,\n            deployment=self.deployment or None,\n            api_version=self.openai_api_version or None,\n            base_url=self.openai_api_base or None,\n            openai_api_type=self.openai_api_type or None,\n            openai_proxy=self.openai_proxy or None,\n            embedding_ctx_length=self.embedding_ctx_length,\n            api_key=self.openai_api_key or None,\n            organization=self.openai_organization or None,\n            allowed_special=\"all\",\n            disallowed_special=\"all\",\n            chunk_size=self.chunk_size,\n            max_retries=self.max_retries,\n            timeout=self.request_timeout or None,\n            tiktoken_enabled=self.tiktoken_enable,\n            tiktoken_model_name=self.tiktoken_model_name or None,\n            show_progress_bar=self.show_progress_bar,\n            model_kwargs=self.model_kwargs,\n            skip_empty=self.skip_empty,\n            default_headers=self.default_headers or None,\n            default_query=self.default_query or None,\n        )\n",
                                    "fileTypes": [],
                                    "file_path": "",
                                    "password": false,
                                    "name": "code",
                                    "advanced": true,
                                    "dynamic": true,
                                    "info": "",
                                    "load_from_db": false,
                                    "title_case": false
                                },
                                "default_headers": {
                                    "_input_type": "DictInput",
                                    "advanced": true,
                                    "display_name": "Default Headers",
                                    "dynamic": false,
                                    "info": "Default headers to use for the API request.",
                                    "list": false,
                                    "name": "default_headers",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "type": "dict",
                                    "value": {}
                                },
                                "default_query": {
                                    "_input_type": "DictInput",
                                    "advanced": true,
                                    "display_name": "Default Query",
                                    "dynamic": false,
                                    "info": "Default query parameters to use for the API request.",
                                    "list": false,
                                    "name": "default_query",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "type": "dict",
                                    "value": {}
                                },
                                "deployment": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Deployment",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "deployment",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "dimensions": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Dimensions",
                                    "dynamic": false,
                                    "info": "The number of dimensions the resulting output embeddings should have. Only supported by certain models.",
                                    "list": false,
                                    "name": "dimensions",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": ""
                                },
                                "embedding_ctx_length": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Embedding Context Length",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "name": "embedding_ctx_length",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 1536
                                },
                                "max_retries": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Max Retries",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "name": "max_retries",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 3
                                },
                                "model": {
                                    "_input_type": "DropdownInput",
                                    "advanced": false,
                                    "combobox": false,
                                    "display_name": "Model",
                                    "dynamic": false,
                                    "info": "",
                                    "name": "model",
                                    "options": [
                                        "text-embedding-3-small",
                                        "text-embedding-3-large",
                                        "text-embedding-ada-002"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "text-embedding-3-small"
                                },
                                "model_kwargs": {
                                    "_input_type": "DictInput",
                                    "advanced": true,
                                    "display_name": "Model Kwargs",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "name": "model_kwargs",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "type": "dict",
                                    "value": {}
                                },
                                "openai_api_base": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "OpenAI API Base",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "openai_api_base",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "openai_api_key": {
                                    "_input_type": "SecretStrInput",
                                    "advanced": false,
                                    "display_name": "OpenAI API Key",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "load_from_db": true,
                                    "name": "openai_api_key",
                                    "password": true,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": "OPENAI_API_KEY"
                                },
                                "openai_api_type": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "OpenAI API Type",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "openai_api_type",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "openai_api_version": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "OpenAI API Version",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "openai_api_version",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "openai_organization": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "OpenAI Organization",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "openai_organization",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "openai_proxy": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "OpenAI Proxy",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "openai_proxy",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "request_timeout": {
                                    "_input_type": "FloatInput",
                                    "advanced": true,
                                    "display_name": "Request Timeout",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "name": "request_timeout",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "float",
                                    "value": ""
                                },
                                "show_progress_bar": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Show Progress Bar",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "name": "show_progress_bar",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "skip_empty": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Skip Empty",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "name": "skip_empty",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "tiktoken_enable": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "TikToken Enable",
                                    "dynamic": false,
                                    "info": "If False, you must have transformers installed.",
                                    "list": false,
                                    "name": "tiktoken_enable",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "tiktoken_model_name": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "TikToken Model Name",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "tiktoken_model_name",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "OpenAIEmbeddings"
                    },
                    "dragging": false,
                    "height": 320,
                    "id": "OpenAIEmbeddings-5Qjc4",
                    "measured": {
                        "height": 320,
                        "width": 320
                    },
                    "position": {
                        "x": 825.435626932521,
                        "y": 739.6327999745448
                    },
                    "positionAbsolute": {
                        "x": 825.435626932521,
                        "y": 739.6327999745448
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "id": "note-asczO",
                        "node": {
                            "description": "## \ud83d\udcda 1. Load Data Flow\n\nRun this first! Load data from a local file and embed it into the vector database.\n\nSelect a Database and a Collection, or create new ones. \n\nClick \u25b6\ufe0f **Run component** on the **Astra DB** component to load your data.\n\n* If you're using OSS Langflow, add your Astra DB Application Token to the Astra DB component.\n\n#### Next steps:\n Experiment by changing the prompt and the contextual data to see how the retrieval flow's responses change.",
                            "display_name": "",
                            "documentation": "",
                            "template": {
                                "backgroundColor": "neutral"
                            }
                        },
                        "type": "note"
                    },
                    "dragging": false,
                    "height": 50,
                    "id": "note-asczO",
                    "measured": {
                        "height": 50,
                        "width": 325
                    },
                    "position": {
                        "x": 955.3277857006676,
                        "y": 1552.171191793604
                    },
                    "positionAbsolute": {
                        "x": 955.3277857006676,
                        "y": 1552.171191793604
                    },
                    "selected": false,
                    "style": {
                        "height": 50,
                        "width": 325
                    },
                    "type": "noteNode",
                    "width": 325
                },
                {
                    "data": {
                        "id": "OpenAIEmbeddings-Indqd",
                        "node": {
                            "base_classes": [
                                "Embeddings"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Generate embeddings using OpenAI models.",
                            "display_name": "OpenAI Embeddings",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "default_headers",
                                "default_query",
                                "chunk_size",
                                "client",
                                "deployment",
                                "embedding_ctx_length",
                                "max_retries",
                                "model",
                                "model_kwargs",
                                "openai_api_key",
                                "openai_api_base",
                                "openai_api_type",
                                "openai_api_version",
                                "openai_organization",
                                "openai_proxy",
                                "request_timeout",
                                "show_progress_bar",
                                "skip_empty",
                                "tiktoken_model_name",
                                "tiktoken_enable",
                                "dimensions"
                            ],
                            "frozen": false,
                            "icon": "OpenAI",
                            "legacy": false,
                            "lf_version": "1.1.1",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "types": [
                                        "Embeddings"
                                    ],
                                    "selected": "Embeddings",
                                    "name": "embeddings",
                                    "display_name": "Embeddings",
                                    "method": "build_embeddings",
                                    "value": "__UNDEFINED__",
                                    "cache": true,
                                    "required_inputs": [
                                        "openai_api_key"
                                    ],
                                    "allows_loop": false
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "chunk_size": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Chunk Size",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "name": "chunk_size",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 1000
                                },
                                "client": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Client",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "client",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "code": {
                                    "type": "code",
                                    "required": true,
                                    "placeholder": "",
                                    "list": false,
                                    "show": true,
                                    "multiline": true,
                                    "value": "from langchain_openai import OpenAIEmbeddings\n\nfrom langflow.base.embeddings.model import LCEmbeddingsModel\nfrom langflow.base.models.openai_constants import OPENAI_EMBEDDING_MODEL_NAMES\nfrom langflow.field_typing import Embeddings\nfrom langflow.io import BoolInput, DictInput, DropdownInput, FloatInput, IntInput, MessageTextInput, SecretStrInput\n\n\nclass OpenAIEmbeddingsComponent(LCEmbeddingsModel):\n    display_name = \"OpenAI Embeddings\"\n    description = \"Generate embeddings using OpenAI models.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIEmbeddings\"\n\n    inputs = [\n        DictInput(\n            name=\"default_headers\",\n            display_name=\"Default Headers\",\n            advanced=True,\n            info=\"Default headers to use for the API request.\",\n        ),\n        DictInput(\n            name=\"default_query\",\n            display_name=\"Default Query\",\n            advanced=True,\n            info=\"Default query parameters to use for the API request.\",\n        ),\n        IntInput(name=\"chunk_size\", display_name=\"Chunk Size\", advanced=True, value=1000),\n        MessageTextInput(name=\"client\", display_name=\"Client\", advanced=True),\n        MessageTextInput(name=\"deployment\", display_name=\"Deployment\", advanced=True),\n        IntInput(name=\"embedding_ctx_length\", display_name=\"Embedding Context Length\", advanced=True, value=1536),\n        IntInput(name=\"max_retries\", display_name=\"Max Retries\", value=3, advanced=True),\n        DropdownInput(\n            name=\"model\",\n            display_name=\"Model\",\n            advanced=False,\n            options=OPENAI_EMBEDDING_MODEL_NAMES,\n            value=\"text-embedding-3-small\",\n        ),\n        DictInput(name=\"model_kwargs\", display_name=\"Model Kwargs\", advanced=True),\n        SecretStrInput(name=\"openai_api_key\", display_name=\"OpenAI API Key\", value=\"OPENAI_API_KEY\", required=True),\n        MessageTextInput(name=\"openai_api_base\", display_name=\"OpenAI API Base\", advanced=True),\n        MessageTextInput(name=\"openai_api_type\", display_name=\"OpenAI API Type\", advanced=True),\n        MessageTextInput(name=\"openai_api_version\", display_name=\"OpenAI API Version\", advanced=True),\n        MessageTextInput(\n            name=\"openai_organization\",\n            display_name=\"OpenAI Organization\",\n            advanced=True,\n        ),\n        MessageTextInput(name=\"openai_proxy\", display_name=\"OpenAI Proxy\", advanced=True),\n        FloatInput(name=\"request_timeout\", display_name=\"Request Timeout\", advanced=True),\n        BoolInput(name=\"show_progress_bar\", display_name=\"Show Progress Bar\", advanced=True),\n        BoolInput(name=\"skip_empty\", display_name=\"Skip Empty\", advanced=True),\n        MessageTextInput(\n            name=\"tiktoken_model_name\",\n            display_name=\"TikToken Model Name\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"tiktoken_enable\",\n            display_name=\"TikToken Enable\",\n            advanced=True,\n            value=True,\n            info=\"If False, you must have transformers installed.\",\n        ),\n        IntInput(\n            name=\"dimensions\",\n            display_name=\"Dimensions\",\n            info=\"The number of dimensions the resulting output embeddings should have. \"\n            \"Only supported by certain models.\",\n            advanced=True,\n        ),\n    ]\n\n    def build_embeddings(self) -> Embeddings:\n        return OpenAIEmbeddings(\n            client=self.client or None,\n            model=self.model,\n            dimensions=self.dimensions or None,\n            deployment=self.deployment or None,\n            api_version=self.openai_api_version or None,\n            base_url=self.openai_api_base or None,\n            openai_api_type=self.openai_api_type or None,\n            openai_proxy=self.openai_proxy or None,\n            embedding_ctx_length=self.embedding_ctx_length,\n            api_key=self.openai_api_key or None,\n            organization=self.openai_organization or None,\n            allowed_special=\"all\",\n            disallowed_special=\"all\",\n            chunk_size=self.chunk_size,\n            max_retries=self.max_retries,\n            timeout=self.request_timeout or None,\n            tiktoken_enabled=self.tiktoken_enable,\n            tiktoken_model_name=self.tiktoken_model_name or None,\n            show_progress_bar=self.show_progress_bar,\n            model_kwargs=self.model_kwargs,\n            skip_empty=self.skip_empty,\n            default_headers=self.default_headers or None,\n            default_query=self.default_query or None,\n        )\n",
                                    "fileTypes": [],
                                    "file_path": "",
                                    "password": false,
                                    "name": "code",
                                    "advanced": true,
                                    "dynamic": true,
                                    "info": "",
                                    "load_from_db": false,
                                    "title_case": false
                                },
                                "default_headers": {
                                    "_input_type": "DictInput",
                                    "advanced": true,
                                    "display_name": "Default Headers",
                                    "dynamic": false,
                                    "info": "Default headers to use for the API request.",
                                    "list": false,
                                    "name": "default_headers",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "type": "dict",
                                    "value": {}
                                },
                                "default_query": {
                                    "_input_type": "DictInput",
                                    "advanced": true,
                                    "display_name": "Default Query",
                                    "dynamic": false,
                                    "info": "Default query parameters to use for the API request.",
                                    "list": false,
                                    "name": "default_query",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "type": "dict",
                                    "value": {}
                                },
                                "deployment": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Deployment",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "deployment",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "dimensions": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Dimensions",
                                    "dynamic": false,
                                    "info": "The number of dimensions the resulting output embeddings should have. Only supported by certain models.",
                                    "list": false,
                                    "name": "dimensions",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": ""
                                },
                                "embedding_ctx_length": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Embedding Context Length",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "name": "embedding_ctx_length",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 1536
                                },
                                "max_retries": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Max Retries",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "name": "max_retries",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 3
                                },
                                "model": {
                                    "_input_type": "DropdownInput",
                                    "advanced": false,
                                    "combobox": false,
                                    "display_name": "Model",
                                    "dynamic": false,
                                    "info": "",
                                    "name": "model",
                                    "options": [
                                        "text-embedding-3-small",
                                        "text-embedding-3-large",
                                        "text-embedding-ada-002"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "text-embedding-3-small"
                                },
                                "model_kwargs": {
                                    "_input_type": "DictInput",
                                    "advanced": true,
                                    "display_name": "Model Kwargs",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "name": "model_kwargs",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "type": "dict",
                                    "value": {}
                                },
                                "openai_api_base": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "OpenAI API Base",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "openai_api_base",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "openai_api_key": {
                                    "_input_type": "SecretStrInput",
                                    "advanced": false,
                                    "display_name": "OpenAI API Key",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "load_from_db": true,
                                    "name": "openai_api_key",
                                    "password": true,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": "OPENAI_API_KEY"
                                },
                                "openai_api_type": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "OpenAI API Type",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "openai_api_type",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "openai_api_version": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "OpenAI API Version",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "openai_api_version",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "openai_organization": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "OpenAI Organization",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "openai_organization",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "openai_proxy": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "OpenAI Proxy",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "openai_proxy",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "request_timeout": {
                                    "_input_type": "FloatInput",
                                    "advanced": true,
                                    "display_name": "Request Timeout",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "name": "request_timeout",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "float",
                                    "value": ""
                                },
                                "show_progress_bar": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Show Progress Bar",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "name": "show_progress_bar",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "skip_empty": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Skip Empty",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "name": "skip_empty",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "tiktoken_enable": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "TikToken Enable",
                                    "dynamic": false,
                                    "info": "If False, you must have transformers installed.",
                                    "list": false,
                                    "name": "tiktoken_enable",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "tiktoken_model_name": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "TikToken Model Name",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "tiktoken_model_name",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "OpenAIEmbeddings"
                    },
                    "dragging": false,
                    "height": 320,
                    "id": "OpenAIEmbeddings-Indqd",
                    "measured": {
                        "height": 320,
                        "width": 320
                    },
                    "position": {
                        "x": 1690.9220896443658,
                        "y": 1866.483269483266
                    },
                    "positionAbsolute": {
                        "x": 1690.9220896443658,
                        "y": 1866.483269483266
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "id": "File-2ugwa",
                        "node": {
                            "base_classes": [
                                "Data"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Load a file to be used in your project.",
                            "display_name": "File",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "path",
                                "silent_errors",
                                "use_multithreading",
                                "concurrency_multithreading"
                            ],
                            "frozen": false,
                            "icon": "file-text",
                            "legacy": false,
                            "lf_version": "1.1.1",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "types": [
                                        "Data"
                                    ],
                                    "selected": "Data",
                                    "name": "data",
                                    "display_name": "Data",
                                    "method": "load_files",
                                    "value": "__UNDEFINED__",
                                    "cache": true,
                                    "required_inputs": [],
                                    "allows_loop": false
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "code": {
                                    "type": "code",
                                    "required": true,
                                    "placeholder": "",
                                    "list": false,
                                    "show": true,
                                    "multiline": true,
                                    "value": "from langflow.base.data import BaseFileComponent\nfrom langflow.base.data.utils import TEXT_FILE_TYPES, parallel_load_data, parse_text_file_to_data\nfrom langflow.io import BoolInput, IntInput\nfrom langflow.schema import Data\n\n\nclass FileComponent(BaseFileComponent):\n    \"\"\"Handles loading and processing of individual or zipped text files.\n\n    This component supports processing multiple valid files within a zip archive,\n    resolving paths, validating file types, and optionally using multithreading for processing.\n    \"\"\"\n\n    display_name = \"File\"\n    description = \"Load a file to be used in your project.\"\n    icon = \"file-text\"\n    name = \"File\"\n\n    VALID_EXTENSIONS = TEXT_FILE_TYPES\n\n    inputs = [\n        *BaseFileComponent._base_inputs,\n        BoolInput(\n            name=\"use_multithreading\",\n            display_name=\"[Deprecated] Use Multithreading\",\n            advanced=True,\n            value=True,\n            info=\"Set 'Processing Concurrency' greater than 1 to enable multithreading.\",\n        ),\n        IntInput(\n            name=\"concurrency_multithreading\",\n            display_name=\"Processing Concurrency\",\n            advanced=True,\n            info=\"When multiple files are being processed, the number of files to process concurrently.\",\n            value=1,\n        ),\n    ]\n\n    outputs = [\n        *BaseFileComponent._base_outputs,\n    ]\n\n    def process_files(self, file_list: list[BaseFileComponent.BaseFile]) -> list[BaseFileComponent.BaseFile]:\n        \"\"\"Processes files either sequentially or in parallel, depending on concurrency settings.\n\n        Args:\n            file_list (list[BaseFileComponent.BaseFile]): List of files to process.\n\n        Returns:\n            list[BaseFileComponent.BaseFile]: Updated list of files with merged data.\n        \"\"\"\n\n        def process_file(file_path: str, *, silent_errors: bool = False) -> Data | None:\n            \"\"\"Processes a single file and returns its Data object.\"\"\"\n            try:\n                return parse_text_file_to_data(file_path, silent_errors=silent_errors)\n            except FileNotFoundError as e:\n                msg = f\"File not found: {file_path}. Error: {e}\"\n                self.log(msg)\n                if not silent_errors:\n                    raise\n                return None\n            except Exception as e:\n                msg = f\"Unexpected error processing {file_path}: {e}\"\n                self.log(msg)\n                if not silent_errors:\n                    raise\n                return None\n\n        if not file_list:\n            msg = \"No files to process.\"\n            raise ValueError(msg)\n\n        concurrency = 1 if not self.use_multithreading else max(1, self.concurrency_multithreading)\n        file_count = len(file_list)\n\n        parallel_processing_threshold = 2\n        if concurrency < parallel_processing_threshold or file_count < parallel_processing_threshold:\n            if file_count > 1:\n                self.log(f\"Processing {file_count} files sequentially.\")\n            processed_data = [process_file(str(file.path), silent_errors=self.silent_errors) for file in file_list]\n        else:\n            self.log(f\"Starting parallel processing of {file_count} files with concurrency: {concurrency}.\")\n            file_paths = [str(file.path) for file in file_list]\n            processed_data = parallel_load_data(\n                file_paths,\n                silent_errors=self.silent_errors,\n                load_function=process_file,\n                max_concurrency=concurrency,\n            )\n\n        # Use rollup_basefile_data to merge processed data with BaseFile objects\n        return self.rollup_data(file_list, processed_data)\n",
                                    "fileTypes": [],
                                    "file_path": "",
                                    "password": false,
                                    "name": "code",
                                    "advanced": true,
                                    "dynamic": true,
                                    "info": "",
                                    "load_from_db": false,
                                    "title_case": false
                                },
                                "concurrency_multithreading": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Processing Concurrency",
                                    "dynamic": false,
                                    "info": "When multiple files are being processed, the number of files to process concurrently.",
                                    "list": false,
                                    "name": "concurrency_multithreading",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 4
                                },
                                "delete_server_file_after_processing": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Delete Server File After Processing",
                                    "dynamic": false,
                                    "info": "If true, the Server File Path will be deleted after processing.",
                                    "list": false,
                                    "name": "delete_server_file_after_processing",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "file_path": {
                                    "_input_type": "HandleInput",
                                    "advanced": true,
                                    "display_name": "Server File Path",
                                    "dynamic": false,
                                    "info": "Data object with a 'file_path' property pointing to server file or a Message object with a path to the file. Supercedes 'Path' but supports same file types.",
                                    "input_types": [
                                        "Data",
                                        "Message"
                                    ],
                                    "list": true,
                                    "name": "file_path",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "other",
                                    "value": ""
                                },
                                "ignore_unspecified_files": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Ignore Unspecified Files",
                                    "dynamic": false,
                                    "info": "If true, Data with no 'file_path' property will be ignored.",
                                    "list": false,
                                    "name": "ignore_unspecified_files",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "ignore_unsupported_extensions": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Ignore Unsupported Extensions",
                                    "dynamic": false,
                                    "info": "If true, files with unsupported extensions will not be processed.",
                                    "list": false,
                                    "name": "ignore_unsupported_extensions",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "path": {
                                    "_input_type": "FileInput",
                                    "advanced": false,
                                    "display_name": "Path",
                                    "dynamic": false,
                                    "fileTypes": [
                                        "txt",
                                        "md",
                                        "mdx",
                                        "csv",
                                        "json",
                                        "yaml",
                                        "yml",
                                        "xml",
                                        "html",
                                        "htm",
                                        "pdf",
                                        "docx",
                                        "py",
                                        "sh",
                                        "sql",
                                        "js",
                                        "ts",
                                        "tsx",
                                        "zip",
                                        "tar",
                                        "tgz",
                                        "bz2",
                                        "gz"
                                    ],
                                    "file_path": "4c491583-732f-4c0a-9fe2-77753034170c/2025-01-07_11-26-26_1706.03762v7.pdf",
                                    "info": "Supported file extensions: txt, md, mdx, csv, json, yaml, yml, xml, html, htm, pdf, docx, py, sh, sql, js, ts, tsx; optionally bundled in file extensions: zip, tar, tgz, bz2, gz",
                                    "list": false,
                                    "name": "path",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "file",
                                    "value": ""
                                },
                                "silent_errors": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Silent Errors",
                                    "dynamic": false,
                                    "info": "If true, errors will not raise an exception.",
                                    "list": false,
                                    "name": "silent_errors",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "use_multithreading": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "[Deprecated] Use Multithreading",
                                    "dynamic": false,
                                    "info": "Set 'Processing Concurrency' greater than 1 to enable multithreading.",
                                    "list": false,
                                    "name": "use_multithreading",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": false
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "File"
                    },
                    "dragging": false,
                    "height": 367,
                    "id": "File-2ugwa",
                    "measured": {
                        "height": 367,
                        "width": 320
                    },
                    "position": {
                        "x": 1318.9043936921921,
                        "y": 1484.0151419511485
                    },
                    "positionAbsolute": {
                        "x": 1318.9043936921921,
                        "y": 1484.0151419511485
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "id": "note-zDeky",
                        "node": {
                            "description": "### \ud83d\udca1 Add your OpenAI API key here \ud83d\udc47",
                            "display_name": "",
                            "documentation": "",
                            "template": {
                                "backgroundColor": "transparent"
                            }
                        },
                        "type": "note"
                    },
                    "dragging": false,
                    "height": 324,
                    "id": "note-zDeky",
                    "measured": {
                        "height": 324,
                        "width": 324
                    },
                    "position": {
                        "x": 1692.2322233423606,
                        "y": 1821.9077961087607
                    },
                    "positionAbsolute": {
                        "x": 1692.2322233423606,
                        "y": 1821.9077961087607
                    },
                    "selected": false,
                    "type": "noteNode",
                    "width": 324
                },
                {
                    "data": {
                        "id": "note-ChlG2",
                        "node": {
                            "description": "### \ud83d\udca1 Add your OpenAI API key here \ud83d\udc47",
                            "display_name": "",
                            "documentation": "",
                            "template": {
                                "backgroundColor": "transparent"
                            }
                        },
                        "type": "note"
                    },
                    "dragging": false,
                    "height": 324,
                    "id": "note-ChlG2",
                    "measured": {
                        "height": 324,
                        "width": 324
                    },
                    "position": {
                        "x": 824.1003268813427,
                        "y": 698.6951695764802
                    },
                    "positionAbsolute": {
                        "x": 824.1003268813427,
                        "y": 698.6951695764802
                    },
                    "selected": false,
                    "type": "noteNode",
                    "width": 324
                },
                {
                    "data": {
                        "id": "note-CwQNd",
                        "node": {
                            "description": "### \ud83d\udca1 Add your OpenAI API key here \ud83d\udc47",
                            "display_name": "",
                            "documentation": "",
                            "template": {
                                "backgroundColor": "transparent"
                            }
                        },
                        "type": "note"
                    },
                    "dragging": false,
                    "height": 324,
                    "id": "note-CwQNd",
                    "measured": {
                        "height": 324,
                        "width": 324
                    },
                    "position": {
                        "x": 2350.297636215281,
                        "y": 525.0687902842766
                    },
                    "positionAbsolute": {
                        "x": 2350.297636215281,
                        "y": 525.0687902842766
                    },
                    "selected": false,
                    "type": "noteNode",
                    "width": 324
                },
                {
                    "data": {
                        "id": "OpenAIModel-qQpEA",
                        "node": {
                            "base_classes": [
                                "LanguageModel",
                                "Message"
                            ],
                            "beta": false,
                            "category": "models",
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Generates text using OpenAI LLMs.",
                            "display_name": "OpenAI",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "input_value",
                                "system_message",
                                "stream",
                                "max_tokens",
                                "model_kwargs",
                                "json_mode",
                                "model_name",
                                "openai_api_base",
                                "api_key",
                                "temperature",
                                "seed"
                            ],
                            "frozen": false,
                            "icon": "OpenAI",
                            "key": "OpenAIModel",
                            "legacy": false,
                            "metadata": {},
                            "minimized": false,
                            "output_types": [],
                            "outputs": [
                                {
                                    "types": [
                                        "Message"
                                    ],
                                    "selected": "Message",
                                    "name": "text_output",
                                    "display_name": "Message",
                                    "method": "text_response",
                                    "value": "__UNDEFINED__",
                                    "cache": true,
                                    "required_inputs": [],
                                    "allows_loop": false
                                },
                                {
                                    "types": [
                                        "LanguageModel"
                                    ],
                                    "selected": "LanguageModel",
                                    "name": "model_output",
                                    "display_name": "Language Model",
                                    "method": "build_model",
                                    "value": "__UNDEFINED__",
                                    "cache": true,
                                    "required_inputs": [
                                        "api_key"
                                    ],
                                    "allows_loop": false
                                }
                            ],
                            "pinned": false,
                            "score": 0.14285714285714285,
                            "template": {
                                "_type": "Component",
                                "api_key": {
                                    "_input_type": "SecretStrInput",
                                    "advanced": false,
                                    "display_name": "OpenAI API Key",
                                    "dynamic": false,
                                    "info": "The OpenAI API Key to use for the OpenAI model.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "load_from_db": true,
                                    "name": "api_key",
                                    "password": true,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": "OPENAI_API_KEY"
                                },
                                "code": {
                                    "type": "code",
                                    "required": true,
                                    "placeholder": "",
                                    "list": false,
                                    "show": true,
                                    "multiline": true,
                                    "value": "from langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.openai_constants import OPENAI_MODEL_NAMES\nfrom langflow.field_typing import LanguageModel\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.inputs import BoolInput, DictInput, DropdownInput, IntInput, SecretStrInput, SliderInput, StrInput\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIModel\"\n\n    inputs = [\n        *LCModelComponent._base_inputs,\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            range_spec=RangeSpec(min=0, max=128000),\n        ),\n        DictInput(\n            name=\"model_kwargs\",\n            display_name=\"Model Kwargs\",\n            advanced=True,\n            info=\"Additional keyword arguments to pass to the model.\",\n        ),\n        BoolInput(\n            name=\"json_mode\",\n            display_name=\"JSON Mode\",\n            advanced=True,\n            info=\"If True, it will output JSON regardless of passing a schema.\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            advanced=False,\n            options=OPENAI_MODEL_NAMES,\n            value=OPENAI_MODEL_NAMES[0],\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. \"\n            \"Defaults to https://api.openai.com/v1. \"\n            \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n            required=True,\n        ),\n        SliderInput(\n            name=\"temperature\", display_name=\"Temperature\", value=0.1, range_spec=RangeSpec(min=0, max=2, step=0.01)\n        ),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        openai_api_key = self.api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\n        json_mode = self.json_mode\n        seed = self.seed\n\n        api_key = SecretStr(openai_api_key).get_secret_value() if openai_api_key else None\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature if temperature is not None else 0.1,\n            seed=seed,\n        )\n        if json_mode:\n            output = output.bind(response_format={\"type\": \"json_object\"})\n\n        return output\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"Get a message from an OpenAI exception.\n\n        Args:\n            e (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return None\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")\n            if message:\n                return message\n        return None\n",
                                    "fileTypes": [],
                                    "file_path": "",
                                    "password": false,
                                    "name": "code",
                                    "advanced": true,
                                    "dynamic": true,
                                    "info": "",
                                    "load_from_db": false,
                                    "title_case": false
                                },
                                "input_value": {
                                    "_input_type": "MessageInput",
                                    "advanced": false,
                                    "display_name": "Input",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "json_mode": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "JSON Mode",
                                    "dynamic": false,
                                    "info": "If True, it will output JSON regardless of passing a schema.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "json_mode",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "max_tokens": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Max Tokens",
                                    "dynamic": false,
                                    "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "max_tokens",
                                    "placeholder": "",
                                    "range_spec": {
                                        "max": 128000,
                                        "min": 0,
                                        "step": 0.1,
                                        "step_type": "float"
                                    },
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": ""
                                },
                                "model_kwargs": {
                                    "_input_type": "DictInput",
                                    "advanced": true,
                                    "display_name": "Model Kwargs",
                                    "dynamic": false,
                                    "info": "Additional keyword arguments to pass to the model.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "model_kwargs",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "type": "dict",
                                    "value": {}
                                },
                                "model_name": {
                                    "_input_type": "DropdownInput",
                                    "advanced": false,
                                    "combobox": false,
                                    "dialog_inputs": {},
                                    "display_name": "Model Name",
                                    "dynamic": false,
                                    "info": "",
                                    "name": "model_name",
                                    "options": [
                                        "gpt-4o-mini",
                                        "gpt-4o",
                                        "gpt-4-turbo",
                                        "gpt-4-turbo-preview",
                                        "gpt-4",
                                        "gpt-3.5-turbo",
                                        "gpt-3.5-turbo-0125"
                                    ],
                                    "options_metadata": [],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "gpt-4o-mini"
                                },
                                "openai_api_base": {
                                    "_input_type": "StrInput",
                                    "advanced": true,
                                    "display_name": "OpenAI API Base",
                                    "dynamic": false,
                                    "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "name": "openai_api_base",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "seed": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Seed",
                                    "dynamic": false,
                                    "info": "The seed controls the reproducibility of the job.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "seed",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 1
                                },
                                "stream": {
                                    "_input_type": "BoolInput",
                                    "advanced": false,
                                    "display_name": "Stream",
                                    "dynamic": false,
                                    "info": "Stream the response from the model. Streaming works only in Chat.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "stream",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "system_message": {
                                    "_input_type": "MultilineInput",
                                    "advanced": false,
                                    "display_name": "System Message",
                                    "dynamic": false,
                                    "info": "System message to pass to the model.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "system_message",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "temperature": {
                                    "_input_type": "SliderInput",
                                    "advanced": false,
                                    "display_name": "Temperature",
                                    "dynamic": false,
                                    "info": "",
                                    "max_label": "",
                                    "max_label_icon": "",
                                    "min_label": "",
                                    "min_label_icon": "",
                                    "name": "temperature",
                                    "placeholder": "",
                                    "range_spec": {
                                        "max": 2,
                                        "min": 0,
                                        "step": 0.01,
                                        "step_type": "float"
                                    },
                                    "required": false,
                                    "show": true,
                                    "slider_buttons": false,
                                    "slider_buttons_options": [],
                                    "slider_input": false,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "type": "slider",
                                    "value": 0.1
                                }
                            },
                            "tool_mode": false
                        },
                        "showNode": true,
                        "type": "OpenAIModel"
                    },
                    "dragging": false,
                    "id": "OpenAIModel-qQpEA",
                    "measured": {
                        "height": 656,
                        "width": 320
                    },
                    "position": {
                        "x": 2365.714820732046,
                        "y": 600.6979286268308
                    },
                    "selected": false,
                    "type": "genericNode"
                },
                {
                    "data": {
                        "id": "AstraDB-buLOo",
                        "node": {
                            "base_classes": [
                                "Data",
                                "DataFrame"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Ingest and search documents in Astra DB",
                            "display_name": "Astra DB",
                            "documentation": "https://docs.datastax.com/en/langflow/astra-components.html",
                            "edited": false,
                            "field_order": [
                                "token",
                                "environment",
                                "api_endpoint",
                                "database_name",
                                "collection_name",
                                "embedding_choice",
                                "keyspace",
                                "embedding_model",
                                "ingest_data",
                                "search_query",
                                "number_of_results",
                                "search_type",
                                "search_score_threshold",
                                "advanced_search_filter",
                                "content_field",
                                "deletion_field",
                                "ignore_invalid_documents",
                                "astradb_vectorstore_kwargs"
                            ],
                            "frozen": false,
                            "icon": "AstraDB",
                            "legacy": false,
                            "metadata": {},
                            "minimized": false,
                            "output_types": [],
                            "outputs": [
                                {
                                    "types": [
                                        "Data"
                                    ],
                                    "selected": "Data",
                                    "name": "search_results",
                                    "display_name": "Search Results",
                                    "method": "search_documents",
                                    "value": "__UNDEFINED__",
                                    "cache": true,
                                    "required_inputs": [
                                        "collection_name",
                                        "database_name",
                                        "embedding_model",
                                        "token"
                                    ],
                                    "allows_loop": false
                                },
                                {
                                    "types": [
                                        "DataFrame"
                                    ],
                                    "selected": "DataFrame",
                                    "name": "dataframe",
                                    "display_name": "DataFrame",
                                    "method": "as_dataframe",
                                    "value": "__UNDEFINED__",
                                    "cache": true,
                                    "required_inputs": [],
                                    "allows_loop": false
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "advanced_search_filter": {
                                    "_input_type": "NestedDictInput",
                                    "advanced": true,
                                    "display_name": "Search Metadata Filter",
                                    "dynamic": false,
                                    "info": "Optional dictionary of filters to apply to the search query.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "advanced_search_filter",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "NestedDict",
                                    "value": {}
                                },
                                "api_endpoint": {
                                    "_input_type": "StrInput",
                                    "advanced": false,
                                    "display_name": "Database",
                                    "dynamic": false,
                                    "info": "The API endpoint for the Astra DB instance.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "name": "api_endpoint",
                                    "placeholder": "",
                                    "real_time_refresh": true,
                                    "refresh_button": true,
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "astradb_vectorstore_kwargs": {
                                    "_input_type": "NestedDictInput",
                                    "advanced": true,
                                    "display_name": "AstraDBVectorStore Parameters",
                                    "dynamic": false,
                                    "info": "Optional dictionary of additional parameters for the AstraDBVectorStore.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "astradb_vectorstore_kwargs",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "NestedDict",
                                    "value": {}
                                },
                                "code": {
                                    "type": "code",
                                    "required": true,
                                    "placeholder": "",
                                    "list": false,
                                    "show": true,
                                    "multiline": true,
                                    "value": "import os\nfrom collections import defaultdict\nfrom dataclasses import dataclass, field\n\nfrom astrapy import AstraDBAdmin, DataAPIClient, Database\nfrom langchain_astradb import AstraDBVectorStore, CollectionVectorServiceOptions\n\nfrom langflow.base.vectorstores.model import LCVectorStoreComponent, check_cached_vector_store\nfrom langflow.helpers import docs_to_data\nfrom langflow.inputs import FloatInput, NestedDictInput\nfrom langflow.io import (\n    BoolInput,\n    DropdownInput,\n    HandleInput,\n    IntInput,\n    SecretStrInput,\n    StrInput,\n)\nfrom langflow.schema import Data\nfrom langflow.utils.version import get_version_info\n\n\nclass AstraDBVectorStoreComponent(LCVectorStoreComponent):\n    display_name: str = \"Astra DB\"\n    description: str = \"Ingest and search documents in Astra DB\"\n    documentation: str = \"https://docs.datastax.com/en/langflow/astra-components.html\"\n    name = \"AstraDB\"\n    icon: str = \"AstraDB\"\n\n    _cached_vector_store: AstraDBVectorStore | None = None\n\n    @dataclass\n    class NewDatabaseInput:\n        functionality: str = \"create\"\n        fields: dict[str, dict] = field(\n            default_factory=lambda: {\n                \"data\": {\n                    \"node\": {\n                        \"description\": \"Create a new database in Astra DB.\",\n                        \"display_name\": \"Create New Database\",\n                        \"field_order\": [\"new_database_name\", \"cloud_provider\", \"region\"],\n                        \"template\": {\n                            \"new_database_name\": StrInput(\n                                name=\"new_database_name\",\n                                display_name=\"New Database Name\",\n                                info=\"Name of the new database to create in Astra DB.\",\n                                required=True,\n                            ),\n                            \"cloud_provider\": DropdownInput(\n                                name=\"cloud_provider\",\n                                display_name=\"Cloud Provider\",\n                                info=\"Cloud provider for the new database.\",\n                                options=[\"Amazon Web Services\", \"Google Cloud Platform\", \"Microsoft Azure\"],\n                                required=True,\n                            ),\n                            \"region\": DropdownInput(\n                                name=\"region\",\n                                display_name=\"Region\",\n                                info=\"Region for the new database.\",\n                                options=[],\n                                required=True,\n                            ),\n                        },\n                    },\n                }\n            }\n        )\n\n    @dataclass\n    class NewCollectionInput:\n        functionality: str = \"create\"\n        fields: dict[str, dict] = field(\n            default_factory=lambda: {\n                \"data\": {\n                    \"node\": {\n                        \"description\": \"Create a new collection in Astra DB.\",\n                        \"display_name\": \"Create New Collection\",\n                        \"field_order\": [\n                            \"new_collection_name\",\n                            \"embedding_generation_provider\",\n                            \"embedding_generation_model\",\n                        ],\n                        \"template\": {\n                            \"new_collection_name\": StrInput(\n                                name=\"new_collection_name\",\n                                display_name=\"New Collection Name\",\n                                info=\"Name of the new collection to create in Astra DB.\",\n                                required=True,\n                            ),\n                            \"embedding_generation_provider\": DropdownInput(\n                                name=\"embedding_generation_provider\",\n                                display_name=\"Embedding Generation Provider\",\n                                info=\"Provider to use for generating embeddings.\",\n                                options=[],\n                                required=True,\n                            ),\n                            \"embedding_generation_model\": DropdownInput(\n                                name=\"embedding_generation_model\",\n                                display_name=\"Embedding Generation Model\",\n                                info=\"Model to use for generating embeddings.\",\n                                options=[],\n                                required=True,\n                            ),\n                        },\n                    },\n                }\n            }\n        )\n\n    inputs = [\n        SecretStrInput(\n            name=\"token\",\n            display_name=\"Astra DB Application Token\",\n            info=\"Authentication token for accessing Astra DB.\",\n            value=\"ASTRA_DB_APPLICATION_TOKEN\",\n            required=True,\n            real_time_refresh=True,\n            input_types=[],\n        ),\n        StrInput(\n            name=\"environment\",\n            display_name=\"Environment\",\n            info=\"The environment for the Astra DB API Endpoint.\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"api_endpoint\",\n            display_name=\"Astra DB API Endpoint\" if os.getenv(\"LANGFLOW_HOST\") is None else \"Database\",\n            info=\"The API endpoint for the Astra DB instance.\",\n            advanced=os.getenv(\"LANGFLOW_HOST\") is None,  # TODO: Clean up all examples of these\n            refresh_button=True,\n            real_time_refresh=True,\n        ),\n        DropdownInput(\n            name=\"database_name\",\n            display_name=\"Database\",\n            info=\"Select a database in Astra DB.\",\n            required=True,\n            refresh_button=True,\n            real_time_refresh=True,\n            # dialog_inputs=asdict(NewDatabaseInput()),\n            options=[],\n            options_metadata=[\n                {\n                    \"collections\": 0,\n                }\n            ],\n            value=\"\",\n            combobox=True,\n            show=os.getenv(\"LANGFLOW_HOST\") is None,\n        ),\n        DropdownInput(\n            name=\"collection_name\",\n            display_name=\"Collection\",\n            info=\"The name of the collection within Astra DB where the vectors will be stored.\",\n            required=True,\n            refresh_button=True,\n            real_time_refresh=True,\n            # dialog_inputs=asdict(NewCollectionInput()),\n            options=[],\n            options_metadata=[\n                {\n                    \"provider\": None,\n                    \"model\": None,\n                    \"records\": 0,\n                    \"icon\": \"\",\n                }\n            ],\n            value=\"\",\n        ),\n        DropdownInput(\n            name=\"embedding_choice\",\n            display_name=\"Embedding Model or Astra Vectorize\",\n            info=\"Choose an embedding model or use Astra Vectorize.\",\n            options=[\"Embedding Model\", \"Astra Vectorize\"],\n            value=\"Embedding Model\",\n            advanced=os.getenv(\"LANGFLOW_HOST\") is None,\n            real_time_refresh=True,\n        ),\n        StrInput(\n            name=\"keyspace\",\n            display_name=\"Keyspace\",\n            info=\"Optional keyspace within Astra DB to use for the collection.\",\n            advanced=True,\n        ),\n        HandleInput(\n            name=\"embedding_model\",\n            display_name=\"Embedding Model\",\n            input_types=[\"Embeddings\"],\n            info=\"Allows an embedding model configuration.\",\n            required=True,\n        ),\n        *LCVectorStoreComponent.inputs,\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Search Results\",\n            info=\"Number of search results to return.\",\n            advanced=True,\n            value=4,\n        ),\n        DropdownInput(\n            name=\"search_type\",\n            display_name=\"Search Type\",\n            info=\"Search type to use\",\n            options=[\"Similarity\", \"Similarity with score threshold\", \"MMR (Max Marginal Relevance)\"],\n            value=\"Similarity\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"search_score_threshold\",\n            display_name=\"Search Score Threshold\",\n            info=\"Minimum similarity score threshold for search results. \"\n            \"(when using 'Similarity with score threshold')\",\n            value=0,\n            advanced=True,\n        ),\n        NestedDictInput(\n            name=\"advanced_search_filter\",\n            display_name=\"Search Metadata Filter\",\n            info=\"Optional dictionary of filters to apply to the search query.\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"content_field\",\n            display_name=\"Content Field\",\n            info=\"Field to use as the text content field for the vector store.\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"deletion_field\",\n            display_name=\"Deletion Based On Field\",\n            info=\"When this parameter is provided, documents in the target collection with \"\n            \"metadata field values matching the input metadata field value will be deleted \"\n            \"before new data is loaded.\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"ignore_invalid_documents\",\n            display_name=\"Ignore Invalid Documents\",\n            info=\"Boolean flag to determine whether to ignore invalid documents at runtime.\",\n            advanced=True,\n        ),\n        NestedDictInput(\n            name=\"astradb_vectorstore_kwargs\",\n            display_name=\"AstraDBVectorStore Parameters\",\n            info=\"Optional dictionary of additional parameters for the AstraDBVectorStore.\",\n            advanced=True,\n        ),\n    ]\n\n    @classmethod\n    def map_cloud_providers(cls):\n        return {\n            \"Amazon Web Services\": {\n                \"id\": \"aws\",\n                \"regions\": [\"us-east-2\", \"ap-south-1\", \"eu-west-1\"],\n            },\n            \"Google Cloud Platform\": {\n                \"id\": \"gcp\",\n                \"regions\": [\"us-east1\"],\n            },\n            \"Microsoft Azure\": {\n                \"id\": \"azure\",\n                \"regions\": [\"westus3\"],\n            },\n        }\n\n    @classmethod\n    def create_database_api(\n        cls,\n        token: str,\n        new_database_name: str,\n        cloud_provider: str,\n        region: str,\n    ):\n        client = DataAPIClient(token=token)\n\n        # Get the admin object\n        admin_client = client.get_admin(token=token)\n\n        # Call the create database function\n        return admin_client.create_database(\n            name=new_database_name,\n            cloud_provider=cloud_provider,\n            region=region,\n        )\n\n    @classmethod\n    def create_collection_api(\n        cls,\n        token: str,\n        database_name: str,\n        new_collection_name: str,\n        dimension: int | None = None,\n        embedding_generation_provider: str | None = None,\n        embedding_generation_model: str | None = None,\n    ):\n        client = DataAPIClient(token=token)\n        api_endpoint = cls.get_api_endpoint_static(token=token, database_name=database_name)\n\n        # Get the database object\n        database = client.get_database(api_endpoint=api_endpoint, token=token)\n\n        # Build vectorize options, if needed\n        vectorize_options = None\n        if not dimension:\n            vectorize_options = CollectionVectorServiceOptions(\n                provider=embedding_generation_provider,\n                model_name=embedding_generation_model,\n                authentication=None,\n                parameters=None,\n            )\n\n        # Create the collection\n        return database.create_collection(\n            name=new_collection_name,\n            dimension=dimension,\n            service=vectorize_options,\n        )\n\n    @classmethod\n    def get_database_list_static(cls, token: str, environment: str | None = None):\n        client = DataAPIClient(token=token, environment=environment)\n\n        # Get the admin object\n        admin_client = client.get_admin(token=token)\n\n        # Get the list of databases\n        db_list = list(admin_client.list_databases())\n\n        # Generate the api endpoint for each database\n        return {\n            db.info.name: {\n                \"api_endpoint\": (api_endpoint := f\"https://{db.info.id}-{db.info.region}.apps.astra.datastax.com\"),\n                \"collections\": len(\n                    list(\n                        client.get_database(\n                            api_endpoint=api_endpoint, token=token, keyspace=db.info.keyspace\n                        ).list_collection_names(keyspace=db.info.keyspace)\n                    )\n                ),\n            }\n            for db in db_list\n        }\n\n    def get_database_list(self):\n        return self.get_database_list_static(token=self.token, environment=self.environment)\n\n    @classmethod\n    def get_api_endpoint_static(\n        cls,\n        token: str,\n        environment: str | None = None,\n        api_endpoint: str | None = None,\n        database_name: str | None = None,\n    ):\n        # Check if an api endpoint is provided\n        if api_endpoint:\n            return api_endpoint\n\n        # Check if the database_name is like a url\n        if database_name and database_name.startswith(\"https://\"):\n            return database_name\n\n        # If the database is not set, nothing we can do.\n        if not database_name:\n            return None\n\n        # Otherwise, get the URL from the database list\n        return cls.get_database_list_static(token=token, environment=environment).get(database_name).get(\"api_endpoint\")\n\n    def get_api_endpoint(self):\n        return self.get_api_endpoint_static(\n            token=self.token,\n            environment=self.environment,\n            api_endpoint=self.api_endpoint,\n            database_name=self.database_name,\n        )\n\n    def get_keyspace(self):\n        keyspace = self.keyspace\n\n        if keyspace:\n            return keyspace.strip()\n\n        return None\n\n    def get_database_object(self):\n        try:\n            client = DataAPIClient(token=self.token, environment=self.environment)\n\n            return client.get_database(\n                api_endpoint=self.get_api_endpoint(),\n                token=self.token,\n                keyspace=self.get_keyspace(),\n            )\n        except Exception as e:  # noqa: BLE001\n            self.log(f\"Error getting database: {e}\")\n\n            return None\n\n    def collection_exists(self):\n        try:\n            client = DataAPIClient(token=self.token, environment=self.environment)\n            database = client.get_database(\n                api_endpoint=self.get_api_endpoint(),\n                token=self.token,\n                keyspace=self.get_keyspace(),\n            )\n\n            return self.collection_name in list(database.list_collection_names(keyspace=self.get_keyspace()))\n        except Exception as e:  # noqa: BLE001\n            self.log(f\"Error getting collection status: {e}\")\n\n            return False\n\n    def collection_data(self, collection_name: str, database: Database | None = None):\n        try:\n            if not database:\n                client = DataAPIClient(token=self.token, environment=self.environment)\n\n                database = client.get_database(\n                    api_endpoint=self.get_api_endpoint(),\n                    token=self.token,\n                    keyspace=self.get_keyspace(),\n                )\n\n            collection = database.get_collection(collection_name, keyspace=self.get_keyspace())\n\n            return collection.estimated_document_count()\n        except Exception as e:  # noqa: BLE001\n            self.log(f\"Error checking collection data: {e}\")\n\n            return None\n\n    def get_vectorize_providers(self):\n        try:\n            self.log(\"Dynamically updating list of Vectorize providers.\")\n\n            # Get the admin object\n            admin = AstraDBAdmin(token=self.token)\n            db_admin = admin.get_database_admin(api_endpoint=self.get_api_endpoint())\n\n            # Get the list of embedding providers\n            embedding_providers = db_admin.find_embedding_providers().as_dict()\n\n            vectorize_providers_mapping = {}\n            # Map the provider display name to the provider key and models\n            for provider_key, provider_data in embedding_providers[\"embeddingProviders\"].items():\n                display_name = provider_data[\"displayName\"]\n                models = [model[\"name\"] for model in provider_data[\"models\"]]\n\n                # TODO: https://astra.datastax.com/api/v2/graphql\n                vectorize_providers_mapping[display_name] = [provider_key, models]\n\n            # Sort the resulting dictionary\n            return defaultdict(list, dict(sorted(vectorize_providers_mapping.items())))\n        except Exception as e:  # noqa: BLE001\n            self.log(f\"Error fetching Vectorize providers: {e}\")\n\n            return {}\n\n    def _initialize_database_options(self):\n        try:\n            return [\n                {\"name\": name, \"collections\": info[\"collections\"]} for name, info in self.get_database_list().items()\n            ]\n        except Exception as e:  # noqa: BLE001\n            self.log(f\"Error fetching databases: {e}\")\n\n            return []\n\n    def _initialize_collection_options(self):\n        database = self.get_database_object()\n        if database is None:\n            return []\n\n        try:\n            collection_list = list(database.list_collections(keyspace=self.get_keyspace()))\n\n            return [\n                {\n                    \"name\": col.name,\n                    \"records\": self.collection_data(collection_name=col.name, database=database),\n                    \"provider\": (\n                        col.options.vector.service.provider\n                        if col.options.vector and col.options.vector.service\n                        else None\n                    ),\n                    \"icon\": \"\",\n                    \"model\": (\n                        col.options.vector.service.model_name\n                        if col.options.vector and col.options.vector.service\n                        else None\n                    ),\n                }\n                for col in collection_list\n            ]\n        except Exception as e:  # noqa: BLE001\n            self.log(f\"Error fetching collections: {e}\")\n\n            return []\n\n    def update_build_config(self, build_config: dict, field_value: str, field_name: str | None = None):\n        if field_name == \"embedding_choice\":\n            if field_value == \"Astra Vectorize\":\n                build_config[\"embedding_model\"][\"show\"] = False\n                build_config[\"embedding_model\"][\"required\"] = False\n            else:\n                build_config[\"embedding_model\"][\"show\"] = True\n                build_config[\"embedding_model\"][\"required\"] = True\n\n            return build_config\n\n        if not self.token or not self.token.startswith(\"AstraCS:\"):\n            build_config[\"database_name\"][\"info\"] = \"Add a Valid Token to Select a Database\"\n        else:\n            build_config[\"database_name\"][\"info\"] = \"Select a Database from Astra DB\"\n\n        # Refresh the database name options\n        if field_name in [\"token\", \"environment\"] or not build_config[\"database_name\"][\"options\"]:\n            # Reset the list of collections\n            build_config[\"collection_name\"][\"options\"] = []\n            build_config[\"collection_name\"][\"options_metadata\"] = []\n\n            # Get the list of databases\n            database_options = self._initialize_database_options()\n\n            if database_options and not os.getenv(\"LANGFLOW_HOST\"):\n                build_config[\"database_name\"][\"show\"] = True\n                build_config[\"api_endpoint\"][\"advanced\"] = True\n                build_config[\"api_endpoint\"][\"value\"] = \"\"\n                build_config[\"database_name\"][\"options\"] = [db[\"name\"] for db in database_options]\n                build_config[\"database_name\"][\"options_metadata\"] = [\n                    {k: v for k, v in db.items() if k not in [\"name\"]} for db in database_options\n                ]\n            else:\n                build_config[\"database_name\"][\"show\"] = False\n                build_config[\"api_endpoint\"][\"advanced\"] = False\n\n            # Get list of regions for a given cloud provider\n            \"\"\"\n            cloud_provider = (\n                build_config[\"database_name\"][\"dialog_inputs\"][\"fields\"][\"data\"][\"node\"][\"template\"][\"cloud_provider\"][\n                    \"value\"\n                ]\n                or \"Amazon Web Services\"\n            )\n            build_config[\"database_name\"][\"dialog_inputs\"][\"fields\"][\"data\"][\"node\"][\"template\"][\"region\"][\n                \"options\"\n            ] = self.map_cloud_providers()[cloud_provider][\"regions\"]\n            \"\"\"\n\n        # Refresh the collection name options\n        if field_name in [\"database_name\", \"api_endpoint\"] or not build_config[\"collection_name\"][\"options\"]:\n            # Reset the list of collections\n            collection_options = self._initialize_collection_options()\n            build_config[\"collection_name\"][\"options\"] = [col[\"name\"] for col in collection_options]\n            build_config[\"collection_name\"][\"options_metadata\"] = [\n                {k: v for k, v in col.items() if k not in [\"name\"]} for col in collection_options\n            ]\n\n            return build_config\n\n        # Hide embedding model option if opriona_metadata provider is not null\n        if field_name == \"collection_name\":\n            # Find location of the name in the options list\n            index_of_name = build_config[\"collection_name\"][\"options\"].index(field_value)\n            value_of_provider = build_config[\"collection_name\"][\"options_metadata\"][index_of_name][\"provider\"]\n\n            if value_of_provider:\n                build_config[\"embedding_model\"][\"advanced\"] = True\n                build_config[\"embedding_model\"][\"required\"] = False\n                build_config[\"embedding_choice\"][\"value\"] = \"Astra Vectorize\"\n            else:\n                build_config[\"embedding_model\"][\"advanced\"] = False\n                build_config[\"embedding_model\"][\"required\"] = True\n                build_config[\"embedding_choice\"][\"value\"] = \"Embedding Model\"\n\n        # For the final step, get the list of vectorize providers\n        \"\"\"\n        vectorize_providers = self.get_vectorize_providers()\n        if not vectorize_providers:\n            return build_config\n\n        # Allow the user to see the embedding provider options\n        provider_options = build_config[\"collection_name\"][\"dialog_inputs\"][\"fields\"][\"data\"][\"node\"][\"template\"][\n            \"embedding_generation_provider\"\n        ][\"options\"]\n        if not provider_options:\n            # If the collection is set, allow user to see embedding options\n            build_config[\"collection_name\"][\"dialog_inputs\"][\"fields\"][\"data\"][\"node\"][\"template\"][\n                \"embedding_generation_provider\"\n            ][\"options\"] = [\"Bring your own\", \"Nvidia\", *[key for key in vectorize_providers if key != \"Nvidia\"]]\n\n        # And allow the user to see the models based on a selected provider\n        model_options = build_config[\"collection_name\"][\"dialog_inputs\"][\"fields\"][\"data\"][\"node\"][\"template\"][\n            \"embedding_generation_model\"\n        ][\"options\"]\n        if not model_options:\n            embedding_provider = build_config[\"collection_name\"][\"dialog_inputs\"][\"fields\"][\"data\"][\"node\"][\"template\"][\n                \"embedding_generation_provider\"\n            ][\"value\"]\n\n            build_config[\"collection_name\"][\"dialog_inputs\"][\"fields\"][\"data\"][\"node\"][\"template\"][\n                \"embedding_generation_model\"\n            ][\"options\"] = vectorize_providers.get(embedding_provider, [[], []])[1]\n        \"\"\"\n\n        return build_config\n\n    @check_cached_vector_store\n    def build_vector_store(self):\n        try:\n            from langchain_astradb import AstraDBVectorStore\n        except ImportError as e:\n            msg = (\n                \"Could not import langchain Astra DB integration package. \"\n                \"Please install it with `pip install langchain-astradb`.\"\n            )\n            raise ImportError(msg) from e\n\n        # Get the embedding model and additional params\n        embedding_params = (\n            {\"embedding\": self.embedding_model}\n            if self.embedding_model and self.embedding_choice == \"Embedding Model\"\n            else {}\n        )\n\n        additional_params = self.astradb_vectorstore_kwargs or {}\n\n        # Get Langflow version and platform information\n        __version__ = get_version_info()[\"version\"]\n        langflow_prefix = \"\"\n        if os.getenv(\"LANGFLOW_HOST\") is not None:\n            langflow_prefix = \"ds-\"\n\n        # Bundle up the auto-detect parameters\n        autodetect_params = {\n            \"autodetect_collection\": self.collection_exists(),  # TODO: May want to expose this option\n            \"content_field\": (\n                self.content_field\n                if self.content_field and embedding_params\n                else (\n                    \"page_content\"\n                    if embedding_params and self.collection_data(collection_name=self.collection_name) == 0\n                    else None\n                )\n            ),\n            \"ignore_invalid_documents\": self.ignore_invalid_documents,\n        }\n\n        # Attempt to build the Vector Store object\n        try:\n            vector_store = AstraDBVectorStore(\n                # Astra DB Authentication Parameters\n                token=self.token,\n                api_endpoint=self.get_api_endpoint(),\n                namespace=self.get_keyspace(),\n                collection_name=self.collection_name,\n                environment=self.environment,\n                # Astra DB Usage Tracking Parameters\n                ext_callers=[(f\"{langflow_prefix}langflow\", __version__)],\n                # Astra DB Vector Store Parameters\n                **autodetect_params,\n                **embedding_params,\n                **additional_params,\n            )\n        except Exception as e:\n            msg = f\"Error initializing AstraDBVectorStore: {e}\"\n            raise ValueError(msg) from e\n\n        self._add_documents_to_vector_store(vector_store)\n\n        return vector_store\n\n    def _add_documents_to_vector_store(self, vector_store) -> None:\n        documents = []\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                documents.append(_input.to_lc_document())\n            else:\n                msg = \"Vector Store Inputs must be Data objects.\"\n                raise TypeError(msg)\n\n        if documents and self.deletion_field:\n            self.log(f\"Deleting documents where {self.deletion_field}\")\n            try:\n                database = self.get_database_object()\n                collection = database.get_collection(self.collection_name, keyspace=self.get_keyspace())\n                delete_values = list({doc.metadata[self.deletion_field] for doc in documents})\n                self.log(f\"Deleting documents where {self.deletion_field} matches {delete_values}.\")\n                collection.delete_many({f\"metadata.{self.deletion_field}\": {\"$in\": delete_values}})\n            except Exception as e:\n                msg = f\"Error deleting documents from AstraDBVectorStore based on '{self.deletion_field}': {e}\"\n                raise ValueError(msg) from e\n\n        if documents:\n            self.log(f\"Adding {len(documents)} documents to the Vector Store.\")\n            try:\n                vector_store.add_documents(documents)\n            except Exception as e:\n                msg = f\"Error adding documents to AstraDBVectorStore: {e}\"\n                raise ValueError(msg) from e\n        else:\n            self.log(\"No documents to add to the Vector Store.\")\n\n    def _map_search_type(self) -> str:\n        search_type_mapping = {\n            \"Similarity with score threshold\": \"similarity_score_threshold\",\n            \"MMR (Max Marginal Relevance)\": \"mmr\",\n        }\n\n        return search_type_mapping.get(self.search_type, \"similarity\")\n\n    def _build_search_args(self):\n        query = self.search_query if isinstance(self.search_query, str) and self.search_query.strip() else None\n\n        if query:\n            args = {\n                \"query\": query,\n                \"search_type\": self._map_search_type(),\n                \"k\": self.number_of_results,\n                \"score_threshold\": self.search_score_threshold,\n            }\n        elif self.advanced_search_filter:\n            args = {\n                \"n\": self.number_of_results,\n            }\n        else:\n            return {}\n\n        filter_arg = self.advanced_search_filter or {}\n        if filter_arg:\n            args[\"filter\"] = filter_arg\n\n        return args\n\n    def search_documents(self, vector_store=None) -> list[Data]:\n        vector_store = vector_store or self.build_vector_store()\n\n        self.log(f\"Search input: {self.search_query}\")\n        self.log(f\"Search type: {self.search_type}\")\n        self.log(f\"Number of results: {self.number_of_results}\")\n\n        try:\n            search_args = self._build_search_args()\n        except Exception as e:\n            msg = f\"Error in AstraDBVectorStore._build_search_args: {e}\"\n            raise ValueError(msg) from e\n\n        if not search_args:\n            self.log(\"No search input or filters provided. Skipping search.\")\n            return []\n\n        docs = []\n        search_method = \"search\" if \"query\" in search_args else \"metadata_search\"\n\n        try:\n            self.log(f\"Calling vector_store.{search_method} with args: {search_args}\")\n            docs = getattr(vector_store, search_method)(**search_args)\n        except Exception as e:\n            msg = f\"Error performing {search_method} in AstraDBVectorStore: {e}\"\n            raise ValueError(msg) from e\n\n        self.log(f\"Retrieved documents: {len(docs)}\")\n\n        data = docs_to_data(docs)\n        self.log(f\"Converted documents to data: {len(data)}\")\n        self.status = data\n\n        return data\n\n    def get_retriever_kwargs(self):\n        search_args = self._build_search_args()\n\n        return {\n            \"search_type\": self._map_search_type(),\n            \"search_kwargs\": search_args,\n        }\n",
                                    "fileTypes": [],
                                    "file_path": "",
                                    "password": false,
                                    "name": "code",
                                    "advanced": true,
                                    "dynamic": true,
                                    "info": "",
                                    "load_from_db": false,
                                    "title_case": false
                                },
                                "collection_name": {
                                    "_input_type": "DropdownInput",
                                    "advanced": false,
                                    "combobox": false,
                                    "dialog_inputs": {},
                                    "display_name": "Collection",
                                    "dynamic": false,
                                    "info": "The name of the collection within Astra DB where the vectors will be stored.",
                                    "name": "collection_name",
                                    "options": [],
                                    "options_metadata": [],
                                    "placeholder": "",
                                    "real_time_refresh": true,
                                    "refresh_button": true,
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "content_field": {
                                    "_input_type": "StrInput",
                                    "advanced": true,
                                    "display_name": "Content Field",
                                    "dynamic": false,
                                    "info": "Field to use as the text content field for the vector store.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "name": "content_field",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "database_name": {
                                    "_input_type": "DropdownInput",
                                    "advanced": false,
                                    "combobox": true,
                                    "dialog_inputs": {},
                                    "display_name": "Database",
                                    "dynamic": false,
                                    "info": "Select a database in Astra DB.",
                                    "name": "database_name",
                                    "options": [],
                                    "options_metadata": [
                                        {
                                            "collections": 4
                                        }
                                    ],
                                    "placeholder": "",
                                    "real_time_refresh": true,
                                    "refresh_button": true,
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": []
                                },
                                "deletion_field": {
                                    "_input_type": "StrInput",
                                    "advanced": true,
                                    "display_name": "Deletion Based On Field",
                                    "dynamic": false,
                                    "info": "When this parameter is provided, documents in the target collection with metadata field values matching the input metadata field value will be deleted before new data is loaded.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "name": "deletion_field",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "embedding_choice": {
                                    "_input_type": "DropdownInput",
                                    "advanced": false,
                                    "combobox": false,
                                    "dialog_inputs": {},
                                    "display_name": "Embedding Model or Astra Vectorize",
                                    "dynamic": false,
                                    "info": "Choose an embedding model or use Astra Vectorize.",
                                    "name": "embedding_choice",
                                    "options": [
                                        "Embedding Model",
                                        "Astra Vectorize"
                                    ],
                                    "options_metadata": [],
                                    "placeholder": "",
                                    "real_time_refresh": true,
                                    "required": false,
                                    "show": false,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Embedding Model"
                                },
                                "embedding_model": {
                                    "_input_type": "HandleInput",
                                    "advanced": false,
                                    "display_name": "Embedding Model",
                                    "dynamic": false,
                                    "info": "Allows an embedding model configuration.",
                                    "input_types": [
                                        "Embeddings"
                                    ],
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "embedding_model",
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "other",
                                    "value": ""
                                },
                                "environment": {
                                    "_input_type": "StrInput",
                                    "advanced": true,
                                    "display_name": "Environment",
                                    "dynamic": false,
                                    "info": "The environment for the Astra DB API Endpoint.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "name": "environment",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "ignore_invalid_documents": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Ignore Invalid Documents",
                                    "dynamic": false,
                                    "info": "Boolean flag to determine whether to ignore invalid documents at runtime.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "ignore_invalid_documents",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "ingest_data": {
                                    "_input_type": "DataInput",
                                    "advanced": false,
                                    "display_name": "Ingest Data",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Data"
                                    ],
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "ingest_data",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "other",
                                    "value": ""
                                },
                                "keyspace": {
                                    "_input_type": "StrInput",
                                    "advanced": true,
                                    "display_name": "Keyspace",
                                    "dynamic": false,
                                    "info": "Optional keyspace within Astra DB to use for the collection.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "name": "keyspace",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "number_of_results": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Number of Search Results",
                                    "dynamic": false,
                                    "info": "Number of search results to return.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "number_of_results",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 4
                                },
                                "search_query": {
                                    "_input_type": "MultilineInput",
                                    "advanced": false,
                                    "display_name": "Search Query",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "search_query",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": true,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "search_score_threshold": {
                                    "_input_type": "FloatInput",
                                    "advanced": true,
                                    "display_name": "Search Score Threshold",
                                    "dynamic": false,
                                    "info": "Minimum similarity score threshold for search results. (when using 'Similarity with score threshold')",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "search_score_threshold",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "float",
                                    "value": 0
                                },
                                "search_type": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "dialog_inputs": {},
                                    "display_name": "Search Type",
                                    "dynamic": false,
                                    "info": "Search type to use",
                                    "name": "search_type",
                                    "options": [
                                        "Similarity",
                                        "Similarity with score threshold",
                                        "MMR (Max Marginal Relevance)"
                                    ],
                                    "options_metadata": [],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Similarity"
                                },
                                "token": {
                                    "_input_type": "SecretStrInput",
                                    "advanced": false,
                                    "display_name": "Astra DB Application Token",
                                    "dynamic": false,
                                    "info": "Authentication token for accessing Astra DB.",
                                    "input_types": [],
                                    "load_from_db": true,
                                    "name": "token",
                                    "password": true,
                                    "placeholder": "",
                                    "real_time_refresh": true,
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": "ASTRA_DB_APPLICATION_TOKEN"
                                }
                            },
                            "tool_mode": false
                        },
                        "showNode": true,
                        "type": "AstraDB"
                    },
                    "dragging": false,
                    "id": "AstraDB-buLOo",
                    "measured": {
                        "height": 614,
                        "width": 320
                    },
                    "position": {
                        "x": 1215.64305654714,
                        "y": 583.5617249887649
                    },
                    "selected": false,
                    "type": "genericNode"
                },
                {
                    "data": {
                        "id": "AstraDB-g91YK",
                        "node": {
                            "base_classes": [
                                "Data",
                                "DataFrame"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Ingest and search documents in Astra DB",
                            "display_name": "Astra DB",
                            "documentation": "https://docs.datastax.com/en/langflow/astra-components.html",
                            "edited": false,
                            "field_order": [
                                "token",
                                "environment",
                                "api_endpoint",
                                "database_name",
                                "collection_name",
                                "embedding_choice",
                                "keyspace",
                                "embedding_model",
                                "ingest_data",
                                "search_query",
                                "number_of_results",
                                "search_type",
                                "search_score_threshold",
                                "advanced_search_filter",
                                "content_field",
                                "deletion_field",
                                "ignore_invalid_documents",
                                "astradb_vectorstore_kwargs"
                            ],
                            "frozen": false,
                            "icon": "AstraDB",
                            "legacy": false,
                            "metadata": {},
                            "minimized": false,
                            "output_types": [],
                            "outputs": [
                                {
                                    "types": [
                                        "Data"
                                    ],
                                    "selected": "Data",
                                    "name": "search_results",
                                    "display_name": "Search Results",
                                    "method": "search_documents",
                                    "value": "__UNDEFINED__",
                                    "cache": true,
                                    "required_inputs": [
                                        "collection_name",
                                        "database_name",
                                        "embedding_model",
                                        "token"
                                    ],
                                    "allows_loop": false
                                },
                                {
                                    "types": [
                                        "DataFrame"
                                    ],
                                    "selected": "DataFrame",
                                    "name": "dataframe",
                                    "display_name": "DataFrame",
                                    "method": "as_dataframe",
                                    "value": "__UNDEFINED__",
                                    "cache": true,
                                    "required_inputs": [],
                                    "allows_loop": false
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "advanced_search_filter": {
                                    "_input_type": "NestedDictInput",
                                    "advanced": true,
                                    "display_name": "Search Metadata Filter",
                                    "dynamic": false,
                                    "info": "Optional dictionary of filters to apply to the search query.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "advanced_search_filter",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "NestedDict",
                                    "value": {}
                                },
                                "api_endpoint": {
                                    "_input_type": "StrInput",
                                    "advanced": false,
                                    "display_name": "Database",
                                    "dynamic": false,
                                    "info": "The API endpoint for the Astra DB instance.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "name": "api_endpoint",
                                    "placeholder": "",
                                    "real_time_refresh": true,
                                    "refresh_button": true,
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "astradb_vectorstore_kwargs": {
                                    "_input_type": "NestedDictInput",
                                    "advanced": true,
                                    "display_name": "AstraDBVectorStore Parameters",
                                    "dynamic": false,
                                    "info": "Optional dictionary of additional parameters for the AstraDBVectorStore.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "astradb_vectorstore_kwargs",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "NestedDict",
                                    "value": {}
                                },
                                "code": {
                                    "type": "code",
                                    "required": true,
                                    "placeholder": "",
                                    "list": false,
                                    "show": true,
                                    "multiline": true,
                                    "value": "import os\nfrom collections import defaultdict\nfrom dataclasses import dataclass, field\n\nfrom astrapy import AstraDBAdmin, DataAPIClient, Database\nfrom langchain_astradb import AstraDBVectorStore, CollectionVectorServiceOptions\n\nfrom langflow.base.vectorstores.model import LCVectorStoreComponent, check_cached_vector_store\nfrom langflow.helpers import docs_to_data\nfrom langflow.inputs import FloatInput, NestedDictInput\nfrom langflow.io import (\n    BoolInput,\n    DropdownInput,\n    HandleInput,\n    IntInput,\n    SecretStrInput,\n    StrInput,\n)\nfrom langflow.schema import Data\nfrom langflow.utils.version import get_version_info\n\n\nclass AstraDBVectorStoreComponent(LCVectorStoreComponent):\n    display_name: str = \"Astra DB\"\n    description: str = \"Ingest and search documents in Astra DB\"\n    documentation: str = \"https://docs.datastax.com/en/langflow/astra-components.html\"\n    name = \"AstraDB\"\n    icon: str = \"AstraDB\"\n\n    _cached_vector_store: AstraDBVectorStore | None = None\n\n    @dataclass\n    class NewDatabaseInput:\n        functionality: str = \"create\"\n        fields: dict[str, dict] = field(\n            default_factory=lambda: {\n                \"data\": {\n                    \"node\": {\n                        \"description\": \"Create a new database in Astra DB.\",\n                        \"display_name\": \"Create New Database\",\n                        \"field_order\": [\"new_database_name\", \"cloud_provider\", \"region\"],\n                        \"template\": {\n                            \"new_database_name\": StrInput(\n                                name=\"new_database_name\",\n                                display_name=\"New Database Name\",\n                                info=\"Name of the new database to create in Astra DB.\",\n                                required=True,\n                            ),\n                            \"cloud_provider\": DropdownInput(\n                                name=\"cloud_provider\",\n                                display_name=\"Cloud Provider\",\n                                info=\"Cloud provider for the new database.\",\n                                options=[\"Amazon Web Services\", \"Google Cloud Platform\", \"Microsoft Azure\"],\n                                required=True,\n                            ),\n                            \"region\": DropdownInput(\n                                name=\"region\",\n                                display_name=\"Region\",\n                                info=\"Region for the new database.\",\n                                options=[],\n                                required=True,\n                            ),\n                        },\n                    },\n                }\n            }\n        )\n\n    @dataclass\n    class NewCollectionInput:\n        functionality: str = \"create\"\n        fields: dict[str, dict] = field(\n            default_factory=lambda: {\n                \"data\": {\n                    \"node\": {\n                        \"description\": \"Create a new collection in Astra DB.\",\n                        \"display_name\": \"Create New Collection\",\n                        \"field_order\": [\n                            \"new_collection_name\",\n                            \"embedding_generation_provider\",\n                            \"embedding_generation_model\",\n                        ],\n                        \"template\": {\n                            \"new_collection_name\": StrInput(\n                                name=\"new_collection_name\",\n                                display_name=\"New Collection Name\",\n                                info=\"Name of the new collection to create in Astra DB.\",\n                                required=True,\n                            ),\n                            \"embedding_generation_provider\": DropdownInput(\n                                name=\"embedding_generation_provider\",\n                                display_name=\"Embedding Generation Provider\",\n                                info=\"Provider to use for generating embeddings.\",\n                                options=[],\n                                required=True,\n                            ),\n                            \"embedding_generation_model\": DropdownInput(\n                                name=\"embedding_generation_model\",\n                                display_name=\"Embedding Generation Model\",\n                                info=\"Model to use for generating embeddings.\",\n                                options=[],\n                                required=True,\n                            ),\n                        },\n                    },\n                }\n            }\n        )\n\n    inputs = [\n        SecretStrInput(\n            name=\"token\",\n            display_name=\"Astra DB Application Token\",\n            info=\"Authentication token for accessing Astra DB.\",\n            value=\"ASTRA_DB_APPLICATION_TOKEN\",\n            required=True,\n            real_time_refresh=True,\n            input_types=[],\n        ),\n        StrInput(\n            name=\"environment\",\n            display_name=\"Environment\",\n            info=\"The environment for the Astra DB API Endpoint.\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"api_endpoint\",\n            display_name=\"Astra DB API Endpoint\" if os.getenv(\"LANGFLOW_HOST\") is None else \"Database\",\n            info=\"The API endpoint for the Astra DB instance.\",\n            advanced=os.getenv(\"LANGFLOW_HOST\") is None,  # TODO: Clean up all examples of these\n            refresh_button=True,\n            real_time_refresh=True,\n        ),\n        DropdownInput(\n            name=\"database_name\",\n            display_name=\"Database\",\n            info=\"Select a database in Astra DB.\",\n            required=True,\n            refresh_button=True,\n            real_time_refresh=True,\n            # dialog_inputs=asdict(NewDatabaseInput()),\n            options=[],\n            options_metadata=[\n                {\n                    \"collections\": 0,\n                }\n            ],\n            value=\"\",\n            combobox=True,\n            show=os.getenv(\"LANGFLOW_HOST\") is None,\n        ),\n        DropdownInput(\n            name=\"collection_name\",\n            display_name=\"Collection\",\n            info=\"The name of the collection within Astra DB where the vectors will be stored.\",\n            required=True,\n            refresh_button=True,\n            real_time_refresh=True,\n            # dialog_inputs=asdict(NewCollectionInput()),\n            options=[],\n            options_metadata=[\n                {\n                    \"provider\": None,\n                    \"model\": None,\n                    \"records\": 0,\n                    \"icon\": \"\",\n                }\n            ],\n            value=\"\",\n        ),\n        DropdownInput(\n            name=\"embedding_choice\",\n            display_name=\"Embedding Model or Astra Vectorize\",\n            info=\"Choose an embedding model or use Astra Vectorize.\",\n            options=[\"Embedding Model\", \"Astra Vectorize\"],\n            value=\"Embedding Model\",\n            advanced=os.getenv(\"LANGFLOW_HOST\") is None,\n            real_time_refresh=True,\n        ),\n        StrInput(\n            name=\"keyspace\",\n            display_name=\"Keyspace\",\n            info=\"Optional keyspace within Astra DB to use for the collection.\",\n            advanced=True,\n        ),\n        HandleInput(\n            name=\"embedding_model\",\n            display_name=\"Embedding Model\",\n            input_types=[\"Embeddings\"],\n            info=\"Allows an embedding model configuration.\",\n            required=True,\n        ),\n        *LCVectorStoreComponent.inputs,\n        IntInput(\n            name=\"number_of_results\",\n            display_name=\"Number of Search Results\",\n            info=\"Number of search results to return.\",\n            advanced=True,\n            value=4,\n        ),\n        DropdownInput(\n            name=\"search_type\",\n            display_name=\"Search Type\",\n            info=\"Search type to use\",\n            options=[\"Similarity\", \"Similarity with score threshold\", \"MMR (Max Marginal Relevance)\"],\n            value=\"Similarity\",\n            advanced=True,\n        ),\n        FloatInput(\n            name=\"search_score_threshold\",\n            display_name=\"Search Score Threshold\",\n            info=\"Minimum similarity score threshold for search results. \"\n            \"(when using 'Similarity with score threshold')\",\n            value=0,\n            advanced=True,\n        ),\n        NestedDictInput(\n            name=\"advanced_search_filter\",\n            display_name=\"Search Metadata Filter\",\n            info=\"Optional dictionary of filters to apply to the search query.\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"content_field\",\n            display_name=\"Content Field\",\n            info=\"Field to use as the text content field for the vector store.\",\n            advanced=True,\n        ),\n        StrInput(\n            name=\"deletion_field\",\n            display_name=\"Deletion Based On Field\",\n            info=\"When this parameter is provided, documents in the target collection with \"\n            \"metadata field values matching the input metadata field value will be deleted \"\n            \"before new data is loaded.\",\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"ignore_invalid_documents\",\n            display_name=\"Ignore Invalid Documents\",\n            info=\"Boolean flag to determine whether to ignore invalid documents at runtime.\",\n            advanced=True,\n        ),\n        NestedDictInput(\n            name=\"astradb_vectorstore_kwargs\",\n            display_name=\"AstraDBVectorStore Parameters\",\n            info=\"Optional dictionary of additional parameters for the AstraDBVectorStore.\",\n            advanced=True,\n        ),\n    ]\n\n    @classmethod\n    def map_cloud_providers(cls):\n        return {\n            \"Amazon Web Services\": {\n                \"id\": \"aws\",\n                \"regions\": [\"us-east-2\", \"ap-south-1\", \"eu-west-1\"],\n            },\n            \"Google Cloud Platform\": {\n                \"id\": \"gcp\",\n                \"regions\": [\"us-east1\"],\n            },\n            \"Microsoft Azure\": {\n                \"id\": \"azure\",\n                \"regions\": [\"westus3\"],\n            },\n        }\n\n    @classmethod\n    def create_database_api(\n        cls,\n        token: str,\n        new_database_name: str,\n        cloud_provider: str,\n        region: str,\n    ):\n        client = DataAPIClient(token=token)\n\n        # Get the admin object\n        admin_client = client.get_admin(token=token)\n\n        # Call the create database function\n        return admin_client.create_database(\n            name=new_database_name,\n            cloud_provider=cloud_provider,\n            region=region,\n        )\n\n    @classmethod\n    def create_collection_api(\n        cls,\n        token: str,\n        database_name: str,\n        new_collection_name: str,\n        dimension: int | None = None,\n        embedding_generation_provider: str | None = None,\n        embedding_generation_model: str | None = None,\n    ):\n        client = DataAPIClient(token=token)\n        api_endpoint = cls.get_api_endpoint_static(token=token, database_name=database_name)\n\n        # Get the database object\n        database = client.get_database(api_endpoint=api_endpoint, token=token)\n\n        # Build vectorize options, if needed\n        vectorize_options = None\n        if not dimension:\n            vectorize_options = CollectionVectorServiceOptions(\n                provider=embedding_generation_provider,\n                model_name=embedding_generation_model,\n                authentication=None,\n                parameters=None,\n            )\n\n        # Create the collection\n        return database.create_collection(\n            name=new_collection_name,\n            dimension=dimension,\n            service=vectorize_options,\n        )\n\n    @classmethod\n    def get_database_list_static(cls, token: str, environment: str | None = None):\n        client = DataAPIClient(token=token, environment=environment)\n\n        # Get the admin object\n        admin_client = client.get_admin(token=token)\n\n        # Get the list of databases\n        db_list = list(admin_client.list_databases())\n\n        # Generate the api endpoint for each database\n        return {\n            db.info.name: {\n                \"api_endpoint\": (api_endpoint := f\"https://{db.info.id}-{db.info.region}.apps.astra.datastax.com\"),\n                \"collections\": len(\n                    list(\n                        client.get_database(\n                            api_endpoint=api_endpoint, token=token, keyspace=db.info.keyspace\n                        ).list_collection_names(keyspace=db.info.keyspace)\n                    )\n                ),\n            }\n            for db in db_list\n        }\n\n    def get_database_list(self):\n        return self.get_database_list_static(token=self.token, environment=self.environment)\n\n    @classmethod\n    def get_api_endpoint_static(\n        cls,\n        token: str,\n        environment: str | None = None,\n        api_endpoint: str | None = None,\n        database_name: str | None = None,\n    ):\n        # Check if an api endpoint is provided\n        if api_endpoint:\n            return api_endpoint\n\n        # Check if the database_name is like a url\n        if database_name and database_name.startswith(\"https://\"):\n            return database_name\n\n        # If the database is not set, nothing we can do.\n        if not database_name:\n            return None\n\n        # Otherwise, get the URL from the database list\n        return cls.get_database_list_static(token=token, environment=environment).get(database_name).get(\"api_endpoint\")\n\n    def get_api_endpoint(self):\n        return self.get_api_endpoint_static(\n            token=self.token,\n            environment=self.environment,\n            api_endpoint=self.api_endpoint,\n            database_name=self.database_name,\n        )\n\n    def get_keyspace(self):\n        keyspace = self.keyspace\n\n        if keyspace:\n            return keyspace.strip()\n\n        return None\n\n    def get_database_object(self):\n        try:\n            client = DataAPIClient(token=self.token, environment=self.environment)\n\n            return client.get_database(\n                api_endpoint=self.get_api_endpoint(),\n                token=self.token,\n                keyspace=self.get_keyspace(),\n            )\n        except Exception as e:  # noqa: BLE001\n            self.log(f\"Error getting database: {e}\")\n\n            return None\n\n    def collection_exists(self):\n        try:\n            client = DataAPIClient(token=self.token, environment=self.environment)\n            database = client.get_database(\n                api_endpoint=self.get_api_endpoint(),\n                token=self.token,\n                keyspace=self.get_keyspace(),\n            )\n\n            return self.collection_name in list(database.list_collection_names(keyspace=self.get_keyspace()))\n        except Exception as e:  # noqa: BLE001\n            self.log(f\"Error getting collection status: {e}\")\n\n            return False\n\n    def collection_data(self, collection_name: str, database: Database | None = None):\n        try:\n            if not database:\n                client = DataAPIClient(token=self.token, environment=self.environment)\n\n                database = client.get_database(\n                    api_endpoint=self.get_api_endpoint(),\n                    token=self.token,\n                    keyspace=self.get_keyspace(),\n                )\n\n            collection = database.get_collection(collection_name, keyspace=self.get_keyspace())\n\n            return collection.estimated_document_count()\n        except Exception as e:  # noqa: BLE001\n            self.log(f\"Error checking collection data: {e}\")\n\n            return None\n\n    def get_vectorize_providers(self):\n        try:\n            self.log(\"Dynamically updating list of Vectorize providers.\")\n\n            # Get the admin object\n            admin = AstraDBAdmin(token=self.token)\n            db_admin = admin.get_database_admin(api_endpoint=self.get_api_endpoint())\n\n            # Get the list of embedding providers\n            embedding_providers = db_admin.find_embedding_providers().as_dict()\n\n            vectorize_providers_mapping = {}\n            # Map the provider display name to the provider key and models\n            for provider_key, provider_data in embedding_providers[\"embeddingProviders\"].items():\n                display_name = provider_data[\"displayName\"]\n                models = [model[\"name\"] for model in provider_data[\"models\"]]\n\n                # TODO: https://astra.datastax.com/api/v2/graphql\n                vectorize_providers_mapping[display_name] = [provider_key, models]\n\n            # Sort the resulting dictionary\n            return defaultdict(list, dict(sorted(vectorize_providers_mapping.items())))\n        except Exception as e:  # noqa: BLE001\n            self.log(f\"Error fetching Vectorize providers: {e}\")\n\n            return {}\n\n    def _initialize_database_options(self):\n        try:\n            return [\n                {\"name\": name, \"collections\": info[\"collections\"]} for name, info in self.get_database_list().items()\n            ]\n        except Exception as e:  # noqa: BLE001\n            self.log(f\"Error fetching databases: {e}\")\n\n            return []\n\n    def _initialize_collection_options(self):\n        database = self.get_database_object()\n        if database is None:\n            return []\n\n        try:\n            collection_list = list(database.list_collections(keyspace=self.get_keyspace()))\n\n            return [\n                {\n                    \"name\": col.name,\n                    \"records\": self.collection_data(collection_name=col.name, database=database),\n                    \"provider\": (\n                        col.options.vector.service.provider\n                        if col.options.vector and col.options.vector.service\n                        else None\n                    ),\n                    \"icon\": \"\",\n                    \"model\": (\n                        col.options.vector.service.model_name\n                        if col.options.vector and col.options.vector.service\n                        else None\n                    ),\n                }\n                for col in collection_list\n            ]\n        except Exception as e:  # noqa: BLE001\n            self.log(f\"Error fetching collections: {e}\")\n\n            return []\n\n    def update_build_config(self, build_config: dict, field_value: str, field_name: str | None = None):\n        if field_name == \"embedding_choice\":\n            if field_value == \"Astra Vectorize\":\n                build_config[\"embedding_model\"][\"show\"] = False\n                build_config[\"embedding_model\"][\"required\"] = False\n            else:\n                build_config[\"embedding_model\"][\"show\"] = True\n                build_config[\"embedding_model\"][\"required\"] = True\n\n            return build_config\n\n        if not self.token or not self.token.startswith(\"AstraCS:\"):\n            build_config[\"database_name\"][\"info\"] = \"Add a Valid Token to Select a Database\"\n        else:\n            build_config[\"database_name\"][\"info\"] = \"Select a Database from Astra DB\"\n\n        # Refresh the database name options\n        if field_name in [\"token\", \"environment\"] or not build_config[\"database_name\"][\"options\"]:\n            # Reset the list of collections\n            build_config[\"collection_name\"][\"options\"] = []\n            build_config[\"collection_name\"][\"options_metadata\"] = []\n\n            # Get the list of databases\n            database_options = self._initialize_database_options()\n\n            if database_options and not os.getenv(\"LANGFLOW_HOST\"):\n                build_config[\"database_name\"][\"show\"] = True\n                build_config[\"api_endpoint\"][\"advanced\"] = True\n                build_config[\"api_endpoint\"][\"value\"] = \"\"\n                build_config[\"database_name\"][\"options\"] = [db[\"name\"] for db in database_options]\n                build_config[\"database_name\"][\"options_metadata\"] = [\n                    {k: v for k, v in db.items() if k not in [\"name\"]} for db in database_options\n                ]\n            else:\n                build_config[\"database_name\"][\"show\"] = False\n                build_config[\"api_endpoint\"][\"advanced\"] = False\n\n            # Get list of regions for a given cloud provider\n            \"\"\"\n            cloud_provider = (\n                build_config[\"database_name\"][\"dialog_inputs\"][\"fields\"][\"data\"][\"node\"][\"template\"][\"cloud_provider\"][\n                    \"value\"\n                ]\n                or \"Amazon Web Services\"\n            )\n            build_config[\"database_name\"][\"dialog_inputs\"][\"fields\"][\"data\"][\"node\"][\"template\"][\"region\"][\n                \"options\"\n            ] = self.map_cloud_providers()[cloud_provider][\"regions\"]\n            \"\"\"\n\n        # Refresh the collection name options\n        if field_name in [\"database_name\", \"api_endpoint\"] or not build_config[\"collection_name\"][\"options\"]:\n            # Reset the list of collections\n            collection_options = self._initialize_collection_options()\n            build_config[\"collection_name\"][\"options\"] = [col[\"name\"] for col in collection_options]\n            build_config[\"collection_name\"][\"options_metadata\"] = [\n                {k: v for k, v in col.items() if k not in [\"name\"]} for col in collection_options\n            ]\n\n            return build_config\n\n        # Hide embedding model option if opriona_metadata provider is not null\n        if field_name == \"collection_name\":\n            # Find location of the name in the options list\n            index_of_name = build_config[\"collection_name\"][\"options\"].index(field_value)\n            value_of_provider = build_config[\"collection_name\"][\"options_metadata\"][index_of_name][\"provider\"]\n\n            if value_of_provider:\n                build_config[\"embedding_model\"][\"advanced\"] = True\n                build_config[\"embedding_model\"][\"required\"] = False\n                build_config[\"embedding_choice\"][\"value\"] = \"Astra Vectorize\"\n            else:\n                build_config[\"embedding_model\"][\"advanced\"] = False\n                build_config[\"embedding_model\"][\"required\"] = True\n                build_config[\"embedding_choice\"][\"value\"] = \"Embedding Model\"\n\n        # For the final step, get the list of vectorize providers\n        \"\"\"\n        vectorize_providers = self.get_vectorize_providers()\n        if not vectorize_providers:\n            return build_config\n\n        # Allow the user to see the embedding provider options\n        provider_options = build_config[\"collection_name\"][\"dialog_inputs\"][\"fields\"][\"data\"][\"node\"][\"template\"][\n            \"embedding_generation_provider\"\n        ][\"options\"]\n        if not provider_options:\n            # If the collection is set, allow user to see embedding options\n            build_config[\"collection_name\"][\"dialog_inputs\"][\"fields\"][\"data\"][\"node\"][\"template\"][\n                \"embedding_generation_provider\"\n            ][\"options\"] = [\"Bring your own\", \"Nvidia\", *[key for key in vectorize_providers if key != \"Nvidia\"]]\n\n        # And allow the user to see the models based on a selected provider\n        model_options = build_config[\"collection_name\"][\"dialog_inputs\"][\"fields\"][\"data\"][\"node\"][\"template\"][\n            \"embedding_generation_model\"\n        ][\"options\"]\n        if not model_options:\n            embedding_provider = build_config[\"collection_name\"][\"dialog_inputs\"][\"fields\"][\"data\"][\"node\"][\"template\"][\n                \"embedding_generation_provider\"\n            ][\"value\"]\n\n            build_config[\"collection_name\"][\"dialog_inputs\"][\"fields\"][\"data\"][\"node\"][\"template\"][\n                \"embedding_generation_model\"\n            ][\"options\"] = vectorize_providers.get(embedding_provider, [[], []])[1]\n        \"\"\"\n\n        return build_config\n\n    @check_cached_vector_store\n    def build_vector_store(self):\n        try:\n            from langchain_astradb import AstraDBVectorStore\n        except ImportError as e:\n            msg = (\n                \"Could not import langchain Astra DB integration package. \"\n                \"Please install it with `pip install langchain-astradb`.\"\n            )\n            raise ImportError(msg) from e\n\n        # Get the embedding model and additional params\n        embedding_params = (\n            {\"embedding\": self.embedding_model}\n            if self.embedding_model and self.embedding_choice == \"Embedding Model\"\n            else {}\n        )\n\n        additional_params = self.astradb_vectorstore_kwargs or {}\n\n        # Get Langflow version and platform information\n        __version__ = get_version_info()[\"version\"]\n        langflow_prefix = \"\"\n        if os.getenv(\"LANGFLOW_HOST\") is not None:\n            langflow_prefix = \"ds-\"\n\n        # Bundle up the auto-detect parameters\n        autodetect_params = {\n            \"autodetect_collection\": self.collection_exists(),  # TODO: May want to expose this option\n            \"content_field\": (\n                self.content_field\n                if self.content_field and embedding_params\n                else (\n                    \"page_content\"\n                    if embedding_params and self.collection_data(collection_name=self.collection_name) == 0\n                    else None\n                )\n            ),\n            \"ignore_invalid_documents\": self.ignore_invalid_documents,\n        }\n\n        # Attempt to build the Vector Store object\n        try:\n            vector_store = AstraDBVectorStore(\n                # Astra DB Authentication Parameters\n                token=self.token,\n                api_endpoint=self.get_api_endpoint(),\n                namespace=self.get_keyspace(),\n                collection_name=self.collection_name,\n                environment=self.environment,\n                # Astra DB Usage Tracking Parameters\n                ext_callers=[(f\"{langflow_prefix}langflow\", __version__)],\n                # Astra DB Vector Store Parameters\n                **autodetect_params,\n                **embedding_params,\n                **additional_params,\n            )\n        except Exception as e:\n            msg = f\"Error initializing AstraDBVectorStore: {e}\"\n            raise ValueError(msg) from e\n\n        self._add_documents_to_vector_store(vector_store)\n\n        return vector_store\n\n    def _add_documents_to_vector_store(self, vector_store) -> None:\n        documents = []\n        for _input in self.ingest_data or []:\n            if isinstance(_input, Data):\n                documents.append(_input.to_lc_document())\n            else:\n                msg = \"Vector Store Inputs must be Data objects.\"\n                raise TypeError(msg)\n\n        if documents and self.deletion_field:\n            self.log(f\"Deleting documents where {self.deletion_field}\")\n            try:\n                database = self.get_database_object()\n                collection = database.get_collection(self.collection_name, keyspace=self.get_keyspace())\n                delete_values = list({doc.metadata[self.deletion_field] for doc in documents})\n                self.log(f\"Deleting documents where {self.deletion_field} matches {delete_values}.\")\n                collection.delete_many({f\"metadata.{self.deletion_field}\": {\"$in\": delete_values}})\n            except Exception as e:\n                msg = f\"Error deleting documents from AstraDBVectorStore based on '{self.deletion_field}': {e}\"\n                raise ValueError(msg) from e\n\n        if documents:\n            self.log(f\"Adding {len(documents)} documents to the Vector Store.\")\n            try:\n                vector_store.add_documents(documents)\n            except Exception as e:\n                msg = f\"Error adding documents to AstraDBVectorStore: {e}\"\n                raise ValueError(msg) from e\n        else:\n            self.log(\"No documents to add to the Vector Store.\")\n\n    def _map_search_type(self) -> str:\n        search_type_mapping = {\n            \"Similarity with score threshold\": \"similarity_score_threshold\",\n            \"MMR (Max Marginal Relevance)\": \"mmr\",\n        }\n\n        return search_type_mapping.get(self.search_type, \"similarity\")\n\n    def _build_search_args(self):\n        query = self.search_query if isinstance(self.search_query, str) and self.search_query.strip() else None\n\n        if query:\n            args = {\n                \"query\": query,\n                \"search_type\": self._map_search_type(),\n                \"k\": self.number_of_results,\n                \"score_threshold\": self.search_score_threshold,\n            }\n        elif self.advanced_search_filter:\n            args = {\n                \"n\": self.number_of_results,\n            }\n        else:\n            return {}\n\n        filter_arg = self.advanced_search_filter or {}\n        if filter_arg:\n            args[\"filter\"] = filter_arg\n\n        return args\n\n    def search_documents(self, vector_store=None) -> list[Data]:\n        vector_store = vector_store or self.build_vector_store()\n\n        self.log(f\"Search input: {self.search_query}\")\n        self.log(f\"Search type: {self.search_type}\")\n        self.log(f\"Number of results: {self.number_of_results}\")\n\n        try:\n            search_args = self._build_search_args()\n        except Exception as e:\n            msg = f\"Error in AstraDBVectorStore._build_search_args: {e}\"\n            raise ValueError(msg) from e\n\n        if not search_args:\n            self.log(\"No search input or filters provided. Skipping search.\")\n            return []\n\n        docs = []\n        search_method = \"search\" if \"query\" in search_args else \"metadata_search\"\n\n        try:\n            self.log(f\"Calling vector_store.{search_method} with args: {search_args}\")\n            docs = getattr(vector_store, search_method)(**search_args)\n        except Exception as e:\n            msg = f\"Error performing {search_method} in AstraDBVectorStore: {e}\"\n            raise ValueError(msg) from e\n\n        self.log(f\"Retrieved documents: {len(docs)}\")\n\n        data = docs_to_data(docs)\n        self.log(f\"Converted documents to data: {len(data)}\")\n        self.status = data\n\n        return data\n\n    def get_retriever_kwargs(self):\n        search_args = self._build_search_args()\n\n        return {\n            \"search_type\": self._map_search_type(),\n            \"search_kwargs\": search_args,\n        }\n",
                                    "fileTypes": [],
                                    "file_path": "",
                                    "password": false,
                                    "name": "code",
                                    "advanced": true,
                                    "dynamic": true,
                                    "info": "",
                                    "load_from_db": false,
                                    "title_case": false
                                },
                                "collection_name": {
                                    "_input_type": "DropdownInput",
                                    "advanced": false,
                                    "combobox": false,
                                    "dialog_inputs": {},
                                    "display_name": "Collection",
                                    "dynamic": false,
                                    "info": "The name of the collection within Astra DB where the vectors will be stored.",
                                    "name": "collection_name",
                                    "options": [],
                                    "options_metadata": [],
                                    "placeholder": "",
                                    "real_time_refresh": true,
                                    "refresh_button": true,
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "content_field": {
                                    "_input_type": "StrInput",
                                    "advanced": true,
                                    "display_name": "Content Field",
                                    "dynamic": false,
                                    "info": "Field to use as the text content field for the vector store.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "name": "content_field",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "database_name": {
                                    "_input_type": "DropdownInput",
                                    "advanced": false,
                                    "combobox": true,
                                    "dialog_inputs": {},
                                    "display_name": "Database",
                                    "dynamic": false,
                                    "info": "Select a database in Astra DB.",
                                    "name": "database_name",
                                    "options": [],
                                    "options_metadata": [],
                                    "placeholder": "",
                                    "real_time_refresh": true,
                                    "refresh_button": true,
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": []
                                },
                                "deletion_field": {
                                    "_input_type": "StrInput",
                                    "advanced": true,
                                    "display_name": "Deletion Based On Field",
                                    "dynamic": false,
                                    "info": "When this parameter is provided, documents in the target collection with metadata field values matching the input metadata field value will be deleted before new data is loaded.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "name": "deletion_field",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "embedding_choice": {
                                    "_input_type": "DropdownInput",
                                    "advanced": false,
                                    "combobox": false,
                                    "dialog_inputs": {},
                                    "display_name": "Embedding Model or Astra Vectorize",
                                    "dynamic": false,
                                    "info": "Choose an embedding model or use Astra Vectorize.",
                                    "name": "embedding_choice",
                                    "options": [
                                        "Embedding Model",
                                        "Astra Vectorize"
                                    ],
                                    "options_metadata": [],
                                    "placeholder": "",
                                    "real_time_refresh": true,
                                    "required": false,
                                    "show": false,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Embedding Model"
                                },
                                "embedding_model": {
                                    "_input_type": "HandleInput",
                                    "advanced": false,
                                    "display_name": "Embedding Model",
                                    "dynamic": false,
                                    "info": "Allows an embedding model configuration.",
                                    "input_types": [
                                        "Embeddings"
                                    ],
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "embedding_model",
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "other",
                                    "value": ""
                                },
                                "environment": {
                                    "_input_type": "StrInput",
                                    "advanced": true,
                                    "display_name": "Environment",
                                    "dynamic": false,
                                    "info": "The environment for the Astra DB API Endpoint.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "name": "environment",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "ignore_invalid_documents": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Ignore Invalid Documents",
                                    "dynamic": false,
                                    "info": "Boolean flag to determine whether to ignore invalid documents at runtime.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "ignore_invalid_documents",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "ingest_data": {
                                    "_input_type": "DataInput",
                                    "advanced": false,
                                    "display_name": "Ingest Data",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Data"
                                    ],
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "ingest_data",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "other",
                                    "value": ""
                                },
                                "keyspace": {
                                    "_input_type": "StrInput",
                                    "advanced": true,
                                    "display_name": "Keyspace",
                                    "dynamic": false,
                                    "info": "Optional keyspace within Astra DB to use for the collection.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "name": "keyspace",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "number_of_results": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Number of Search Results",
                                    "dynamic": false,
                                    "info": "Number of search results to return.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "number_of_results",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 4
                                },
                                "search_query": {
                                    "_input_type": "MultilineInput",
                                    "advanced": false,
                                    "display_name": "Search Query",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "search_query",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": true,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "search_score_threshold": {
                                    "_input_type": "FloatInput",
                                    "advanced": true,
                                    "display_name": "Search Score Threshold",
                                    "dynamic": false,
                                    "info": "Minimum similarity score threshold for search results. (when using 'Similarity with score threshold')",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "search_score_threshold",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "float",
                                    "value": 0
                                },
                                "search_type": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "dialog_inputs": {},
                                    "display_name": "Search Type",
                                    "dynamic": false,
                                    "info": "Search type to use",
                                    "name": "search_type",
                                    "options": [
                                        "Similarity",
                                        "Similarity with score threshold",
                                        "MMR (Max Marginal Relevance)"
                                    ],
                                    "options_metadata": [],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Similarity"
                                },
                                "token": {
                                    "_input_type": "SecretStrInput",
                                    "advanced": false,
                                    "display_name": "Astra DB Application Token",
                                    "dynamic": false,
                                    "info": "Authentication token for accessing Astra DB.",
                                    "input_types": [],
                                    "load_from_db": true,
                                    "name": "token",
                                    "password": true,
                                    "placeholder": "",
                                    "real_time_refresh": true,
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": "ASTRA_DB_APPLICATION_TOKEN"
                                }
                            },
                            "tool_mode": false
                        },
                        "showNode": true,
                        "type": "AstraDB"
                    },
                    "dragging": false,
                    "id": "AstraDB-g91YK",
                    "measured": {
                        "height": 614,
                        "width": 320
                    },
                    "position": {
                        "x": 2051.7792466184146,
                        "y": 1448.27994501718
                    },
                    "selected": true,
                    "type": "genericNode"
                }
            ],
            "viewport": {
                "x": -421.5631758817392,
                "y": -674.789451521835,
                "zoom": 0.6632794491322701
            }
        },
        "is_component": false,
        "updated_at": "2025-01-25T04:58:25+00:00",
        "webhook": false,
        "endpoint_name": null,
        "tags": [
            "openai",
            "astradb",
            "rag",
            "q-a"
        ],
        "locked": false,
        "id": "0d114b8d-ee41-426c-84a5-d6ef3d07a927",
        "user_id": null,
        "folder_id": "c54584e6-88eb-4ac0-b70c-68aee37fdce2"
    },
    {
        "name": "Sequential Tasks Agents",
        "description": "This Agent is designed to systematically execute a series of tasks following a meticulously predefined sequence. By adhering to this structured order, the Agent ensures that each task is completed efficiently and effectively, optimizing overall performance and maintaining a high level of accuracy.",
        "icon": "ListChecks",
        "icon_bg_color": null,
        "gradient": "1",
        "data": {
            "edges": [
                {
                    "animated": false,
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "Prompt",
                            "id": "Prompt-xirI8",
                            "name": "prompt",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "system_prompt",
                            "id": "Agent-9YXRo",
                            "inputTypes": [
                                "Message"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "reactflow__edge-Prompt-xirI8{\u0153dataType\u0153:\u0153Prompt\u0153,\u0153id\u0153:\u0153Prompt-xirI8\u0153,\u0153name\u0153:\u0153prompt\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-Agent-9YXRo{\u0153fieldName\u0153:\u0153system_prompt\u0153,\u0153id\u0153:\u0153Agent-9YXRo\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "Prompt-xirI8",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153Prompt\u0153, \u0153id\u0153: \u0153Prompt-xirI8\u0153, \u0153name\u0153: \u0153prompt\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "Agent-9YXRo",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153system_prompt\u0153, \u0153id\u0153: \u0153Agent-9YXRo\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "animated": false,
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "Prompt",
                            "id": "Prompt-f4paU",
                            "name": "prompt",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "system_prompt",
                            "id": "Agent-RmOB2",
                            "inputTypes": [
                                "Message"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "reactflow__edge-Prompt-f4paU{\u0153dataType\u0153:\u0153Prompt\u0153,\u0153id\u0153:\u0153Prompt-f4paU\u0153,\u0153name\u0153:\u0153prompt\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-Agent-RmOB2{\u0153fieldName\u0153:\u0153system_prompt\u0153,\u0153id\u0153:\u0153Agent-RmOB2\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "Prompt-f4paU",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153Prompt\u0153, \u0153id\u0153: \u0153Prompt-f4paU\u0153, \u0153name\u0153: \u0153prompt\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "Agent-RmOB2",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153system_prompt\u0153, \u0153id\u0153: \u0153Agent-RmOB2\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "animated": false,
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "Agent",
                            "id": "Agent-9YXRo",
                            "name": "response",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "input_value",
                            "id": "ChatOutput-DqyyQ",
                            "inputTypes": [
                                "Message"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "reactflow__edge-Agent-9YXRo{\u0153dataType\u0153:\u0153Agent\u0153,\u0153id\u0153:\u0153Agent-9YXRo\u0153,\u0153name\u0153:\u0153response\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-ChatOutput-DqyyQ{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153ChatOutput-DqyyQ\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "Agent-9YXRo",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153Agent\u0153, \u0153id\u0153: \u0153Agent-9YXRo\u0153, \u0153name\u0153: \u0153response\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "ChatOutput-DqyyQ",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153input_value\u0153, \u0153id\u0153: \u0153ChatOutput-DqyyQ\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "animated": false,
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "Agent",
                            "id": "Agent-RmOB2",
                            "name": "response",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "finance_agent_output",
                            "id": "Prompt-xirI8",
                            "inputTypes": [
                                "Message",
                                "Text"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "reactflow__edge-Agent-RmOB2{\u0153dataType\u0153:\u0153Agent\u0153,\u0153id\u0153:\u0153Agent-RmOB2\u0153,\u0153name\u0153:\u0153response\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-Prompt-xirI8{\u0153fieldName\u0153:\u0153finance_agent_output\u0153,\u0153id\u0153:\u0153Prompt-xirI8\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153,\u0153Text\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "Agent-RmOB2",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153Agent\u0153, \u0153id\u0153: \u0153Agent-RmOB2\u0153, \u0153name\u0153: \u0153response\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "Prompt-xirI8",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153finance_agent_output\u0153, \u0153id\u0153: \u0153Prompt-xirI8\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153, \u0153Text\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "animated": false,
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "ChatInput",
                            "id": "ChatInput-TQ1li",
                            "name": "message",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "input_value",
                            "id": "Agent-TmQ5O",
                            "inputTypes": [
                                "Message"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "reactflow__edge-ChatInput-TQ1li{\u0153dataType\u0153:\u0153ChatInput\u0153,\u0153id\u0153:\u0153ChatInput-TQ1li\u0153,\u0153name\u0153:\u0153message\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-Agent-TmQ5O{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153Agent-TmQ5O\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "ChatInput-TQ1li",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153ChatInput\u0153, \u0153id\u0153: \u0153ChatInput-TQ1li\u0153, \u0153name\u0153: \u0153message\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "Agent-TmQ5O",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153input_value\u0153, \u0153id\u0153: \u0153Agent-TmQ5O\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "animated": false,
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "Prompt",
                            "id": "Prompt-3fyqW",
                            "name": "prompt",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "system_prompt",
                            "id": "Agent-TmQ5O",
                            "inputTypes": [
                                "Message"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "reactflow__edge-Prompt-3fyqW{\u0153dataType\u0153:\u0153Prompt\u0153,\u0153id\u0153:\u0153Prompt-3fyqW\u0153,\u0153name\u0153:\u0153prompt\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-Agent-TmQ5O{\u0153fieldName\u0153:\u0153system_prompt\u0153,\u0153id\u0153:\u0153Agent-TmQ5O\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "Prompt-3fyqW",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153Prompt\u0153, \u0153id\u0153: \u0153Prompt-3fyqW\u0153, \u0153name\u0153: \u0153prompt\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "Agent-TmQ5O",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153system_prompt\u0153, \u0153id\u0153: \u0153Agent-TmQ5O\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "animated": false,
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "Agent",
                            "id": "Agent-TmQ5O",
                            "name": "response",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "input_value",
                            "id": "Agent-RmOB2",
                            "inputTypes": [
                                "Message"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "reactflow__edge-Agent-TmQ5O{\u0153dataType\u0153:\u0153Agent\u0153,\u0153id\u0153:\u0153Agent-TmQ5O\u0153,\u0153name\u0153:\u0153response\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-Agent-RmOB2{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153Agent-RmOB2\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "Agent-TmQ5O",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153Agent\u0153, \u0153id\u0153: \u0153Agent-TmQ5O\u0153, \u0153name\u0153: \u0153response\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "Agent-RmOB2",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153input_value\u0153, \u0153id\u0153: \u0153Agent-RmOB2\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "animated": false,
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "Agent",
                            "id": "Agent-TmQ5O",
                            "name": "response",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "research_agent_output",
                            "id": "Prompt-xirI8",
                            "inputTypes": [
                                "Message",
                                "Text"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "reactflow__edge-Agent-TmQ5O{\u0153dataType\u0153:\u0153Agent\u0153,\u0153id\u0153:\u0153Agent-TmQ5O\u0153,\u0153name\u0153:\u0153response\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-Prompt-xirI8{\u0153fieldName\u0153:\u0153research_agent_output\u0153,\u0153id\u0153:\u0153Prompt-xirI8\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153,\u0153Text\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "Agent-TmQ5O",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153Agent\u0153, \u0153id\u0153: \u0153Agent-TmQ5O\u0153, \u0153name\u0153: \u0153response\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "Prompt-xirI8",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153research_agent_output\u0153, \u0153id\u0153: \u0153Prompt-xirI8\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153, \u0153Text\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "CalculatorComponent",
                            "id": "CalculatorComponent-82dCo",
                            "name": "component_as_tool",
                            "output_types": [
                                "Tool"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "tools",
                            "id": "Agent-9YXRo",
                            "inputTypes": [
                                "Tool"
                            ],
                            "type": "other"
                        }
                    },
                    "id": "reactflow__edge-CalculatorComponent-82dCo{\u0153dataType\u0153:\u0153CalculatorComponent\u0153,\u0153id\u0153:\u0153CalculatorComponent-82dCo\u0153,\u0153name\u0153:\u0153component_as_tool\u0153,\u0153output_types\u0153:[\u0153Tool\u0153]}-Agent-9YXRo{\u0153fieldName\u0153:\u0153tools\u0153,\u0153id\u0153:\u0153Agent-9YXRo\u0153,\u0153inputTypes\u0153:[\u0153Tool\u0153],\u0153type\u0153:\u0153other\u0153}",
                    "source": "CalculatorComponent-82dCo",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153CalculatorComponent\u0153, \u0153id\u0153: \u0153CalculatorComponent-82dCo\u0153, \u0153name\u0153: \u0153component_as_tool\u0153, \u0153output_types\u0153: [\u0153Tool\u0153]}",
                    "target": "Agent-9YXRo",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153tools\u0153, \u0153id\u0153: \u0153Agent-9YXRo\u0153, \u0153inputTypes\u0153: [\u0153Tool\u0153], \u0153type\u0153: \u0153other\u0153}"
                },
                {
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "YfinanceComponent",
                            "id": "YfinanceComponent-P0VBm",
                            "name": "component_as_tool",
                            "output_types": [
                                "Tool"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "tools",
                            "id": "Agent-RmOB2",
                            "inputTypes": [
                                "Tool"
                            ],
                            "type": "other"
                        }
                    },
                    "id": "reactflow__edge-YfinanceComponent-P0VBm{\u0153dataType\u0153:\u0153YfinanceComponent\u0153,\u0153id\u0153:\u0153YfinanceComponent-P0VBm\u0153,\u0153name\u0153:\u0153component_as_tool\u0153,\u0153output_types\u0153:[\u0153Tool\u0153]}-Agent-RmOB2{\u0153fieldName\u0153:\u0153tools\u0153,\u0153id\u0153:\u0153Agent-RmOB2\u0153,\u0153inputTypes\u0153:[\u0153Tool\u0153],\u0153type\u0153:\u0153other\u0153}",
                    "source": "YfinanceComponent-P0VBm",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153YfinanceComponent\u0153, \u0153id\u0153: \u0153YfinanceComponent-P0VBm\u0153, \u0153name\u0153: \u0153component_as_tool\u0153, \u0153output_types\u0153: [\u0153Tool\u0153]}",
                    "target": "Agent-RmOB2",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153tools\u0153, \u0153id\u0153: \u0153Agent-RmOB2\u0153, \u0153inputTypes\u0153: [\u0153Tool\u0153], \u0153type\u0153: \u0153other\u0153}"
                },
                {
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "TavilySearchComponent",
                            "id": "TavilySearchComponent-ZgS55",
                            "name": "component_as_tool",
                            "output_types": [
                                "Tool"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "tools",
                            "id": "Agent-TmQ5O",
                            "inputTypes": [
                                "Tool"
                            ],
                            "type": "other"
                        }
                    },
                    "id": "reactflow__edge-TavilySearchComponent-ZgS55{\u0153dataType\u0153:\u0153TavilySearchComponent\u0153,\u0153id\u0153:\u0153TavilySearchComponent-ZgS55\u0153,\u0153name\u0153:\u0153component_as_tool\u0153,\u0153output_types\u0153:[\u0153Tool\u0153]}-Agent-TmQ5O{\u0153fieldName\u0153:\u0153tools\u0153,\u0153id\u0153:\u0153Agent-TmQ5O\u0153,\u0153inputTypes\u0153:[\u0153Tool\u0153],\u0153type\u0153:\u0153other\u0153}",
                    "source": "TavilySearchComponent-ZgS55",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153TavilySearchComponent\u0153, \u0153id\u0153: \u0153TavilySearchComponent-ZgS55\u0153, \u0153name\u0153: \u0153component_as_tool\u0153, \u0153output_types\u0153: [\u0153Tool\u0153]}",
                    "target": "Agent-TmQ5O",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153tools\u0153, \u0153id\u0153: \u0153Agent-TmQ5O\u0153, \u0153inputTypes\u0153: [\u0153Tool\u0153], \u0153type\u0153: \u0153other\u0153}"
                }
            ],
            "nodes": [
                {
                    "data": {
                        "description": "Display a chat message in the Playground.",
                        "display_name": "Chat Output",
                        "id": "ChatOutput-DqyyQ",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Display a chat message in the Playground.",
                            "display_name": "Chat Output",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "input_value",
                                "should_store_message",
                                "sender",
                                "sender_name",
                                "session_id",
                                "data_template",
                                "background_color",
                                "chat_icon",
                                "text_color"
                            ],
                            "frozen": false,
                            "icon": "MessagesSquare",
                            "legacy": false,
                            "lf_version": "1.0.19.post2",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "message_response",
                                    "name": "message",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "background_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Background Color",
                                    "dynamic": false,
                                    "info": "The background color of the icon.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "background_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "chat_icon": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Icon",
                                    "dynamic": false,
                                    "info": "The icon of the message.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "chat_icon",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, MessageInput, MessageTextInput, Output\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        MessageInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            source_dict[\"source\"] = source\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n        background_color = self.background_color\n        text_color = self.text_color\n        if self.chat_icon:\n            icon = self.chat_icon\n        message = self.input_value if isinstance(self.input_value, Message) else Message(text=self.input_value)\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n        message.properties.icon = icon\n        message.properties.background_color = background_color\n        message.properties.text_color = text_color\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n"
                                },
                                "data_template": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Data Template",
                                    "dynamic": false,
                                    "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "data_template",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "{text}"
                                },
                                "input_value": {
                                    "_input_type": "MessageInput",
                                    "advanced": false,
                                    "display_name": "Text",
                                    "dynamic": false,
                                    "info": "Message to be passed as output.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "sender": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Sender Type",
                                    "dynamic": false,
                                    "info": "Type of sender.",
                                    "name": "sender",
                                    "options": [
                                        "Machine",
                                        "User"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Machine"
                                },
                                "sender_name": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Sender Name",
                                    "dynamic": false,
                                    "info": "Name of the sender.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "sender_name",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "AI"
                                },
                                "session_id": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Session ID",
                                    "dynamic": false,
                                    "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "session_id",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "should_store_message": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Store Messages",
                                    "dynamic": false,
                                    "info": "Store the message in the history.",
                                    "list": false,
                                    "name": "should_store_message",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "text_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Text Color",
                                    "dynamic": false,
                                    "info": "The text color of the name",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "text_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "ChatOutput"
                    },
                    "dragging": false,
                    "height": 234,
                    "id": "ChatOutput-DqyyQ",
                    "measured": {
                        "height": 234,
                        "width": 360
                    },
                    "position": {
                        "x": 1239.222567317785,
                        "y": -920.0283175735606
                    },
                    "positionAbsolute": {
                        "x": 1239.222567317785,
                        "y": -920.0283175735606
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "description": "Define the agent's instructions, then enter a task to complete using tools.",
                        "display_name": "Finance Agent",
                        "id": "Agent-RmOB2",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Define the agent's instructions, then enter a task to complete using tools.",
                            "display_name": "Finance Agent",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "agent_llm",
                                "max_tokens",
                                "model_kwargs",
                                "json_mode",
                                "output_schema",
                                "model_name",
                                "openai_api_base",
                                "api_key",
                                "temperature",
                                "seed",
                                "output_parser",
                                "system_prompt",
                                "tools",
                                "input_value",
                                "handle_parsing_errors",
                                "verbose",
                                "max_iterations",
                                "agent_description",
                                "memory",
                                "sender",
                                "sender_name",
                                "n_messages",
                                "session_id",
                                "order",
                                "template",
                                "add_current_date_tool"
                            ],
                            "frozen": false,
                            "icon": "bot",
                            "legacy": false,
                            "lf_version": "1.0.19.post2",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Response",
                                    "method": "message_response",
                                    "name": "response",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "add_current_date_tool": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Current Date",
                                    "dynamic": false,
                                    "info": "If true, will add a tool to the agent that returns the current date.",
                                    "list": false,
                                    "name": "add_current_date_tool",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "agent_description": {
                                    "_input_type": "MultilineInput",
                                    "advanced": true,
                                    "display_name": "Agent Description [Deprecated]",
                                    "dynamic": false,
                                    "info": "The description of the agent. This is only used when in Tool Mode. Defaults to 'A helpful assistant with access to the following tools:' and tools are added dynamically. This feature is deprecated and will be removed in future versions.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "agent_description",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "A helpful assistant with access to the following tools:"
                                },
                                "agent_llm": {
                                    "_input_type": "DropdownInput",
                                    "advanced": false,
                                    "combobox": false,
                                    "display_name": "Model Provider",
                                    "dynamic": false,
                                    "info": "The provider of the language model that the agent will use to generate responses.",
                                    "input_types": [],
                                    "name": "agent_llm",
                                    "options": [
                                        "Amazon Bedrock",
                                        "Anthropic",
                                        "Azure OpenAI",
                                        "Google Generative AI",
                                        "Groq",
                                        "NVIDIA",
                                        "OpenAI",
                                        "Custom"
                                    ],
                                    "placeholder": "",
                                    "real_time_refresh": true,
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "OpenAI"
                                },
                                "api_key": {
                                    "_input_type": "SecretStrInput",
                                    "advanced": false,
                                    "display_name": "OpenAI API Key",
                                    "dynamic": false,
                                    "info": "The OpenAI API Key to use for the OpenAI model.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "load_from_db": true,
                                    "name": "api_key",
                                    "password": true,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": "OPENAI_API_KEY"
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langchain_core.tools import StructuredTool\n\nfrom langflow.base.agents.agent import LCToolsAgentComponent\nfrom langflow.base.models.model_input_constants import (\n    ALL_PROVIDER_FIELDS,\n    MODEL_DYNAMIC_UPDATE_FIELDS,\n    MODEL_PROVIDERS_DICT,\n)\nfrom langflow.base.models.model_utils import get_model_name\nfrom langflow.components.helpers import CurrentDateComponent\nfrom langflow.components.helpers.memory import MemoryComponent\nfrom langflow.components.langchain_utilities.tool_calling import ToolCallingAgentComponent\nfrom langflow.custom.utils import update_component_build_config\nfrom langflow.io import BoolInput, DropdownInput, MultilineInput, Output\nfrom langflow.logging import logger\nfrom langflow.schema.dotdict import dotdict\nfrom langflow.schema.message import Message\n\n\ndef set_advanced_true(component_input):\n    component_input.advanced = True\n    return component_input\n\n\nclass AgentComponent(ToolCallingAgentComponent):\n    display_name: str = \"Agent\"\n    description: str = \"Define the agent's instructions, then enter a task to complete using tools.\"\n    icon = \"bot\"\n    beta = False\n    name = \"Agent\"\n\n    memory_inputs = [set_advanced_true(component_input) for component_input in MemoryComponent().inputs]\n\n    inputs = [\n        DropdownInput(\n            name=\"agent_llm\",\n            display_name=\"Model Provider\",\n            info=\"The provider of the language model that the agent will use to generate responses.\",\n            options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n            value=\"OpenAI\",\n            real_time_refresh=True,\n            input_types=[],\n        ),\n        *MODEL_PROVIDERS_DICT[\"OpenAI\"][\"inputs\"],\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=\"Agent Instructions\",\n            info=\"System Prompt: Initial instructions and context provided to guide the agent's behavior.\",\n            value=\"You are a helpful assistant that can use tools to answer questions and perform tasks.\",\n            advanced=False,\n        ),\n        *LCToolsAgentComponent._base_inputs,\n        *memory_inputs,\n        BoolInput(\n            name=\"add_current_date_tool\",\n            display_name=\"Current Date\",\n            advanced=True,\n            info=\"If true, will add a tool to the agent that returns the current date.\",\n            value=True,\n        ),\n    ]\n    outputs = [Output(name=\"response\", display_name=\"Response\", method=\"message_response\")]\n\n    async def message_response(self) -> Message:\n        try:\n            llm_model, display_name = self.get_llm()\n            if llm_model is None:\n                msg = \"No language model selected\"\n                raise ValueError(msg)\n            self.model_name = get_model_name(llm_model, display_name=display_name)\n        except Exception as e:\n            # Log the error for debugging purposes\n            logger.error(f\"Error retrieving language model: {e}\")\n            raise\n\n        try:\n            self.chat_history = await self.get_memory_data()\n        except Exception as e:\n            logger.error(f\"Error retrieving chat history: {e}\")\n            raise\n\n        if self.add_current_date_tool:\n            try:\n                if not isinstance(self.tools, list):  # type: ignore[has-type]\n                    self.tools = []\n                # Convert CurrentDateComponent to a StructuredTool\n                current_date_tool = (await CurrentDateComponent().to_toolkit()).pop(0)\n                # current_date_tool = CurrentDateComponent().to_toolkit()[0]\n                if isinstance(current_date_tool, StructuredTool):\n                    self.tools.append(current_date_tool)\n                else:\n                    msg = \"CurrentDateComponent must be converted to a StructuredTool\"\n                    raise TypeError(msg)\n            except Exception as e:\n                logger.error(f\"Error adding current date tool: {e}\")\n                raise\n\n        if not self.tools:\n            msg = \"Tools are required to run the agent.\"\n            logger.error(msg)\n            raise ValueError(msg)\n\n        try:\n            self.set(\n                llm=llm_model,\n                tools=self.tools,\n                chat_history=self.chat_history,\n                input_value=self.input_value,\n                system_prompt=self.system_prompt,\n            )\n            agent = self.create_agent_runnable()\n        except Exception as e:\n            logger.error(f\"Error setting up the agent: {e}\")\n            raise\n\n        return await self.run_agent(agent)\n\n    async def get_memory_data(self):\n        memory_kwargs = {\n            component_input.name: getattr(self, f\"{component_input.name}\") for component_input in self.memory_inputs\n        }\n        # filter out empty values\n        memory_kwargs = {k: v for k, v in memory_kwargs.items() if v}\n\n        return await MemoryComponent().set(**memory_kwargs).retrieve_messages()\n\n    def get_llm(self):\n        if isinstance(self.agent_llm, str):\n            try:\n                provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n                if provider_info:\n                    component_class = provider_info.get(\"component_class\")\n                    display_name = component_class.display_name\n                    inputs = provider_info.get(\"inputs\")\n                    prefix = provider_info.get(\"prefix\", \"\")\n                    return (\n                        self._build_llm_model(component_class, inputs, prefix),\n                        display_name,\n                    )\n            except Exception as e:\n                msg = f\"Error building {self.agent_llm} language model\"\n                raise ValueError(msg) from e\n        return self.agent_llm, None\n\n    def _build_llm_model(self, component, inputs, prefix=\"\"):\n        model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n        return component.set(**model_kwargs).build_model()\n\n    def set_component_params(self, component):\n        provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n        if provider_info:\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\")\n            model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n\n            return component.set(**model_kwargs)\n        return component\n\n    def delete_fields(self, build_config: dotdict, fields: dict | list[str]) -> None:\n        \"\"\"Delete specified fields from build_config.\"\"\"\n        for field in fields:\n            build_config.pop(field, None)\n\n    def update_input_types(self, build_config: dotdict) -> dotdict:\n        \"\"\"Update input types for all fields in build_config.\"\"\"\n        for key, value in build_config.items():\n            if isinstance(value, dict):\n                if value.get(\"input_types\") is None:\n                    build_config[key][\"input_types\"] = []\n            elif hasattr(value, \"input_types\") and value.input_types is None:\n                value.input_types = []\n        return build_config\n\n    async def update_build_config(\n        self, build_config: dotdict, field_value: str, field_name: str | None = None\n    ) -> dotdict:\n        # Iterate over all providers in the MODEL_PROVIDERS_DICT\n        # Existing logic for updating build_config\n        if field_name in (\"agent_llm\",):\n            build_config[\"agent_llm\"][\"value\"] = field_value\n            provider_info = MODEL_PROVIDERS_DICT.get(field_value)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call the component class's update_build_config method\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n\n            provider_configs: dict[str, tuple[dict, list[dict]]] = {\n                provider: (\n                    MODEL_PROVIDERS_DICT[provider][\"fields\"],\n                    [\n                        MODEL_PROVIDERS_DICT[other_provider][\"fields\"]\n                        for other_provider in MODEL_PROVIDERS_DICT\n                        if other_provider != provider\n                    ],\n                )\n                for provider in MODEL_PROVIDERS_DICT\n            }\n            if field_value in provider_configs:\n                fields_to_add, fields_to_delete = provider_configs[field_value]\n\n                # Delete fields from other providers\n                for fields in fields_to_delete:\n                    self.delete_fields(build_config, fields)\n\n                # Add provider-specific fields\n                if field_value == \"OpenAI\" and not any(field in build_config for field in fields_to_add):\n                    build_config.update(fields_to_add)\n                else:\n                    build_config.update(fields_to_add)\n                # Reset input types for agent_llm\n                build_config[\"agent_llm\"][\"input_types\"] = []\n            elif field_value == \"Custom\":\n                # Delete all provider fields\n                self.delete_fields(build_config, ALL_PROVIDER_FIELDS)\n                # Update with custom component\n                custom_component = DropdownInput(\n                    name=\"agent_llm\",\n                    display_name=\"Language Model\",\n                    options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n                    value=\"Custom\",\n                    real_time_refresh=True,\n                    input_types=[\"LanguageModel\"],\n                )\n                build_config.update({\"agent_llm\": custom_component.to_dict()})\n            # Update input types for all fields\n            build_config = self.update_input_types(build_config)\n\n            # Validate required keys\n            default_keys = [\n                \"code\",\n                \"_type\",\n                \"agent_llm\",\n                \"tools\",\n                \"input_value\",\n                \"add_current_date_tool\",\n                \"system_prompt\",\n                \"agent_description\",\n                \"max_iterations\",\n                \"handle_parsing_errors\",\n                \"verbose\",\n            ]\n            missing_keys = [key for key in default_keys if key not in build_config]\n            if missing_keys:\n                msg = f\"Missing required keys in build_config: {missing_keys}\"\n                raise ValueError(msg)\n        if (\n            isinstance(self.agent_llm, str)\n            and self.agent_llm in MODEL_PROVIDERS_DICT\n            and field_name in MODEL_DYNAMIC_UPDATE_FIELDS\n        ):\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                component_class = self.set_component_params(component_class)\n                prefix = provider_info.get(\"prefix\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call each component class's update_build_config method\n                    # remove the prefix from the field_name\n                    if isinstance(field_name, str) and isinstance(prefix, str):\n                        field_name = field_name.replace(prefix, \"\")\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n        return dotdict({k: v.to_dict() if hasattr(v, \"to_dict\") else v for k, v in build_config.items()})\n"
                                },
                                "handle_parsing_errors": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Handle Parse Errors",
                                    "dynamic": false,
                                    "info": "Should the Agent fix errors when reading user input for better processing?",
                                    "list": false,
                                    "name": "handle_parsing_errors",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "input_value": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": false,
                                    "display_name": "Input",
                                    "dynamic": false,
                                    "info": "The input provided by the user for the agent to process.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": true,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "json_mode": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "JSON Mode",
                                    "dynamic": false,
                                    "info": "If True, it will output JSON regardless of passing a schema.",
                                    "list": false,
                                    "name": "json_mode",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "max_iterations": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Max Iterations",
                                    "dynamic": false,
                                    "info": "The maximum number of attempts the agent can make to complete its task before it stops.",
                                    "list": false,
                                    "name": "max_iterations",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 15
                                },
                                "max_tokens": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Max Tokens",
                                    "dynamic": false,
                                    "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                                    "list": false,
                                    "name": "max_tokens",
                                    "placeholder": "",
                                    "range_spec": {
                                        "max": 128000,
                                        "min": 0,
                                        "step": 0.1,
                                        "step_type": "float"
                                    },
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": ""
                                },
                                "memory": {
                                    "_input_type": "HandleInput",
                                    "advanced": true,
                                    "display_name": "External Memory",
                                    "dynamic": false,
                                    "info": "Retrieve messages from an external memory. If empty, it will use the Langflow tables.",
                                    "input_types": [
                                        "Memory"
                                    ],
                                    "list": false,
                                    "name": "memory",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "other",
                                    "value": ""
                                },
                                "model_kwargs": {
                                    "_input_type": "DictInput",
                                    "advanced": true,
                                    "display_name": "Model Kwargs",
                                    "dynamic": false,
                                    "info": "Additional keyword arguments to pass to the model.",
                                    "list": false,
                                    "name": "model_kwargs",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "type": "dict",
                                    "value": {}
                                },
                                "model_name": {
                                    "_input_type": "DropdownInput",
                                    "advanced": false,
                                    "combobox": true,
                                    "display_name": "Model Name",
                                    "dynamic": false,
                                    "info": "To see the model names, first choose a provider. Then, enter your API key and click the refresh button next to the model name.",
                                    "name": "model_name",
                                    "options": [
                                        "gpt-4o-mini",
                                        "gpt-4o",
                                        "gpt-4-turbo",
                                        "gpt-4-turbo-preview",
                                        "gpt-4",
                                        "gpt-3.5-turbo",
                                        "gpt-3.5-turbo-0125"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "gpt-4o-mini"
                                },
                                "n_messages": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Number of Messages",
                                    "dynamic": false,
                                    "info": "Number of messages to retrieve.",
                                    "list": false,
                                    "name": "n_messages",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 100
                                },
                                "openai_api_base": {
                                    "_input_type": "StrInput",
                                    "advanced": true,
                                    "display_name": "OpenAI API Base",
                                    "dynamic": false,
                                    "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "openai_api_base",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "order": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Order",
                                    "dynamic": false,
                                    "info": "Order of the messages.",
                                    "name": "order",
                                    "options": [
                                        "Ascending",
                                        "Descending"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Ascending"
                                },
                                "seed": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Seed",
                                    "dynamic": false,
                                    "info": "The seed controls the reproducibility of the job.",
                                    "list": false,
                                    "name": "seed",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 1
                                },
                                "sender": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Sender Type",
                                    "dynamic": false,
                                    "info": "Filter by sender type.",
                                    "name": "sender",
                                    "options": [
                                        "Machine",
                                        "User",
                                        "Machine and User"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Machine and User"
                                },
                                "sender_name": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Sender Name",
                                    "dynamic": false,
                                    "info": "Filter by sender name.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "sender_name",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Finance Agent"
                                },
                                "session_id": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Session ID",
                                    "dynamic": false,
                                    "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "session_id",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "system_prompt": {
                                    "_input_type": "MultilineInput",
                                    "advanced": false,
                                    "display_name": "Agent Instructions",
                                    "dynamic": false,
                                    "info": "System Prompt: Initial instructions and context provided to guide the agent's behavior.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "system_prompt",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "You are the chief editor of a prestigious publication known for transforming complex information into clear, engaging content. Review and refine the researcher's document about {topic}.\n\nYour editing process should:\n- Verify and challenge any questionable claims\n- Restructure content for better flow and readability\n- Remove redundancies and unclear statements\n- Add context where needed\n- Ensure balanced coverage of the topic\n- Transform technical language into accessible explanations\n\nMaintain high editorial standards while making the content engaging for an educated general audience. Present the revised version in a clean, well-structured format."
                                },
                                "temperature": {
                                    "_input_type": "FloatInput",
                                    "advanced": true,
                                    "display_name": "Temperature",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "name": "temperature",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "float",
                                    "value": 0.1
                                },
                                "template": {
                                    "_input_type": "MultilineInput",
                                    "advanced": true,
                                    "display_name": "Template",
                                    "dynamic": false,
                                    "info": "The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "template",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "{sender_name}: {text}"
                                },
                                "tools": {
                                    "_input_type": "HandleInput",
                                    "advanced": false,
                                    "display_name": "Tools",
                                    "dynamic": false,
                                    "info": "These are the tools that the agent can use to help with tasks.",
                                    "input_types": [
                                        "Tool"
                                    ],
                                    "list": true,
                                    "name": "tools",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "other",
                                    "value": ""
                                },
                                "verbose": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Verbose",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "name": "verbose",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "Agent"
                    },
                    "dragging": false,
                    "height": 650,
                    "id": "Agent-RmOB2",
                    "measured": {
                        "height": 650,
                        "width": 360
                    },
                    "position": {
                        "x": 45.70736046026991,
                        "y": -1369.035463408626
                    },
                    "positionAbsolute": {
                        "x": 45.70736046026991,
                        "y": -1369.035463408626
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "description": "Define the agent's instructions, then enter a task to complete using tools.",
                        "display_name": "Analysis & Editor Agent",
                        "id": "Agent-9YXRo",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Define the agent's instructions, then enter a task to complete using tools.",
                            "display_name": "Analysis & Editor Agent",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "agent_llm",
                                "max_tokens",
                                "model_kwargs",
                                "json_mode",
                                "output_schema",
                                "model_name",
                                "openai_api_base",
                                "api_key",
                                "temperature",
                                "seed",
                                "output_parser",
                                "system_prompt",
                                "tools",
                                "input_value",
                                "handle_parsing_errors",
                                "verbose",
                                "max_iterations",
                                "agent_description",
                                "memory",
                                "sender",
                                "sender_name",
                                "n_messages",
                                "session_id",
                                "order",
                                "template",
                                "add_current_date_tool"
                            ],
                            "frozen": false,
                            "icon": "bot",
                            "legacy": false,
                            "lf_version": "1.0.19.post2",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Response",
                                    "method": "message_response",
                                    "name": "response",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "add_current_date_tool": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Current Date",
                                    "dynamic": false,
                                    "info": "If true, will add a tool to the agent that returns the current date.",
                                    "list": false,
                                    "name": "add_current_date_tool",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "agent_description": {
                                    "_input_type": "MultilineInput",
                                    "advanced": true,
                                    "display_name": "Agent Description [Deprecated]",
                                    "dynamic": false,
                                    "info": "The description of the agent. This is only used when in Tool Mode. Defaults to 'A helpful assistant with access to the following tools:' and tools are added dynamically. This feature is deprecated and will be removed in future versions.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "agent_description",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "A helpful assistant with access to the following tools:"
                                },
                                "agent_llm": {
                                    "_input_type": "DropdownInput",
                                    "advanced": false,
                                    "combobox": false,
                                    "display_name": "Model Provider",
                                    "dynamic": false,
                                    "info": "The provider of the language model that the agent will use to generate responses.",
                                    "input_types": [],
                                    "name": "agent_llm",
                                    "options": [
                                        "Amazon Bedrock",
                                        "Anthropic",
                                        "Azure OpenAI",
                                        "Google Generative AI",
                                        "Groq",
                                        "NVIDIA",
                                        "OpenAI",
                                        "Custom"
                                    ],
                                    "placeholder": "",
                                    "real_time_refresh": true,
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "OpenAI"
                                },
                                "api_key": {
                                    "_input_type": "SecretStrInput",
                                    "advanced": false,
                                    "display_name": "OpenAI API Key",
                                    "dynamic": false,
                                    "info": "The OpenAI API Key to use for the OpenAI model.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "load_from_db": true,
                                    "name": "api_key",
                                    "password": true,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": "OPENAI_API_KEY"
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langchain_core.tools import StructuredTool\n\nfrom langflow.base.agents.agent import LCToolsAgentComponent\nfrom langflow.base.models.model_input_constants import (\n    ALL_PROVIDER_FIELDS,\n    MODEL_DYNAMIC_UPDATE_FIELDS,\n    MODEL_PROVIDERS_DICT,\n)\nfrom langflow.base.models.model_utils import get_model_name\nfrom langflow.components.helpers import CurrentDateComponent\nfrom langflow.components.helpers.memory import MemoryComponent\nfrom langflow.components.langchain_utilities.tool_calling import ToolCallingAgentComponent\nfrom langflow.custom.utils import update_component_build_config\nfrom langflow.io import BoolInput, DropdownInput, MultilineInput, Output\nfrom langflow.logging import logger\nfrom langflow.schema.dotdict import dotdict\nfrom langflow.schema.message import Message\n\n\ndef set_advanced_true(component_input):\n    component_input.advanced = True\n    return component_input\n\n\nclass AgentComponent(ToolCallingAgentComponent):\n    display_name: str = \"Agent\"\n    description: str = \"Define the agent's instructions, then enter a task to complete using tools.\"\n    icon = \"bot\"\n    beta = False\n    name = \"Agent\"\n\n    memory_inputs = [set_advanced_true(component_input) for component_input in MemoryComponent().inputs]\n\n    inputs = [\n        DropdownInput(\n            name=\"agent_llm\",\n            display_name=\"Model Provider\",\n            info=\"The provider of the language model that the agent will use to generate responses.\",\n            options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n            value=\"OpenAI\",\n            real_time_refresh=True,\n            input_types=[],\n        ),\n        *MODEL_PROVIDERS_DICT[\"OpenAI\"][\"inputs\"],\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=\"Agent Instructions\",\n            info=\"System Prompt: Initial instructions and context provided to guide the agent's behavior.\",\n            value=\"You are a helpful assistant that can use tools to answer questions and perform tasks.\",\n            advanced=False,\n        ),\n        *LCToolsAgentComponent._base_inputs,\n        *memory_inputs,\n        BoolInput(\n            name=\"add_current_date_tool\",\n            display_name=\"Current Date\",\n            advanced=True,\n            info=\"If true, will add a tool to the agent that returns the current date.\",\n            value=True,\n        ),\n    ]\n    outputs = [Output(name=\"response\", display_name=\"Response\", method=\"message_response\")]\n\n    async def message_response(self) -> Message:\n        try:\n            llm_model, display_name = self.get_llm()\n            if llm_model is None:\n                msg = \"No language model selected\"\n                raise ValueError(msg)\n            self.model_name = get_model_name(llm_model, display_name=display_name)\n        except Exception as e:\n            # Log the error for debugging purposes\n            logger.error(f\"Error retrieving language model: {e}\")\n            raise\n\n        try:\n            self.chat_history = await self.get_memory_data()\n        except Exception as e:\n            logger.error(f\"Error retrieving chat history: {e}\")\n            raise\n\n        if self.add_current_date_tool:\n            try:\n                if not isinstance(self.tools, list):  # type: ignore[has-type]\n                    self.tools = []\n                # Convert CurrentDateComponent to a StructuredTool\n                current_date_tool = (await CurrentDateComponent().to_toolkit()).pop(0)\n                # current_date_tool = CurrentDateComponent().to_toolkit()[0]\n                if isinstance(current_date_tool, StructuredTool):\n                    self.tools.append(current_date_tool)\n                else:\n                    msg = \"CurrentDateComponent must be converted to a StructuredTool\"\n                    raise TypeError(msg)\n            except Exception as e:\n                logger.error(f\"Error adding current date tool: {e}\")\n                raise\n\n        if not self.tools:\n            msg = \"Tools are required to run the agent.\"\n            logger.error(msg)\n            raise ValueError(msg)\n\n        try:\n            self.set(\n                llm=llm_model,\n                tools=self.tools,\n                chat_history=self.chat_history,\n                input_value=self.input_value,\n                system_prompt=self.system_prompt,\n            )\n            agent = self.create_agent_runnable()\n        except Exception as e:\n            logger.error(f\"Error setting up the agent: {e}\")\n            raise\n\n        return await self.run_agent(agent)\n\n    async def get_memory_data(self):\n        memory_kwargs = {\n            component_input.name: getattr(self, f\"{component_input.name}\") for component_input in self.memory_inputs\n        }\n        # filter out empty values\n        memory_kwargs = {k: v for k, v in memory_kwargs.items() if v}\n\n        return await MemoryComponent().set(**memory_kwargs).retrieve_messages()\n\n    def get_llm(self):\n        if isinstance(self.agent_llm, str):\n            try:\n                provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n                if provider_info:\n                    component_class = provider_info.get(\"component_class\")\n                    display_name = component_class.display_name\n                    inputs = provider_info.get(\"inputs\")\n                    prefix = provider_info.get(\"prefix\", \"\")\n                    return (\n                        self._build_llm_model(component_class, inputs, prefix),\n                        display_name,\n                    )\n            except Exception as e:\n                msg = f\"Error building {self.agent_llm} language model\"\n                raise ValueError(msg) from e\n        return self.agent_llm, None\n\n    def _build_llm_model(self, component, inputs, prefix=\"\"):\n        model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n        return component.set(**model_kwargs).build_model()\n\n    def set_component_params(self, component):\n        provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n        if provider_info:\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\")\n            model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n\n            return component.set(**model_kwargs)\n        return component\n\n    def delete_fields(self, build_config: dotdict, fields: dict | list[str]) -> None:\n        \"\"\"Delete specified fields from build_config.\"\"\"\n        for field in fields:\n            build_config.pop(field, None)\n\n    def update_input_types(self, build_config: dotdict) -> dotdict:\n        \"\"\"Update input types for all fields in build_config.\"\"\"\n        for key, value in build_config.items():\n            if isinstance(value, dict):\n                if value.get(\"input_types\") is None:\n                    build_config[key][\"input_types\"] = []\n            elif hasattr(value, \"input_types\") and value.input_types is None:\n                value.input_types = []\n        return build_config\n\n    async def update_build_config(\n        self, build_config: dotdict, field_value: str, field_name: str | None = None\n    ) -> dotdict:\n        # Iterate over all providers in the MODEL_PROVIDERS_DICT\n        # Existing logic for updating build_config\n        if field_name in (\"agent_llm\",):\n            build_config[\"agent_llm\"][\"value\"] = field_value\n            provider_info = MODEL_PROVIDERS_DICT.get(field_value)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call the component class's update_build_config method\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n\n            provider_configs: dict[str, tuple[dict, list[dict]]] = {\n                provider: (\n                    MODEL_PROVIDERS_DICT[provider][\"fields\"],\n                    [\n                        MODEL_PROVIDERS_DICT[other_provider][\"fields\"]\n                        for other_provider in MODEL_PROVIDERS_DICT\n                        if other_provider != provider\n                    ],\n                )\n                for provider in MODEL_PROVIDERS_DICT\n            }\n            if field_value in provider_configs:\n                fields_to_add, fields_to_delete = provider_configs[field_value]\n\n                # Delete fields from other providers\n                for fields in fields_to_delete:\n                    self.delete_fields(build_config, fields)\n\n                # Add provider-specific fields\n                if field_value == \"OpenAI\" and not any(field in build_config for field in fields_to_add):\n                    build_config.update(fields_to_add)\n                else:\n                    build_config.update(fields_to_add)\n                # Reset input types for agent_llm\n                build_config[\"agent_llm\"][\"input_types\"] = []\n            elif field_value == \"Custom\":\n                # Delete all provider fields\n                self.delete_fields(build_config, ALL_PROVIDER_FIELDS)\n                # Update with custom component\n                custom_component = DropdownInput(\n                    name=\"agent_llm\",\n                    display_name=\"Language Model\",\n                    options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n                    value=\"Custom\",\n                    real_time_refresh=True,\n                    input_types=[\"LanguageModel\"],\n                )\n                build_config.update({\"agent_llm\": custom_component.to_dict()})\n            # Update input types for all fields\n            build_config = self.update_input_types(build_config)\n\n            # Validate required keys\n            default_keys = [\n                \"code\",\n                \"_type\",\n                \"agent_llm\",\n                \"tools\",\n                \"input_value\",\n                \"add_current_date_tool\",\n                \"system_prompt\",\n                \"agent_description\",\n                \"max_iterations\",\n                \"handle_parsing_errors\",\n                \"verbose\",\n            ]\n            missing_keys = [key for key in default_keys if key not in build_config]\n            if missing_keys:\n                msg = f\"Missing required keys in build_config: {missing_keys}\"\n                raise ValueError(msg)\n        if (\n            isinstance(self.agent_llm, str)\n            and self.agent_llm in MODEL_PROVIDERS_DICT\n            and field_name in MODEL_DYNAMIC_UPDATE_FIELDS\n        ):\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                component_class = self.set_component_params(component_class)\n                prefix = provider_info.get(\"prefix\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call each component class's update_build_config method\n                    # remove the prefix from the field_name\n                    if isinstance(field_name, str) and isinstance(prefix, str):\n                        field_name = field_name.replace(prefix, \"\")\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n        return dotdict({k: v.to_dict() if hasattr(v, \"to_dict\") else v for k, v in build_config.items()})\n"
                                },
                                "handle_parsing_errors": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Handle Parse Errors",
                                    "dynamic": false,
                                    "info": "Should the Agent fix errors when reading user input for better processing?",
                                    "list": false,
                                    "name": "handle_parsing_errors",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "input_value": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": false,
                                    "display_name": "Input",
                                    "dynamic": false,
                                    "info": "The input provided by the user for the agent to process.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": true,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Start the analysis"
                                },
                                "json_mode": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "JSON Mode",
                                    "dynamic": false,
                                    "info": "If True, it will output JSON regardless of passing a schema.",
                                    "list": false,
                                    "name": "json_mode",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "max_iterations": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Max Iterations",
                                    "dynamic": false,
                                    "info": "The maximum number of attempts the agent can make to complete its task before it stops.",
                                    "list": false,
                                    "name": "max_iterations",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 15
                                },
                                "max_tokens": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Max Tokens",
                                    "dynamic": false,
                                    "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                                    "list": false,
                                    "name": "max_tokens",
                                    "placeholder": "",
                                    "range_spec": {
                                        "max": 128000,
                                        "min": 0,
                                        "step": 0.1,
                                        "step_type": "float"
                                    },
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": ""
                                },
                                "memory": {
                                    "_input_type": "HandleInput",
                                    "advanced": true,
                                    "display_name": "External Memory",
                                    "dynamic": false,
                                    "info": "Retrieve messages from an external memory. If empty, it will use the Langflow tables.",
                                    "input_types": [
                                        "Memory"
                                    ],
                                    "list": false,
                                    "name": "memory",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "other",
                                    "value": ""
                                },
                                "model_kwargs": {
                                    "_input_type": "DictInput",
                                    "advanced": true,
                                    "display_name": "Model Kwargs",
                                    "dynamic": false,
                                    "info": "Additional keyword arguments to pass to the model.",
                                    "list": false,
                                    "name": "model_kwargs",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "type": "dict",
                                    "value": {}
                                },
                                "model_name": {
                                    "_input_type": "DropdownInput",
                                    "advanced": false,
                                    "combobox": true,
                                    "display_name": "Model Name",
                                    "dynamic": false,
                                    "info": "To see the model names, first choose a provider. Then, enter your API key and click the refresh button next to the model name.",
                                    "name": "model_name",
                                    "options": [
                                        "gpt-4o-mini",
                                        "gpt-4o",
                                        "gpt-4-turbo",
                                        "gpt-4-turbo-preview",
                                        "gpt-4",
                                        "gpt-3.5-turbo",
                                        "gpt-3.5-turbo-0125"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "gpt-4o-mini"
                                },
                                "n_messages": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Number of Messages",
                                    "dynamic": false,
                                    "info": "Number of messages to retrieve.",
                                    "list": false,
                                    "name": "n_messages",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 100
                                },
                                "openai_api_base": {
                                    "_input_type": "StrInput",
                                    "advanced": true,
                                    "display_name": "OpenAI API Base",
                                    "dynamic": false,
                                    "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "openai_api_base",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "order": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Order",
                                    "dynamic": false,
                                    "info": "Order of the messages.",
                                    "name": "order",
                                    "options": [
                                        "Ascending",
                                        "Descending"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Ascending"
                                },
                                "seed": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Seed",
                                    "dynamic": false,
                                    "info": "The seed controls the reproducibility of the job.",
                                    "list": false,
                                    "name": "seed",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 1
                                },
                                "sender": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Sender Type",
                                    "dynamic": false,
                                    "info": "Filter by sender type.",
                                    "name": "sender",
                                    "options": [
                                        "Machine",
                                        "User",
                                        "Machine and User"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Machine and User"
                                },
                                "sender_name": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Sender Name",
                                    "dynamic": false,
                                    "info": "Filter by sender name.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "sender_name",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Analysis & Editor Agent"
                                },
                                "session_id": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Session ID",
                                    "dynamic": false,
                                    "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "session_id",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "system_prompt": {
                                    "_input_type": "MultilineInput",
                                    "advanced": false,
                                    "display_name": "Agent Instructions",
                                    "dynamic": false,
                                    "info": "System Prompt: Initial instructions and context provided to guide the agent's behavior.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "system_prompt",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "You are a brilliant comedy writer known for making complex topics entertaining and memorable. Using the editor's refined document about {topic}, create an engaging, humorous blog post.\n\nYour approach should:\n- Find unexpected angles and amusing parallels\n- Use clever wordplay and wit (avoid cheap jokes)\n- Maintain accuracy while being entertaining\n- Include relatable examples and analogies\n- Keep a smart, sophisticated tone\n- Make the topic more approachable through humor\n\nCreate a blog post that makes people laugh while actually teaching them about {topic}. The humor should enhance, not overshadow, the educational value."
                                },
                                "temperature": {
                                    "_input_type": "FloatInput",
                                    "advanced": true,
                                    "display_name": "Temperature",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "name": "temperature",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "float",
                                    "value": 0.1
                                },
                                "template": {
                                    "_input_type": "MultilineInput",
                                    "advanced": true,
                                    "display_name": "Template",
                                    "dynamic": false,
                                    "info": "The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "template",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "{sender_name}: {text}"
                                },
                                "tools": {
                                    "_input_type": "HandleInput",
                                    "advanced": false,
                                    "display_name": "Tools",
                                    "dynamic": false,
                                    "info": "These are the tools that the agent can use to help with tasks.",
                                    "input_types": [
                                        "Tool"
                                    ],
                                    "list": true,
                                    "name": "tools",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "other",
                                    "value": ""
                                },
                                "verbose": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Verbose",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "name": "verbose",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "Agent"
                    },
                    "dragging": false,
                    "height": 650,
                    "id": "Agent-9YXRo",
                    "measured": {
                        "height": 650,
                        "width": 360
                    },
                    "position": {
                        "x": 815.1900903820148,
                        "y": -1365.4053932711827
                    },
                    "positionAbsolute": {
                        "x": 815.1900903820148,
                        "y": -1365.4053932711827
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "description": "Create a prompt template with dynamic variables.",
                        "display_name": "Prompt",
                        "id": "Prompt-3fyqW",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {
                                "template": []
                            },
                            "description": "Create a prompt template with dynamic variables.",
                            "display_name": "Prompt",
                            "documentation": "",
                            "edited": false,
                            "error": null,
                            "field_order": [
                                "template"
                            ],
                            "frozen": true,
                            "full_path": null,
                            "icon": "prompts",
                            "is_composition": null,
                            "is_input": null,
                            "is_output": null,
                            "legacy": false,
                            "lf_version": "1.0.19.post2",
                            "metadata": {},
                            "name": "",
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Prompt Message",
                                    "method": "build_prompt",
                                    "name": "prompt",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import MessageTextInput, Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            tool_mode=True,\n            advanced=True,\n            info=\"A placeholder input for tool mode.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    async def update_frontend_node(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = await super().update_frontend_node(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n"
                                },
                                "template": {
                                    "_input_type": "PromptInput",
                                    "advanced": false,
                                    "display_name": "Template",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "template",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "type": "prompt",
                                    "value": "# Expert Research Agent Protocol\n\n[Previous content remains the same, but adding this critical section about image handling:]\n\n## Image and Visual Data Handling\nWhen using Tavily Search with images enabled:\n\n1. Image Collection\n   - Always enable include_images in Tavily search\n   - Collect relevant stock charts, product images, and news photos\n   - Save image URLs from reliable sources\n   - Focus on recent, high-quality images\n\n2. Image Categories to Collect\n   - Product showcase images\n   - Stock performance charts\n   - Company facilities\n   - Key executive photos\n   - Recent event images\n   - Market share visualizations\n\n3. Image Documentation\n   - Include full image URL\n   - Add clear descriptions\n   - Note image source and date\n   - Explain image relevance\n\n4. Image Presentation in Output\n   ```markdown\n   ![Image Description](image_url)\n   - Source: [Source Name]\n   - Date: [Image Date]\n   - Context: [Brief explanation of image relevance]\n   ```\n\n## Output Structure\nPresent your findings in this format:\n\n### Company Overview\n[Comprehensive overview based on search results]\n\n### Recent Developments\n[Latest news and announcements with dates]\n\n### Market Context\n[Industry trends and competitive position]\n\n### Visual Insights\n[Reference relevant images from search]\n\n### Key Risk Factors\n[Identified risks and challenges]\n\n### Sources\n[List of key sources consulted]\n\nRemember to:\n- Use Markdown formatting for clear structure\n- Include dates for all time-sensitive information\n- Quote significant statistics and statements\n- Reference any included images\n- Highlight conflicting information or viewpoints\n- Pass all gathered data to the Finance Agent for detailed financial analysis"
                                },
                                "tool_placeholder": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Tool Placeholder",
                                    "dynamic": false,
                                    "info": "A placeholder input for tool mode.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "tool_placeholder",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": true,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "Prompt"
                    },
                    "dragging": false,
                    "height": 260,
                    "id": "Prompt-3fyqW",
                    "measured": {
                        "height": 260,
                        "width": 360
                    },
                    "position": {
                        "x": -1142.2312935529987,
                        "y": -1107.442614776065
                    },
                    "positionAbsolute": {
                        "x": -1142.2312935529987,
                        "y": -1107.442614776065
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "description": "Create a prompt template with dynamic variables.",
                        "display_name": "Prompt",
                        "id": "Prompt-f4paU",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {
                                "template": []
                            },
                            "description": "Create a prompt template with dynamic variables.",
                            "display_name": "Prompt",
                            "documentation": "",
                            "edited": false,
                            "error": null,
                            "field_order": [
                                "template"
                            ],
                            "frozen": false,
                            "full_path": null,
                            "icon": "prompts",
                            "is_composition": null,
                            "is_input": null,
                            "is_output": null,
                            "legacy": false,
                            "lf_version": "1.0.19.post2",
                            "metadata": {},
                            "name": "",
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Prompt Message",
                                    "method": "build_prompt",
                                    "name": "prompt",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import MessageTextInput, Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            tool_mode=True,\n            advanced=True,\n            info=\"A placeholder input for tool mode.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    async def update_frontend_node(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = await super().update_frontend_node(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n"
                                },
                                "template": {
                                    "_input_type": "PromptInput",
                                    "advanced": false,
                                    "display_name": "Template",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "template",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "type": "prompt",
                                    "value": "# Financial Analysis Expert Protocol\n\nYou are an elite financial analyst with access to Yahoo Finance tools. Your role is to perform comprehensive financial analysis based on the research provided and the data available through Yahoo Finance methods.\n\n## CRITICAL: Stock Symbol Usage\n- Always use correct stock ticker symbols in UPPERCASE format\n- Examples of valid symbols:\n  * AAPL (Apple Inc.)\n  * MSFT (Microsoft)\n  * NVDA (NVIDIA)\n  * GOOGL (Alphabet/Google)\n  * TSLA (Tesla)\n- Invalid formats to avoid:\n  * \u274c Apple (company name instead of symbol)\n  * \u274c aapl (lowercase)\n  * \u274c $AAPL (with dollar sign)\n  * \u274c AAPL.US (with extension)\n\n## Data Collection Strategy\n\n1. Initial Symbol Verification\n   - Confirm valid stock symbol format before any analysis\n   - Use get_info first to verify symbol validity\n   - Cross-reference with get_fast_info to ensure data availability\n   - If symbol is invalid, immediately report the error\n\n2. Core Company Analysis\n   - Get basic info (get_info): Full company details\n   - Fast metrics (get_fast_info): Quick market data\n   - Earnings data (get_earnings): Performance history\n   - Calendar events (get_calendar): Upcoming events\n\n3. Financial Statement Analysis\n   - Income statements (get_income_stmt)\n   - Balance sheets (get_balance_sheet)\n   - Cash flow statements (get_cashflow)\n\n4. Market Intelligence\n   - Latest recommendations (get_recommendations)\n   - Recommendation trends (get_recommendations_summary)\n   - Recent rating changes (get_upgrades_downgrades)\n   - Breaking news (get_news, specify number of articles needed)\n\n5. Ownership Structure\n   - Institutional holdings (get_institutional_holders)\n   - Major stakeholders (get_major_holders)\n   - Fund ownership (get_mutualfund_holders)\n   - Insider activity:\n     * Recent purchases (get_insider_purchases)\n     * Transaction history (get_insider_transactions)\n     * Insider roster (get_insider_roster_holders)\n\n6. Historical Patterns\n   - Corporate actions (get_actions)\n   - Dividend history (get_dividends)\n   - Split history (get_splits)\n   - Capital gains (get_capital_gains)\n   - Regulatory filings (get_sec_filings)\n   - ESG metrics (get_sustainability)\n\n## Analysis Framework\n\n1. Profitability Metrics\n   - Revenue trends\n   - Margin analysis\n   - Efficiency ratios\n   - Return metrics\n\n2. Financial Health\n   - Liquidity ratios\n   - Debt analysis\n   - Working capital\n   - Cash flow quality\n\n3. Growth Assessment\n   - Historical rates\n   - Future projections\n   - Market opportunity\n   - Expansion plans\n\n4. Risk Evaluation\n   - Financial risks\n   - Market position\n   - Operational challenges\n   - Competitive threats\n\n## Output Structure\n\n### Symbol Information\n[Confirm stock symbol and basic company information]\n\n### Financial Overview\n[Key metrics summary with actual numbers]\n\n### Profitability Analysis\n[Detailed profit metrics with comparisons]\n\n### Balance Sheet Review\n[Asset and liability analysis]\n\n### Cash Flow Assessment\n[Cash generation and usage patterns]\n\n### Market Sentiment\n[Analyst views and institutional activity]\n\n### Growth Analysis\n[Historical and projected growth]\n\n### Risk Factors\n[Comprehensive risk assessment]\n\nRemember to:\n- ALWAYS verify stock symbol validity first\n- Use exact numbers from the data\n- Compare with industry standards\n- Highlight significant trends\n- Flag data anomalies\n- Identify key risks\n- Provide metric context\n- Focus on material information\n\nPass your comprehensive financial analysis to the Analysis & Editor Agent for final synthesis and recommendations. Include any invalid symbol errors or data availability issues in your report."
                                },
                                "tool_placeholder": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Tool Placeholder",
                                    "dynamic": false,
                                    "info": "A placeholder input for tool mode.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "tool_placeholder",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": true,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "Prompt"
                    },
                    "dragging": false,
                    "height": 260,
                    "id": "Prompt-f4paU",
                    "measured": {
                        "height": 260,
                        "width": 360
                    },
                    "position": {
                        "x": -344.9674638932195,
                        "y": -1280.1782190739505
                    },
                    "positionAbsolute": {
                        "x": -344.9674638932195,
                        "y": -1280.1782190739505
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "description": "Create a prompt template with dynamic variables.",
                        "display_name": "Prompt",
                        "id": "Prompt-xirI8",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {
                                "template": [
                                    "research_agent_output",
                                    "finance_agent_output"
                                ]
                            },
                            "description": "Create a prompt template with dynamic variables.",
                            "display_name": "Prompt",
                            "documentation": "",
                            "edited": false,
                            "error": null,
                            "field_order": [
                                "template"
                            ],
                            "frozen": false,
                            "full_path": null,
                            "icon": "prompts",
                            "is_composition": null,
                            "is_input": null,
                            "is_output": null,
                            "legacy": false,
                            "lf_version": "1.0.19.post2",
                            "metadata": {},
                            "name": "",
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Prompt Message",
                                    "method": "build_prompt",
                                    "name": "prompt",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import MessageTextInput, Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            tool_mode=True,\n            advanced=True,\n            info=\"A placeholder input for tool mode.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    async def update_frontend_node(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = await super().update_frontend_node(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n"
                                },
                                "finance_agent_output": {
                                    "advanced": false,
                                    "display_name": "finance_agent_output",
                                    "dynamic": false,
                                    "field_type": "str",
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "input_types": [
                                        "Message",
                                        "Text"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "finance_agent_output",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": ""
                                },
                                "research_agent_output": {
                                    "advanced": false,
                                    "display_name": "research_agent_output",
                                    "dynamic": false,
                                    "field_type": "str",
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "input_types": [
                                        "Message",
                                        "Text"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "research_agent_output",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": ""
                                },
                                "template": {
                                    "_input_type": "PromptInput",
                                    "advanced": false,
                                    "display_name": "Template",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "template",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "type": "prompt",
                                    "value": "# Investment Analysis & Editorial Protocol\n\nYou are an elite financial analyst and editorial expert responsible for creating the final investment analysis report. Your role is to synthesize research and financial data into a visually appealing, data-rich investment analysis using proper markdown formatting.\n\n## Input Processing\n1. Research Agent Input (Visual + Market Research):\n   - Market research and news\n   - Industry trends\n   - Competitive analysis\n   - Images and charts\n   - News sentiment\n   - {research_agent_output}\n\n2. Finance Agent Input (Quantitative Data):\n   - Detailed financial metrics\n   - Stock statistics\n   - Analyst ratings\n   - Growth metrics\n   - Risk factors\n   - {finance_agent_output}\n\n## Output Format Requirements\n\n1. Header Format\n   Use single # for main title, increment for subsections\n   \n2. Image Placement\n   - Place images immediately after relevant sections\n   - Use proper markdown format: ![Alt Text](url)\n   - Always include source and context\n   - Use *italics* for image captions\n\n3. Table Formatting\n   - Use standard markdown tables\n   - Align numbers right, text left\n   - Include header separators\n   - Keep consistent column widths\n\n4. Data Presentation\n   - Use bold (**) for key metrics\n   - Include percentage changes\n   - Show comparisons\n   - Include trends (\u2191/\u2193)\n\n## Report Structure\n\n# Investment Analysis Report: [Company Name] ($SYMBOL)\n*Generated: [Date] | Type: Comprehensive Evaluation*\n\n[Executive Summary - 3 paragraphs max]\n\n## Quick Take\n- **Recommendation**: [BUY/HOLD/SELL]\n- **Target Price**: $XXX\n- **Risk Level**: [LOW/MEDIUM/HIGH]\n- **Investment Horizon**: [SHORT/MEDIUM/LONG]-term\n\n## Market Analysis\n[Insert most relevant market image here]\n*Source: [Name] - [Context]*\n\n### Industry Position\n- Market share data\n- Competitive analysis\n- Recent developments\n\n## Financial Health\n| Metric | Value | YoY Change | Industry Avg |\n|:-------|------:|-----------:|-------------:|\n| Revenue | $XXX | XX% | $XXX |\n[Additional metrics]\n\n### Key Performance Indicators\n- **Revenue Growth**: XX%\n- **Profit Margin**: XX%\n- **ROE**: XX%\n\n## Growth Drivers\n1. Short-term Catalysts\n2. Long-term Opportunities\n3. Innovation Pipeline\n\n## Risk Assessment\n| Risk Factor | Severity | Probability | Impact |\n|:------------|:---------|:------------|:-------|\n| [Risk 1] | HIGH/MED/LOW | H/M/L | Details |\n\n## Technical Analysis\n[Insert technical chart]\n*Source: [Name] - Analysis of key technical indicators*\n\n## Investment Strategy\n### Long-term (18+ months)\n- Entry points\n- Position sizing\n- Risk management\n\n### Medium-term (6-18 months)\n- Technical levels\n- Catalysts timeline\n\n### Short-term (0-6 months)\n- Support/Resistance\n- Trading parameters\n\n## Price Targets\n- **Bear Case**: $XXX (-XX%)\n- **Base Case**: $XXX\n- **Bull Case**: $XXX (+XX%)\n\n## Monitoring Checklist\n1. [Metric 1]\n2. [Metric 2]\n3. [Metric 3]\n\n## Visual Evidence\n[Insert additional relevant images]\n*Source: [Name] - [Specific context and analysis]*\n\n*Disclaimer: This analysis is for informational purposes only. Always conduct your own research before making investment decisions.*\n\n## Output Requirements\n\n1. Visual Excellence\n   - Strategic image placement\n   - Clear data visualization\n   - Consistent formatting\n   - Professional appearance\n\n2. Data Accuracy\n   - Cross-reference numbers\n   - Verify calculations\n   - Include trends\n   - Show comparisons\n\n3. Action Focus\n   - Clear recommendations\n   - Specific entry/exit points\n   - Risk management guidelines\n   - Monitoring triggers\n\n4. Professional Standards\n   - No spelling errors\n   - Consistent formatting\n   - Proper citations\n   - Clear attribution\n\nRemember:\n- Never use triple backticks\n- Include all images with proper markdown\n- Maintain consistent formatting\n- Provide specific, actionable insights\n- Use emojis sparingly and professionally\n- Cross-validate all data points"
                                },
                                "tool_placeholder": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Tool Placeholder",
                                    "dynamic": false,
                                    "info": "A placeholder input for tool mode.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "tool_placeholder",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": true,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "Prompt"
                    },
                    "dragging": false,
                    "height": 433,
                    "id": "Prompt-xirI8",
                    "measured": {
                        "height": 433,
                        "width": 360
                    },
                    "position": {
                        "x": 416.02309796632085,
                        "y": -1081.5957453651372
                    },
                    "positionAbsolute": {
                        "x": 416.02309796632085,
                        "y": -1081.5957453651372
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "id": "ChatInput-TQ1li",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Get chat inputs from the Playground.",
                            "display_name": "Chat Input",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "input_value",
                                "should_store_message",
                                "sender",
                                "sender_name",
                                "session_id",
                                "files",
                                "background_color",
                                "chat_icon",
                                "text_color"
                            ],
                            "frozen": true,
                            "icon": "MessagesSquare",
                            "legacy": false,
                            "lf_version": "1.0.19.post2",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "message_response",
                                    "name": "message",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "background_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Background Color",
                                    "dynamic": false,
                                    "info": "The background color of the icon.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "background_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "chat_icon": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Icon",
                                    "dynamic": false,
                                    "info": "The icon of the message.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "chat_icon",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import (\n    DropdownInput,\n    FileInput,\n    MessageTextInput,\n    MultilineInput,\n    Output,\n)\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_USER,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatInput\"\n    minimized = True\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n            input_types=[],\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    async def message_response(self) -> Message:\n        background_color = self.background_color\n        text_color = self.text_color\n        icon = self.chat_icon\n\n        message = await Message.create(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n            properties={\n                \"background_color\": background_color,\n                \"text_color\": text_color,\n                \"icon\": icon,\n            },\n        )\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n"
                                },
                                "files": {
                                    "_input_type": "FileInput",
                                    "advanced": true,
                                    "display_name": "Files",
                                    "dynamic": false,
                                    "fileTypes": [
                                        "txt",
                                        "md",
                                        "mdx",
                                        "csv",
                                        "json",
                                        "yaml",
                                        "yml",
                                        "xml",
                                        "html",
                                        "htm",
                                        "pdf",
                                        "docx",
                                        "py",
                                        "sh",
                                        "sql",
                                        "js",
                                        "ts",
                                        "tsx",
                                        "jpg",
                                        "jpeg",
                                        "png",
                                        "bmp",
                                        "image"
                                    ],
                                    "file_path": "",
                                    "info": "Files to be sent with the message.",
                                    "list": true,
                                    "name": "files",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "file",
                                    "value": ""
                                },
                                "input_value": {
                                    "_input_type": "MultilineInput",
                                    "advanced": false,
                                    "display_name": "Text",
                                    "dynamic": false,
                                    "info": "Message to be passed as input.",
                                    "input_types": [],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Should I invest in Tesla (TSLA) stock right now? Please analyze the company's current position, market trends, financial health, and provide a clear investment recommendation."
                                },
                                "sender": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Sender Type",
                                    "dynamic": false,
                                    "info": "Type of sender.",
                                    "name": "sender",
                                    "options": [
                                        "Machine",
                                        "User"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "User"
                                },
                                "sender_name": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Sender Name",
                                    "dynamic": false,
                                    "info": "Name of the sender.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "sender_name",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "User"
                                },
                                "session_id": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Session ID",
                                    "dynamic": false,
                                    "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "session_id",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "should_store_message": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Store Messages",
                                    "dynamic": false,
                                    "info": "Store the message in the history.",
                                    "list": false,
                                    "name": "should_store_message",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "text_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Text Color",
                                    "dynamic": false,
                                    "info": "The text color of the name",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "text_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "ChatInput"
                    },
                    "dragging": false,
                    "height": 234,
                    "id": "ChatInput-TQ1li",
                    "measured": {
                        "height": 234,
                        "width": 360
                    },
                    "position": {
                        "x": -1510.6054210793818,
                        "y": -947.702056394023
                    },
                    "positionAbsolute": {
                        "x": -1510.6054210793818,
                        "y": -947.702056394023
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "id": "note-j0zav",
                        "node": {
                            "description": "# Sequential Tasks Agents\n\n## Overview\nThis flow demonstrates how to chain multiple AI agents for comprehensive research and analysis. Each agent specializes in different aspects of the research process, building upon the previous agent's work.\n\n## How to Use the Flow\n\n1. **Input Your Query** \ud83c\udfaf\n   - Be specific and clear\n   - Include key aspects you want analyzed\n   - Examples:\n     ```\n     Good: \"Should I invest in Tesla (TSLA)? Focus on AI development impact\"\n     Bad: \"Tell me about Tesla\"\n     ```\n\n2. **Research Agent Process** \ud83d\udd0d\n   - Utilizes Tavily Search for comprehensive research\n\n\n3. **Specialized Analysis** \ud83d\udcca\n   - Each agent adds unique value:\n     ```\n     Research Agent \u2192 Deep Research & Context\n         \u2193\n     Finance Agent \u2192 Data Analysis & Metrics\n         \u2193\n     Editor Agent \u2192 Final Synthesis & Report\n     ```\n\n4. **Output Format** \ud83d\udcdd\n   - Structured report\n   - Embedded images and charts\n   - Data-backed insights\n   - Clear recommendations\n\n## Pro Tips\n\n### Query Construction\n- Include specific points of interest\n- Mention required metrics or data points\n- Specify time frames if relevant\n\n### Flow Customization\n- Modify agent prompts for different use cases\n- Add or remove tools as needed\n\n## Common Applications\n- Investment Research\n- Market Analysis\n- Competitive Intelligence\n- Industry Reports\n- Technology Impact Studies\n\n\u26a1 **Best Practice**: Start with a test query to understand the flow's capabilities before running complex analyses.\n\n---\n*Note: This flow template uses financial analysis as an example but can be adapted for any research-intensive task requiring multiple perspectives and data sources.*",
                            "display_name": "",
                            "documentation": "",
                            "template": {}
                        },
                        "type": "note"
                    },
                    "dragging": false,
                    "height": 800,
                    "id": "note-j0zav",
                    "measured": {
                        "height": 800,
                        "width": 328
                    },
                    "position": {
                        "x": -2122.739127560837,
                        "y": -1302.6582482086806
                    },
                    "positionAbsolute": {
                        "x": -2122.739127560837,
                        "y": -1302.6582482086806
                    },
                    "resizing": false,
                    "selected": false,
                    "style": {
                        "height": 800,
                        "width": 600
                    },
                    "type": "noteNode",
                    "width": 600
                },
                {
                    "data": {
                        "id": "note-pUC9D",
                        "node": {
                            "description": "## What Are Sequential Task Agents?\nA system where multiple AI agents work in sequence, each specializing in specific tasks and passing their output to the next agent in the chain. Think of it as an assembly line where each agent adds value to the final result.\n\n## How It Works\n1. **First Agent** \u2192 **Second Agent** \u2192 **Third Agent** \u2192 **Final Output**\n   - Each agent receives input from the previous one\n   - Processes and enhances the information\n   - Passes refined output forward\n\n## Key Benefits\n- **Specialization**: Each agent focuses on specific tasks\n- **Progressive Refinement**: Information gets enhanced at each step\n- **Structured Output**: Final result combines multiple perspectives\n- **Quality Control**: Each agent validates and improves previous work\n\n## Building Your Own Sequence\n1. **Plan Your Chain**\n   - Identify distinct tasks\n   - Determine logical order\n   - Define input/output requirements\n\n2. **Configure Agents**\n   - Give each agent clear instructions\n   - Ensure compatible outputs/inputs\n   - Set appropriate tools for each agent\n\n3. **Connect the Flow**\n   - Link agents in proper order\n   - Test data flow between agents\n   - Verify final output format\n\n## Example Applications\n- Research \u2192 Analysis \u2192 Report Writing\n- Data Collection \u2192 Processing \u2192 Visualization\n- Content Research \u2192 Writing \u2192 Editing\n- Market Analysis \u2192 Financial Review \u2192 Investment Advice\n\n\u2b50 **Pro Tip**: The strength of sequential agents comes from how well they complement each other's capabilities.\n\nThis template uses financial analysis as an example, but you can adapt it for any multi-step process requiring different expertise at each stage.",
                            "display_name": "",
                            "documentation": "",
                            "template": {
                                "backgroundColor": "blue"
                            }
                        },
                        "type": "note"
                    },
                    "dragging": false,
                    "height": 800,
                    "id": "note-pUC9D",
                    "measured": {
                        "height": 800,
                        "width": 328
                    },
                    "position": {
                        "x": -1456.0688717707517,
                        "y": -1916.6876704866322
                    },
                    "positionAbsolute": {
                        "x": -1456.0688717707517,
                        "y": -1916.6876704866322
                    },
                    "resizing": false,
                    "selected": false,
                    "style": {
                        "height": 800,
                        "width": 600
                    },
                    "type": "noteNode",
                    "width": 600
                },
                {
                    "data": {
                        "description": "Define the agent's instructions, then enter a task to complete using tools.",
                        "display_name": "Researcher Agent",
                        "id": "Agent-TmQ5O",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Define the agent's instructions, then enter a task to complete using tools.",
                            "display_name": "Researcher Agent",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "agent_llm",
                                "max_tokens",
                                "model_kwargs",
                                "json_mode",
                                "output_schema",
                                "model_name",
                                "openai_api_base",
                                "api_key",
                                "temperature",
                                "seed",
                                "output_parser",
                                "system_prompt",
                                "tools",
                                "input_value",
                                "handle_parsing_errors",
                                "verbose",
                                "max_iterations",
                                "agent_description",
                                "memory",
                                "sender",
                                "sender_name",
                                "n_messages",
                                "session_id",
                                "order",
                                "template",
                                "add_current_date_tool"
                            ],
                            "frozen": true,
                            "icon": "bot",
                            "legacy": false,
                            "lf_version": "1.0.19.post2",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Response",
                                    "method": "message_response",
                                    "name": "response",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "add_current_date_tool": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Current Date",
                                    "dynamic": false,
                                    "info": "If true, will add a tool to the agent that returns the current date.",
                                    "list": false,
                                    "name": "add_current_date_tool",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "agent_description": {
                                    "_input_type": "MultilineInput",
                                    "advanced": true,
                                    "display_name": "Agent Description [Deprecated]",
                                    "dynamic": false,
                                    "info": "The description of the agent. This is only used when in Tool Mode. Defaults to 'A helpful assistant with access to the following tools:' and tools are added dynamically. This feature is deprecated and will be removed in future versions.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "agent_description",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "A helpful assistant with access to the following tools:"
                                },
                                "agent_llm": {
                                    "_input_type": "DropdownInput",
                                    "advanced": false,
                                    "combobox": false,
                                    "display_name": "Model Provider",
                                    "dynamic": false,
                                    "info": "The provider of the language model that the agent will use to generate responses.",
                                    "input_types": [],
                                    "name": "agent_llm",
                                    "options": [
                                        "Amazon Bedrock",
                                        "Anthropic",
                                        "Azure OpenAI",
                                        "Google Generative AI",
                                        "Groq",
                                        "NVIDIA",
                                        "OpenAI",
                                        "Custom"
                                    ],
                                    "placeholder": "",
                                    "real_time_refresh": true,
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "OpenAI"
                                },
                                "api_key": {
                                    "_input_type": "SecretStrInput",
                                    "advanced": false,
                                    "display_name": "OpenAI API Key",
                                    "dynamic": false,
                                    "info": "The OpenAI API Key to use for the OpenAI model.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "load_from_db": true,
                                    "name": "api_key",
                                    "password": true,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": "OPENAI_API_KEY"
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langchain_core.tools import StructuredTool\n\nfrom langflow.base.agents.agent import LCToolsAgentComponent\nfrom langflow.base.models.model_input_constants import (\n    ALL_PROVIDER_FIELDS,\n    MODEL_DYNAMIC_UPDATE_FIELDS,\n    MODEL_PROVIDERS_DICT,\n)\nfrom langflow.base.models.model_utils import get_model_name\nfrom langflow.components.helpers import CurrentDateComponent\nfrom langflow.components.helpers.memory import MemoryComponent\nfrom langflow.components.langchain_utilities.tool_calling import ToolCallingAgentComponent\nfrom langflow.custom.utils import update_component_build_config\nfrom langflow.io import BoolInput, DropdownInput, MultilineInput, Output\nfrom langflow.logging import logger\nfrom langflow.schema.dotdict import dotdict\nfrom langflow.schema.message import Message\n\n\ndef set_advanced_true(component_input):\n    component_input.advanced = True\n    return component_input\n\n\nclass AgentComponent(ToolCallingAgentComponent):\n    display_name: str = \"Agent\"\n    description: str = \"Define the agent's instructions, then enter a task to complete using tools.\"\n    icon = \"bot\"\n    beta = False\n    name = \"Agent\"\n\n    memory_inputs = [set_advanced_true(component_input) for component_input in MemoryComponent().inputs]\n\n    inputs = [\n        DropdownInput(\n            name=\"agent_llm\",\n            display_name=\"Model Provider\",\n            info=\"The provider of the language model that the agent will use to generate responses.\",\n            options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n            value=\"OpenAI\",\n            real_time_refresh=True,\n            input_types=[],\n        ),\n        *MODEL_PROVIDERS_DICT[\"OpenAI\"][\"inputs\"],\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=\"Agent Instructions\",\n            info=\"System Prompt: Initial instructions and context provided to guide the agent's behavior.\",\n            value=\"You are a helpful assistant that can use tools to answer questions and perform tasks.\",\n            advanced=False,\n        ),\n        *LCToolsAgentComponent._base_inputs,\n        *memory_inputs,\n        BoolInput(\n            name=\"add_current_date_tool\",\n            display_name=\"Current Date\",\n            advanced=True,\n            info=\"If true, will add a tool to the agent that returns the current date.\",\n            value=True,\n        ),\n    ]\n    outputs = [Output(name=\"response\", display_name=\"Response\", method=\"message_response\")]\n\n    async def message_response(self) -> Message:\n        try:\n            llm_model, display_name = self.get_llm()\n            if llm_model is None:\n                msg = \"No language model selected\"\n                raise ValueError(msg)\n            self.model_name = get_model_name(llm_model, display_name=display_name)\n        except Exception as e:\n            # Log the error for debugging purposes\n            logger.error(f\"Error retrieving language model: {e}\")\n            raise\n\n        try:\n            self.chat_history = await self.get_memory_data()\n        except Exception as e:\n            logger.error(f\"Error retrieving chat history: {e}\")\n            raise\n\n        if self.add_current_date_tool:\n            try:\n                if not isinstance(self.tools, list):  # type: ignore[has-type]\n                    self.tools = []\n                # Convert CurrentDateComponent to a StructuredTool\n                current_date_tool = (await CurrentDateComponent().to_toolkit()).pop(0)\n                # current_date_tool = CurrentDateComponent().to_toolkit()[0]\n                if isinstance(current_date_tool, StructuredTool):\n                    self.tools.append(current_date_tool)\n                else:\n                    msg = \"CurrentDateComponent must be converted to a StructuredTool\"\n                    raise TypeError(msg)\n            except Exception as e:\n                logger.error(f\"Error adding current date tool: {e}\")\n                raise\n\n        if not self.tools:\n            msg = \"Tools are required to run the agent.\"\n            logger.error(msg)\n            raise ValueError(msg)\n\n        try:\n            self.set(\n                llm=llm_model,\n                tools=self.tools,\n                chat_history=self.chat_history,\n                input_value=self.input_value,\n                system_prompt=self.system_prompt,\n            )\n            agent = self.create_agent_runnable()\n        except Exception as e:\n            logger.error(f\"Error setting up the agent: {e}\")\n            raise\n\n        return await self.run_agent(agent)\n\n    async def get_memory_data(self):\n        memory_kwargs = {\n            component_input.name: getattr(self, f\"{component_input.name}\") for component_input in self.memory_inputs\n        }\n        # filter out empty values\n        memory_kwargs = {k: v for k, v in memory_kwargs.items() if v}\n\n        return await MemoryComponent().set(**memory_kwargs).retrieve_messages()\n\n    def get_llm(self):\n        if isinstance(self.agent_llm, str):\n            try:\n                provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n                if provider_info:\n                    component_class = provider_info.get(\"component_class\")\n                    display_name = component_class.display_name\n                    inputs = provider_info.get(\"inputs\")\n                    prefix = provider_info.get(\"prefix\", \"\")\n                    return (\n                        self._build_llm_model(component_class, inputs, prefix),\n                        display_name,\n                    )\n            except Exception as e:\n                msg = f\"Error building {self.agent_llm} language model\"\n                raise ValueError(msg) from e\n        return self.agent_llm, None\n\n    def _build_llm_model(self, component, inputs, prefix=\"\"):\n        model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n        return component.set(**model_kwargs).build_model()\n\n    def set_component_params(self, component):\n        provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n        if provider_info:\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\")\n            model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n\n            return component.set(**model_kwargs)\n        return component\n\n    def delete_fields(self, build_config: dotdict, fields: dict | list[str]) -> None:\n        \"\"\"Delete specified fields from build_config.\"\"\"\n        for field in fields:\n            build_config.pop(field, None)\n\n    def update_input_types(self, build_config: dotdict) -> dotdict:\n        \"\"\"Update input types for all fields in build_config.\"\"\"\n        for key, value in build_config.items():\n            if isinstance(value, dict):\n                if value.get(\"input_types\") is None:\n                    build_config[key][\"input_types\"] = []\n            elif hasattr(value, \"input_types\") and value.input_types is None:\n                value.input_types = []\n        return build_config\n\n    async def update_build_config(\n        self, build_config: dotdict, field_value: str, field_name: str | None = None\n    ) -> dotdict:\n        # Iterate over all providers in the MODEL_PROVIDERS_DICT\n        # Existing logic for updating build_config\n        if field_name in (\"agent_llm\",):\n            build_config[\"agent_llm\"][\"value\"] = field_value\n            provider_info = MODEL_PROVIDERS_DICT.get(field_value)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call the component class's update_build_config method\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n\n            provider_configs: dict[str, tuple[dict, list[dict]]] = {\n                provider: (\n                    MODEL_PROVIDERS_DICT[provider][\"fields\"],\n                    [\n                        MODEL_PROVIDERS_DICT[other_provider][\"fields\"]\n                        for other_provider in MODEL_PROVIDERS_DICT\n                        if other_provider != provider\n                    ],\n                )\n                for provider in MODEL_PROVIDERS_DICT\n            }\n            if field_value in provider_configs:\n                fields_to_add, fields_to_delete = provider_configs[field_value]\n\n                # Delete fields from other providers\n                for fields in fields_to_delete:\n                    self.delete_fields(build_config, fields)\n\n                # Add provider-specific fields\n                if field_value == \"OpenAI\" and not any(field in build_config for field in fields_to_add):\n                    build_config.update(fields_to_add)\n                else:\n                    build_config.update(fields_to_add)\n                # Reset input types for agent_llm\n                build_config[\"agent_llm\"][\"input_types\"] = []\n            elif field_value == \"Custom\":\n                # Delete all provider fields\n                self.delete_fields(build_config, ALL_PROVIDER_FIELDS)\n                # Update with custom component\n                custom_component = DropdownInput(\n                    name=\"agent_llm\",\n                    display_name=\"Language Model\",\n                    options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n                    value=\"Custom\",\n                    real_time_refresh=True,\n                    input_types=[\"LanguageModel\"],\n                )\n                build_config.update({\"agent_llm\": custom_component.to_dict()})\n            # Update input types for all fields\n            build_config = self.update_input_types(build_config)\n\n            # Validate required keys\n            default_keys = [\n                \"code\",\n                \"_type\",\n                \"agent_llm\",\n                \"tools\",\n                \"input_value\",\n                \"add_current_date_tool\",\n                \"system_prompt\",\n                \"agent_description\",\n                \"max_iterations\",\n                \"handle_parsing_errors\",\n                \"verbose\",\n            ]\n            missing_keys = [key for key in default_keys if key not in build_config]\n            if missing_keys:\n                msg = f\"Missing required keys in build_config: {missing_keys}\"\n                raise ValueError(msg)\n        if (\n            isinstance(self.agent_llm, str)\n            and self.agent_llm in MODEL_PROVIDERS_DICT\n            and field_name in MODEL_DYNAMIC_UPDATE_FIELDS\n        ):\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                component_class = self.set_component_params(component_class)\n                prefix = provider_info.get(\"prefix\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call each component class's update_build_config method\n                    # remove the prefix from the field_name\n                    if isinstance(field_name, str) and isinstance(prefix, str):\n                        field_name = field_name.replace(prefix, \"\")\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n        return dotdict({k: v.to_dict() if hasattr(v, \"to_dict\") else v for k, v in build_config.items()})\n"
                                },
                                "handle_parsing_errors": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Handle Parse Errors",
                                    "dynamic": false,
                                    "info": "Should the Agent fix errors when reading user input for better processing?",
                                    "list": false,
                                    "name": "handle_parsing_errors",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "input_value": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": false,
                                    "display_name": "Input",
                                    "dynamic": false,
                                    "info": "The input provided by the user for the agent to process.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": true,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "json_mode": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "JSON Mode",
                                    "dynamic": false,
                                    "info": "If True, it will output JSON regardless of passing a schema.",
                                    "list": false,
                                    "name": "json_mode",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "max_iterations": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Max Iterations",
                                    "dynamic": false,
                                    "info": "The maximum number of attempts the agent can make to complete its task before it stops.",
                                    "list": false,
                                    "name": "max_iterations",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 15
                                },
                                "max_tokens": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Max Tokens",
                                    "dynamic": false,
                                    "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                                    "list": false,
                                    "name": "max_tokens",
                                    "placeholder": "",
                                    "range_spec": {
                                        "max": 128000,
                                        "min": 0,
                                        "step": 0.1,
                                        "step_type": "float"
                                    },
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": ""
                                },
                                "memory": {
                                    "_input_type": "HandleInput",
                                    "advanced": true,
                                    "display_name": "External Memory",
                                    "dynamic": false,
                                    "info": "Retrieve messages from an external memory. If empty, it will use the Langflow tables.",
                                    "input_types": [
                                        "Memory"
                                    ],
                                    "list": false,
                                    "name": "memory",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "other",
                                    "value": ""
                                },
                                "model_kwargs": {
                                    "_input_type": "DictInput",
                                    "advanced": true,
                                    "display_name": "Model Kwargs",
                                    "dynamic": false,
                                    "info": "Additional keyword arguments to pass to the model.",
                                    "list": false,
                                    "name": "model_kwargs",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "type": "dict",
                                    "value": {}
                                },
                                "model_name": {
                                    "_input_type": "DropdownInput",
                                    "advanced": false,
                                    "combobox": true,
                                    "display_name": "Model Name",
                                    "dynamic": false,
                                    "info": "To see the model names, first choose a provider. Then, enter your API key and click the refresh button next to the model name.",
                                    "name": "model_name",
                                    "options": [
                                        "gpt-4o-mini",
                                        "gpt-4o",
                                        "gpt-4-turbo",
                                        "gpt-4-turbo-preview",
                                        "gpt-4",
                                        "gpt-3.5-turbo",
                                        "gpt-3.5-turbo-0125"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "gpt-4o-mini"
                                },
                                "n_messages": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Number of Messages",
                                    "dynamic": false,
                                    "info": "Number of messages to retrieve.",
                                    "list": false,
                                    "name": "n_messages",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 100
                                },
                                "openai_api_base": {
                                    "_input_type": "StrInput",
                                    "advanced": true,
                                    "display_name": "OpenAI API Base",
                                    "dynamic": false,
                                    "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "openai_api_base",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "order": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Order",
                                    "dynamic": false,
                                    "info": "Order of the messages.",
                                    "name": "order",
                                    "options": [
                                        "Ascending",
                                        "Descending"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Ascending"
                                },
                                "seed": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Seed",
                                    "dynamic": false,
                                    "info": "The seed controls the reproducibility of the job.",
                                    "list": false,
                                    "name": "seed",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 1
                                },
                                "sender": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Sender Type",
                                    "dynamic": false,
                                    "info": "Filter by sender type.",
                                    "name": "sender",
                                    "options": [
                                        "Machine",
                                        "User",
                                        "Machine and User"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Machine and User"
                                },
                                "sender_name": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Sender Name",
                                    "dynamic": false,
                                    "info": "Filter by sender name.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "sender_name",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "session_id": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Session ID",
                                    "dynamic": false,
                                    "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "session_id",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "system_prompt": {
                                    "_input_type": "MultilineInput",
                                    "advanced": false,
                                    "display_name": "Agent Instructions",
                                    "dynamic": false,
                                    "info": "System Prompt: Initial instructions and context provided to guide the agent's behavior.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "system_prompt",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "You are a helpful assistant that can use tools to answer questions and perform tasks."
                                },
                                "temperature": {
                                    "_input_type": "FloatInput",
                                    "advanced": true,
                                    "display_name": "Temperature",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "name": "temperature",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "float",
                                    "value": 0.1
                                },
                                "template": {
                                    "_input_type": "MultilineInput",
                                    "advanced": true,
                                    "display_name": "Template",
                                    "dynamic": false,
                                    "info": "The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "template",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "{sender_name}: {text}"
                                },
                                "tools": {
                                    "_input_type": "HandleInput",
                                    "advanced": false,
                                    "display_name": "Tools",
                                    "dynamic": false,
                                    "info": "These are the tools that the agent can use to help with tasks.",
                                    "input_types": [
                                        "Tool"
                                    ],
                                    "list": true,
                                    "name": "tools",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "other",
                                    "value": ""
                                },
                                "verbose": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Verbose",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "name": "verbose",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "Agent"
                    },
                    "dragging": false,
                    "height": 650,
                    "id": "Agent-TmQ5O",
                    "measured": {
                        "height": 650,
                        "width": 360
                    },
                    "position": {
                        "x": -715.1798010873374,
                        "y": -1342.256094001045
                    },
                    "positionAbsolute": {
                        "x": -715.1798010873374,
                        "y": -1342.256094001045
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "id": "note-NgTrE",
                        "node": {
                            "description": "## Get your API key at [https://tavily.com](https://tavily.com)\n",
                            "display_name": "",
                            "documentation": "",
                            "template": {
                                "backgroundColor": "rose"
                            }
                        },
                        "type": "note"
                    },
                    "dragging": false,
                    "height": 324,
                    "id": "note-NgTrE",
                    "measured": {
                        "height": 324,
                        "width": 328
                    },
                    "position": {
                        "x": -1144.3898055225054,
                        "y": -844.3506743985376
                    },
                    "positionAbsolute": {
                        "x": -1144.3898055225054,
                        "y": -844.3506743985376
                    },
                    "resizing": false,
                    "selected": false,
                    "style": {
                        "height": 324,
                        "width": 347
                    },
                    "type": "noteNode",
                    "width": 347
                },
                {
                    "data": {
                        "id": "note-7I7gz",
                        "node": {
                            "description": "## Configure the agent by obtaining your OpenAI API key from [platform.openai.com](https://platform.openai.com). Under \"Model Provider\", choose:\n- OpenAI: Default, requires only API key\n- Anthropic/Azure/Groq/NVIDIA: Each requires their own API keys\n- Custom: Use your own model endpoint + authentication\n\nSelect model and input API key before running the flow.",
                            "display_name": "",
                            "documentation": "",
                            "template": {
                                "backgroundColor": "rose"
                            }
                        },
                        "type": "note"
                    },
                    "dragging": false,
                    "height": 324,
                    "id": "note-7I7gz",
                    "measured": {
                        "height": 324,
                        "width": 328
                    },
                    "position": {
                        "x": -739.4383746675942,
                        "y": -1672.0874594411662
                    },
                    "positionAbsolute": {
                        "x": -739.4383746675942,
                        "y": -1672.0874594411662
                    },
                    "resizing": false,
                    "selected": false,
                    "style": {
                        "height": 324,
                        "width": 370
                    },
                    "type": "noteNode",
                    "width": 370
                },
                {
                    "data": {
                        "id": "YfinanceComponent-P0VBm",
                        "node": {
                            "base_classes": [
                                "Data",
                                "Message"
                            ],
                            "beta": false,
                            "category": "tools",
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Uses [yfinance](https://pypi.org/project/yfinance/) (unofficial package) to access financial data and market information from Yahoo Finance.",
                            "display_name": "Yahoo Finance",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "symbol",
                                "method",
                                "num_news"
                            ],
                            "frozen": false,
                            "icon": "trending-up",
                            "key": "YfinanceComponent",
                            "legacy": false,
                            "metadata": {},
                            "minimized": false,
                            "output_types": [],
                            "outputs": [
                                {
                                    "cache": true,
                                    "display_name": "Toolset",
                                    "hidden": null,
                                    "method": "to_toolkit",
                                    "name": "component_as_tool",
                                    "required_inputs": null,
                                    "selected": "Tool",
                                    "types": [
                                        "Tool"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "score": 0.007568328950209746,
                            "template": {
                                "_type": "Component",
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "import ast\nimport pprint\nfrom enum import Enum\n\nimport yfinance as yf\nfrom langchain_core.tools import ToolException\nfrom loguru import logger\nfrom pydantic import BaseModel, Field\n\nfrom langflow.custom import Component\nfrom langflow.inputs import DropdownInput, IntInput, MessageTextInput\nfrom langflow.io import Output\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\n\n\nclass YahooFinanceMethod(Enum):\n    GET_INFO = \"get_info\"\n    GET_NEWS = \"get_news\"\n    GET_ACTIONS = \"get_actions\"\n    GET_ANALYSIS = \"get_analysis\"\n    GET_BALANCE_SHEET = \"get_balance_sheet\"\n    GET_CALENDAR = \"get_calendar\"\n    GET_CASHFLOW = \"get_cashflow\"\n    GET_INSTITUTIONAL_HOLDERS = \"get_institutional_holders\"\n    GET_RECOMMENDATIONS = \"get_recommendations\"\n    GET_SUSTAINABILITY = \"get_sustainability\"\n    GET_MAJOR_HOLDERS = \"get_major_holders\"\n    GET_MUTUALFUND_HOLDERS = \"get_mutualfund_holders\"\n    GET_INSIDER_PURCHASES = \"get_insider_purchases\"\n    GET_INSIDER_TRANSACTIONS = \"get_insider_transactions\"\n    GET_INSIDER_ROSTER_HOLDERS = \"get_insider_roster_holders\"\n    GET_DIVIDENDS = \"get_dividends\"\n    GET_CAPITAL_GAINS = \"get_capital_gains\"\n    GET_SPLITS = \"get_splits\"\n    GET_SHARES = \"get_shares\"\n    GET_FAST_INFO = \"get_fast_info\"\n    GET_SEC_FILINGS = \"get_sec_filings\"\n    GET_RECOMMENDATIONS_SUMMARY = \"get_recommendations_summary\"\n    GET_UPGRADES_DOWNGRADES = \"get_upgrades_downgrades\"\n    GET_EARNINGS = \"get_earnings\"\n    GET_INCOME_STMT = \"get_income_stmt\"\n\n\nclass YahooFinanceSchema(BaseModel):\n    symbol: str = Field(..., description=\"The stock symbol to retrieve data for.\")\n    method: YahooFinanceMethod = Field(YahooFinanceMethod.GET_INFO, description=\"The type of data to retrieve.\")\n    num_news: int | None = Field(5, description=\"The number of news articles to retrieve.\")\n\n\nclass YfinanceComponent(Component):\n    display_name = \"Yahoo Finance\"\n    description = \"\"\"Uses [yfinance](https://pypi.org/project/yfinance/) (unofficial package) \\\nto access financial data and market information from Yahoo Finance.\"\"\"\n    icon = \"trending-up\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"symbol\",\n            display_name=\"Stock Symbol\",\n            info=\"The stock symbol to retrieve data for (e.g., AAPL, GOOG).\",\n            tool_mode=True,\n        ),\n        DropdownInput(\n            name=\"method\",\n            display_name=\"Data Method\",\n            info=\"The type of data to retrieve.\",\n            options=list(YahooFinanceMethod),\n            value=\"get_news\",\n        ),\n        IntInput(\n            name=\"num_news\",\n            display_name=\"Number of News\",\n            info=\"The number of news articles to retrieve (only applicable for get_news).\",\n            value=5,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"fetch_content\"),\n        Output(display_name=\"Text\", name=\"text\", method=\"fetch_content_text\"),\n    ]\n\n    def run_model(self) -> list[Data]:\n        return self.fetch_content()\n\n    def fetch_content_text(self) -> Message:\n        data = self.fetch_content()\n        result_string = \"\"\n        for item in data:\n            result_string += item.text + \"\\n\"\n        self.status = result_string\n        return Message(text=result_string)\n\n    def _fetch_yfinance_data(self, ticker: yf.Ticker, method: YahooFinanceMethod, num_news: int | None) -> str:\n        try:\n            if method == YahooFinanceMethod.GET_INFO:\n                result = ticker.info\n            elif method == YahooFinanceMethod.GET_NEWS:\n                result = ticker.news[:num_news]\n            else:\n                result = getattr(ticker, method.value)()\n            return pprint.pformat(result)\n        except Exception as e:\n            error_message = f\"Error retrieving data: {e}\"\n            logger.debug(error_message)\n            self.status = error_message\n            raise ToolException(error_message) from e\n\n    def fetch_content(self) -> list[Data]:\n        try:\n            return self._yahoo_finance_tool(\n                self.symbol,\n                YahooFinanceMethod(self.method),\n                self.num_news,\n            )\n        except ToolException:\n            raise\n        except Exception as e:\n            error_message = f\"Unexpected error: {e}\"\n            logger.debug(error_message)\n            self.status = error_message\n            raise ToolException(error_message) from e\n\n    def _yahoo_finance_tool(\n        self,\n        symbol: str,\n        method: YahooFinanceMethod,\n        num_news: int | None = 5,\n    ) -> list[Data]:\n        ticker = yf.Ticker(symbol)\n        result = self._fetch_yfinance_data(ticker, method, num_news)\n\n        if method == YahooFinanceMethod.GET_NEWS:\n            data_list = [\n                Data(text=f\"{article['title']}: {article['link']}\", data=article)\n                for article in ast.literal_eval(result)\n            ]\n        else:\n            data_list = [Data(text=result, data={\"result\": result})]\n\n        return data_list\n"
                                },
                                "method": {
                                    "_input_type": "DropdownInput",
                                    "advanced": false,
                                    "combobox": false,
                                    "display_name": "Data Method",
                                    "dynamic": false,
                                    "info": "The type of data to retrieve.",
                                    "name": "method",
                                    "options": [
                                        "get_info",
                                        "get_news",
                                        "get_actions",
                                        "get_analysis",
                                        "get_balance_sheet",
                                        "get_calendar",
                                        "get_cashflow",
                                        "get_institutional_holders",
                                        "get_recommendations",
                                        "get_sustainability",
                                        "get_major_holders",
                                        "get_mutualfund_holders",
                                        "get_insider_purchases",
                                        "get_insider_transactions",
                                        "get_insider_roster_holders",
                                        "get_dividends",
                                        "get_capital_gains",
                                        "get_splits",
                                        "get_shares",
                                        "get_fast_info",
                                        "get_sec_filings",
                                        "get_recommendations_summary",
                                        "get_upgrades_downgrades",
                                        "get_earnings",
                                        "get_income_stmt"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "get_news"
                                },
                                "num_news": {
                                    "_input_type": "IntInput",
                                    "advanced": false,
                                    "display_name": "Number of News",
                                    "dynamic": false,
                                    "info": "The number of news articles to retrieve (only applicable for get_news).",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "num_news",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 5
                                },
                                "symbol": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": false,
                                    "display_name": "Stock Symbol",
                                    "dynamic": false,
                                    "info": "The stock symbol to retrieve data for (e.g., AAPL, GOOG).",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "name": "symbol",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": true,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "tools_metadata": {
                                    "_input_type": "TableInput",
                                    "advanced": false,
                                    "display_name": "Edit tools",
                                    "dynamic": false,
                                    "info": "",
                                    "is_list": true,
                                    "list_add_label": "Add More",
                                    "name": "tools_metadata",
                                    "placeholder": "",
                                    "real_time_refresh": true,
                                    "required": false,
                                    "show": true,
                                    "table_icon": "Hammer",
                                    "table_options": {
                                        "block_add": true,
                                        "block_delete": true,
                                        "block_edit": true,
                                        "block_filter": true,
                                        "block_hide": true,
                                        "block_select": true,
                                        "block_sort": true,
                                        "description": "Modify tool names and descriptions to help agents understand when to use each tool.",
                                        "field_parsers": {
                                            "commands": "commands",
                                            "name": [
                                                "snake_case",
                                                "no_blank"
                                            ]
                                        },
                                        "hide_options": true
                                    },
                                    "table_schema": {
                                        "columns": [
                                            {
                                                "description": "Specify the name of the tool.",
                                                "disable_edit": false,
                                                "display_name": "Tool Name",
                                                "edit_mode": "inline",
                                                "filterable": false,
                                                "formatter": "text",
                                                "name": "name",
                                                "sortable": false,
                                                "type": "text"
                                            },
                                            {
                                                "description": "Describe the purpose of the tool.",
                                                "disable_edit": false,
                                                "display_name": "Tool Description",
                                                "edit_mode": "popover",
                                                "filterable": false,
                                                "formatter": "text",
                                                "name": "description",
                                                "sortable": false,
                                                "type": "text"
                                            },
                                            {
                                                "description": "The default identifiers for the tools and cannot be changed.",
                                                "disable_edit": true,
                                                "display_name": "Tool Identifiers",
                                                "edit_mode": "inline",
                                                "filterable": false,
                                                "formatter": "text",
                                                "name": "tags",
                                                "sortable": false,
                                                "type": "text"
                                            }
                                        ]
                                    },
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "trigger_icon": "Hammer",
                                    "trigger_text": "",
                                    "type": "table",
                                    "value": [
                                        {
                                            "description": "fetch_content() - Uses [yfinance](https://pypi.org/project/yfinance/) (unofficial package) to access financial data and market information from Yahoo Finance.",
                                            "name": "YfinanceComponent-fetch_content",
                                            "tags": [
                                                "YfinanceComponent-fetch_content"
                                            ]
                                        },
                                        {
                                            "description": "fetch_content_text() - Uses [yfinance](https://pypi.org/project/yfinance/) (unofficial package) to access financial data and market information from Yahoo Finance.",
                                            "name": "YfinanceComponent-fetch_content_text",
                                            "tags": [
                                                "YfinanceComponent-fetch_content_text"
                                            ]
                                        }
                                    ]
                                }
                            },
                            "tool_mode": true
                        },
                        "showNode": true,
                        "type": "YfinanceComponent"
                    },
                    "dragging": true,
                    "id": "YfinanceComponent-P0VBm",
                    "measured": {
                        "height": 581,
                        "width": 360
                    },
                    "position": {
                        "x": -347.05382068428014,
                        "y": -950.8279673971418
                    },
                    "selected": false,
                    "type": "genericNode"
                },
                {
                    "data": {
                        "id": "CalculatorComponent-82dCo",
                        "node": {
                            "base_classes": [
                                "Data"
                            ],
                            "beta": false,
                            "category": "tools",
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Perform basic arithmetic operations on a given expression.",
                            "display_name": "Calculator",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "expression"
                            ],
                            "frozen": false,
                            "icon": "calculator",
                            "key": "CalculatorComponent",
                            "legacy": false,
                            "metadata": {},
                            "minimized": false,
                            "output_types": [],
                            "outputs": [
                                {
                                    "cache": true,
                                    "display_name": "Toolset",
                                    "hidden": null,
                                    "method": "to_toolkit",
                                    "name": "component_as_tool",
                                    "required_inputs": null,
                                    "selected": "Tool",
                                    "types": [
                                        "Tool"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "score": 0.001,
                            "template": {
                                "_type": "Component",
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "import ast\nimport operator\nfrom collections.abc import Callable\n\nfrom langflow.custom import Component\nfrom langflow.inputs import MessageTextInput\nfrom langflow.io import Output\nfrom langflow.schema import Data\n\n\nclass CalculatorComponent(Component):\n    display_name = \"Calculator\"\n    description = \"Perform basic arithmetic operations on a given expression.\"\n    icon = \"calculator\"\n\n    # Cache operators dictionary as a class variable\n    OPERATORS: dict[type[ast.operator], Callable] = {\n        ast.Add: operator.add,\n        ast.Sub: operator.sub,\n        ast.Mult: operator.mul,\n        ast.Div: operator.truediv,\n        ast.Pow: operator.pow,\n    }\n\n    inputs = [\n        MessageTextInput(\n            name=\"expression\",\n            display_name=\"Expression\",\n            info=\"The arithmetic expression to evaluate (e.g., '4*4*(33/22)+12-20').\",\n            tool_mode=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"result\", type_=Data, method=\"evaluate_expression\"),\n    ]\n\n    def _eval_expr(self, node: ast.AST) -> float:\n        \"\"\"Evaluate an AST node recursively.\"\"\"\n        if isinstance(node, ast.Constant):\n            if isinstance(node.value, int | float):\n                return float(node.value)\n            error_msg = f\"Unsupported constant type: {type(node.value).__name__}\"\n            raise TypeError(error_msg)\n        if isinstance(node, ast.Num):  # For backwards compatibility\n            if isinstance(node.n, int | float):\n                return float(node.n)\n            error_msg = f\"Unsupported number type: {type(node.n).__name__}\"\n            raise TypeError(error_msg)\n\n        if isinstance(node, ast.BinOp):\n            op_type = type(node.op)\n            if op_type not in self.OPERATORS:\n                error_msg = f\"Unsupported binary operator: {op_type.__name__}\"\n                raise TypeError(error_msg)\n\n            left = self._eval_expr(node.left)\n            right = self._eval_expr(node.right)\n            return self.OPERATORS[op_type](left, right)\n\n        error_msg = f\"Unsupported operation or expression type: {type(node).__name__}\"\n        raise TypeError(error_msg)\n\n    def evaluate_expression(self) -> Data:\n        \"\"\"Evaluate the mathematical expression and return the result.\"\"\"\n        try:\n            tree = ast.parse(self.expression, mode=\"eval\")\n            result = self._eval_expr(tree.body)\n\n            formatted_result = f\"{float(result):.6f}\".rstrip(\"0\").rstrip(\".\")\n            self.log(f\"Calculation result: {formatted_result}\")\n\n            self.status = formatted_result\n            return Data(data={\"result\": formatted_result})\n\n        except ZeroDivisionError:\n            error_message = \"Error: Division by zero\"\n            self.status = error_message\n            return Data(data={\"error\": error_message, \"input\": self.expression})\n\n        except (SyntaxError, TypeError, KeyError, ValueError, AttributeError, OverflowError) as e:\n            error_message = f\"Invalid expression: {e!s}\"\n            self.status = error_message\n            return Data(data={\"error\": error_message, \"input\": self.expression})\n\n    def build(self):\n        \"\"\"Return the main evaluation function.\"\"\"\n        return self.evaluate_expression\n"
                                },
                                "expression": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": false,
                                    "display_name": "Expression",
                                    "dynamic": false,
                                    "info": "The arithmetic expression to evaluate (e.g., '4*4*(33/22)+12-20').",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "name": "expression",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": true,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "tools_metadata": {
                                    "_input_type": "TableInput",
                                    "advanced": false,
                                    "display_name": "Edit tools",
                                    "dynamic": false,
                                    "info": "",
                                    "is_list": true,
                                    "list_add_label": "Add More",
                                    "name": "tools_metadata",
                                    "placeholder": "",
                                    "real_time_refresh": true,
                                    "required": false,
                                    "show": true,
                                    "table_icon": "Hammer",
                                    "table_options": {
                                        "block_add": true,
                                        "block_delete": true,
                                        "block_edit": true,
                                        "block_filter": true,
                                        "block_hide": true,
                                        "block_select": true,
                                        "block_sort": true,
                                        "description": "Modify tool names and descriptions to help agents understand when to use each tool.",
                                        "field_parsers": {
                                            "commands": "commands",
                                            "name": [
                                                "snake_case",
                                                "no_blank"
                                            ]
                                        },
                                        "hide_options": true
                                    },
                                    "table_schema": {
                                        "columns": [
                                            {
                                                "description": "Specify the name of the tool.",
                                                "disable_edit": false,
                                                "display_name": "Tool Name",
                                                "edit_mode": "inline",
                                                "filterable": false,
                                                "formatter": "text",
                                                "name": "name",
                                                "sortable": false,
                                                "type": "text"
                                            },
                                            {
                                                "description": "Describe the purpose of the tool.",
                                                "disable_edit": false,
                                                "display_name": "Tool Description",
                                                "edit_mode": "popover",
                                                "filterable": false,
                                                "formatter": "text",
                                                "name": "description",
                                                "sortable": false,
                                                "type": "text"
                                            },
                                            {
                                                "description": "The default identifiers for the tools and cannot be changed.",
                                                "disable_edit": true,
                                                "display_name": "Tool Identifiers",
                                                "edit_mode": "inline",
                                                "filterable": false,
                                                "formatter": "text",
                                                "name": "tags",
                                                "sortable": false,
                                                "type": "text"
                                            }
                                        ]
                                    },
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "trigger_icon": "Hammer",
                                    "trigger_text": "",
                                    "type": "table",
                                    "value": [
                                        {
                                            "description": "evaluate_expression() - Perform basic arithmetic operations on a given expression.",
                                            "name": "CalculatorComponent-evaluate_expression",
                                            "tags": [
                                                "CalculatorComponent-evaluate_expression"
                                            ]
                                        }
                                    ]
                                }
                            },
                            "tool_mode": true
                        },
                        "showNode": true,
                        "type": "CalculatorComponent"
                    },
                    "dragging": false,
                    "id": "CalculatorComponent-82dCo",
                    "measured": {
                        "height": 374,
                        "width": 360
                    },
                    "position": {
                        "x": 418.5430081507146,
                        "y": -618.940894040711
                    },
                    "selected": false,
                    "type": "genericNode"
                },
                {
                    "data": {
                        "id": "TavilySearchComponent-ZgS55",
                        "node": {
                            "base_classes": [
                                "Data",
                                "Message"
                            ],
                            "beta": false,
                            "category": "tools",
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "**Tavily AI** is a search engine optimized for LLMs and RAG,         aimed at efficient, quick, and persistent search results.",
                            "display_name": "Tavily AI Search",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "api_key",
                                "query",
                                "search_depth",
                                "topic",
                                "max_results",
                                "include_images",
                                "include_answer"
                            ],
                            "frozen": false,
                            "icon": "TavilyIcon",
                            "key": "TavilySearchComponent",
                            "legacy": false,
                            "metadata": {},
                            "minimized": false,
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Toolset",
                                    "hidden": null,
                                    "method": "to_toolkit",
                                    "name": "component_as_tool",
                                    "required_inputs": null,
                                    "selected": "Tool",
                                    "types": [
                                        "Tool"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "score": 0.0075846556637275304,
                            "template": {
                                "_type": "Component",
                                "api_key": {
                                    "_input_type": "SecretStrInput",
                                    "advanced": false,
                                    "display_name": "Tavily API Key",
                                    "dynamic": false,
                                    "info": "Your Tavily API Key.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "load_from_db": true,
                                    "name": "api_key",
                                    "password": true,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": ""
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "import httpx\nfrom loguru import logger\n\nfrom langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import BoolInput, DropdownInput, IntInput, MessageTextInput, Output, SecretStrInput\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\n\n\nclass TavilySearchComponent(Component):\n    display_name = \"Tavily AI Search\"\n    description = \"\"\"**Tavily AI** is a search engine optimized for LLMs and RAG, \\\n        aimed at efficient, quick, and persistent search results.\"\"\"\n    icon = \"TavilyIcon\"\n\n    inputs = [\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"Tavily API Key\",\n            required=True,\n            info=\"Your Tavily API Key.\",\n        ),\n        MessageTextInput(\n            name=\"query\",\n            display_name=\"Search Query\",\n            info=\"The search query you want to execute with Tavily.\",\n            tool_mode=True,\n        ),\n        DropdownInput(\n            name=\"search_depth\",\n            display_name=\"Search Depth\",\n            info=\"The depth of the search.\",\n            options=[\"basic\", \"advanced\"],\n            value=\"advanced\",\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"topic\",\n            display_name=\"Search Topic\",\n            info=\"The category of the search.\",\n            options=[\"general\", \"news\"],\n            value=\"general\",\n            advanced=True,\n        ),\n        IntInput(\n            name=\"max_results\",\n            display_name=\"Max Results\",\n            info=\"The maximum number of search results to return.\",\n            value=5,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"include_images\",\n            display_name=\"Include Images\",\n            info=\"Include a list of query-related images in the response.\",\n            value=True,\n            advanced=True,\n        ),\n        BoolInput(\n            name=\"include_answer\",\n            display_name=\"Include Answer\",\n            info=\"Include a short answer to original query.\",\n            value=True,\n            advanced=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"fetch_content\"),\n        Output(display_name=\"Text\", name=\"text\", method=\"fetch_content_text\"),\n    ]\n\n    def fetch_content(self) -> list[Data]:\n        try:\n            url = \"https://api.tavily.com/search\"\n            headers = {\n                \"content-type\": \"application/json\",\n                \"accept\": \"application/json\",\n            }\n            payload = {\n                \"api_key\": self.api_key,\n                \"query\": self.query,\n                \"search_depth\": self.search_depth,\n                \"topic\": self.topic,\n                \"max_results\": self.max_results,\n                \"include_images\": self.include_images,\n                \"include_answer\": self.include_answer,\n            }\n\n            with httpx.Client() as client:\n                response = client.post(url, json=payload, headers=headers)\n\n            response.raise_for_status()\n            search_results = response.json()\n\n            data_results = []\n\n            if self.include_answer and search_results.get(\"answer\"):\n                data_results.append(Data(text=search_results[\"answer\"]))\n\n            for result in search_results.get(\"results\", []):\n                content = result.get(\"content\", \"\")\n                data_results.append(\n                    Data(\n                        text=content,\n                        data={\n                            \"title\": result.get(\"title\"),\n                            \"url\": result.get(\"url\"),\n                            \"content\": content,\n                            \"score\": result.get(\"score\"),\n                        },\n                    )\n                )\n\n            if self.include_images and search_results.get(\"images\"):\n                data_results.append(Data(text=\"Images found\", data={\"images\": search_results[\"images\"]}))\n        except httpx.HTTPStatusError as exc:\n            error_message = f\"HTTP error occurred: {exc.response.status_code} - {exc.response.text}\"\n            logger.error(error_message)\n            return [Data(text=error_message, data={\"error\": error_message})]\n        except httpx.RequestError as exc:\n            error_message = f\"Request error occurred: {exc}\"\n            logger.error(error_message)\n            return [Data(text=error_message, data={\"error\": error_message})]\n        except ValueError as exc:\n            error_message = f\"Invalid response format: {exc}\"\n            logger.error(error_message)\n            return [Data(text=error_message, data={\"error\": error_message})]\n        else:\n            self.status = data_results\n            return data_results\n\n    def fetch_content_text(self) -> Message:\n        data = self.fetch_content()\n        result_string = data_to_text(\"{text}\", data)\n        self.status = result_string\n        return Message(text=result_string)\n"
                                },
                                "include_answer": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Include Answer",
                                    "dynamic": false,
                                    "info": "Include a short answer to original query.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "include_answer",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "include_images": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Include Images",
                                    "dynamic": false,
                                    "info": "Include a list of query-related images in the response.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "include_images",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "max_results": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Max Results",
                                    "dynamic": false,
                                    "info": "The maximum number of search results to return.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "max_results",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 5
                                },
                                "query": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": false,
                                    "display_name": "Search Query",
                                    "dynamic": false,
                                    "info": "The search query you want to execute with Tavily.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "name": "query",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": true,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "search_depth": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Search Depth",
                                    "dynamic": false,
                                    "info": "The depth of the search.",
                                    "name": "search_depth",
                                    "options": [
                                        "basic",
                                        "advanced"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "advanced"
                                },
                                "tools_metadata": {
                                    "_input_type": "TableInput",
                                    "advanced": false,
                                    "display_name": "Edit tools",
                                    "dynamic": false,
                                    "info": "",
                                    "is_list": true,
                                    "list_add_label": "Add More",
                                    "name": "tools_metadata",
                                    "placeholder": "",
                                    "real_time_refresh": true,
                                    "required": false,
                                    "show": true,
                                    "table_icon": "Hammer",
                                    "table_options": {
                                        "block_add": true,
                                        "block_delete": true,
                                        "block_edit": true,
                                        "block_filter": true,
                                        "block_hide": true,
                                        "block_select": true,
                                        "block_sort": true,
                                        "description": "Modify tool names and descriptions to help agents understand when to use each tool.",
                                        "field_parsers": {
                                            "commands": "commands",
                                            "name": [
                                                "snake_case",
                                                "no_blank"
                                            ]
                                        },
                                        "hide_options": true
                                    },
                                    "table_schema": {
                                        "columns": [
                                            {
                                                "description": "Specify the name of the tool.",
                                                "disable_edit": false,
                                                "display_name": "Tool Name",
                                                "edit_mode": "inline",
                                                "filterable": false,
                                                "formatter": "text",
                                                "name": "name",
                                                "sortable": false,
                                                "type": "text"
                                            },
                                            {
                                                "description": "Describe the purpose of the tool.",
                                                "disable_edit": false,
                                                "display_name": "Tool Description",
                                                "edit_mode": "popover",
                                                "filterable": false,
                                                "formatter": "text",
                                                "name": "description",
                                                "sortable": false,
                                                "type": "text"
                                            },
                                            {
                                                "description": "The default identifiers for the tools and cannot be changed.",
                                                "disable_edit": true,
                                                "display_name": "Tool Identifiers",
                                                "edit_mode": "inline",
                                                "filterable": false,
                                                "formatter": "text",
                                                "name": "tags",
                                                "sortable": false,
                                                "type": "text"
                                            }
                                        ]
                                    },
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "trigger_icon": "Hammer",
                                    "trigger_text": "",
                                    "type": "table",
                                    "value": [
                                        {
                                            "description": "fetch_content(api_key: Message) - **Tavily AI** is a search engine optimized for LLMs and RAG,         aimed at efficient, quick, and persistent search results.",
                                            "name": "TavilySearchComponent-fetch_content",
                                            "tags": [
                                                "TavilySearchComponent-fetch_content"
                                            ]
                                        },
                                        {
                                            "description": "fetch_content_text(api_key: Message) - **Tavily AI** is a search engine optimized for LLMs and RAG,         aimed at efficient, quick, and persistent search results.",
                                            "name": "TavilySearchComponent-fetch_content_text",
                                            "tags": [
                                                "TavilySearchComponent-fetch_content_text"
                                            ]
                                        }
                                    ]
                                },
                                "topic": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Search Topic",
                                    "dynamic": false,
                                    "info": "The category of the search.",
                                    "name": "topic",
                                    "options": [
                                        "general",
                                        "news"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "general"
                                }
                            },
                            "tool_mode": true
                        },
                        "showNode": true,
                        "type": "TavilySearchComponent"
                    },
                    "dragging": false,
                    "id": "TavilySearchComponent-ZgS55",
                    "measured": {
                        "height": 489,
                        "width": 360
                    },
                    "position": {
                        "x": -1138.848513020278,
                        "y": -764.5604109436156
                    },
                    "selected": false,
                    "type": "genericNode"
                }
            ],
            "viewport": {
                "x": 905.1150074113123,
                "y": 872.5950106358109,
                "zoom": 0.3920220111611041
            }
        },
        "is_component": false,
        "updated_at": "2025-01-25T04:58:25+00:00",
        "webhook": false,
        "endpoint_name": null,
        "tags": [
            "assistants",
            "agents",
            "web-scraping"
        ],
        "locked": false,
        "id": "b63fe41f-14a3-4fa8-96ef-128d95d820b8",
        "user_id": null,
        "folder_id": "c54584e6-88eb-4ac0-b70c-68aee37fdce2"
    },
    {
        "name": "Travel Planning Agents",
        "description": "Create a travel planning chatbot that uses specialized agents to craft personalized trip itineraries.",
        "icon": "Plane",
        "icon_bg_color": null,
        "gradient": "0",
        "data": {
            "edges": [
                {
                    "animated": false,
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "Agent",
                            "id": "Agent-txo0a",
                            "name": "response",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "input_value",
                            "id": "ChatOutput-bHF59",
                            "inputTypes": [
                                "Message"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "reactflow__edge-Agent-txo0a{\u0153dataType\u0153:\u0153Agent\u0153,\u0153id\u0153:\u0153Agent-txo0a\u0153,\u0153name\u0153:\u0153response\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-ChatOutput-bHF59{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153ChatOutput-bHF59\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "Agent-txo0a",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153Agent\u0153, \u0153id\u0153: \u0153Agent-txo0a\u0153, \u0153name\u0153: \u0153response\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "ChatOutput-bHF59",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153input_value\u0153, \u0153id\u0153: \u0153ChatOutput-bHF59\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "animated": false,
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "Agent",
                            "id": "Agent-xeg6y",
                            "name": "response",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "input_value",
                            "id": "Agent-txo0a",
                            "inputTypes": [
                                "Message"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "reactflow__edge-Agent-xeg6y{\u0153dataType\u0153:\u0153Agent\u0153,\u0153id\u0153:\u0153Agent-xeg6y\u0153,\u0153name\u0153:\u0153response\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-Agent-txo0a{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153Agent-txo0a\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "Agent-xeg6y",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153Agent\u0153, \u0153id\u0153: \u0153Agent-xeg6y\u0153, \u0153name\u0153: \u0153response\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "Agent-txo0a",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153input_value\u0153, \u0153id\u0153: \u0153Agent-txo0a\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "animated": false,
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "Agent",
                            "id": "Agent-Bsq4j",
                            "name": "response",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "input_value",
                            "id": "Agent-xeg6y",
                            "inputTypes": [
                                "Message"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "reactflow__edge-Agent-Bsq4j{\u0153dataType\u0153:\u0153Agent\u0153,\u0153id\u0153:\u0153Agent-Bsq4j\u0153,\u0153name\u0153:\u0153response\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-Agent-xeg6y{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153Agent-xeg6y\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "Agent-Bsq4j",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153Agent\u0153, \u0153id\u0153: \u0153Agent-Bsq4j\u0153, \u0153name\u0153: \u0153response\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "Agent-xeg6y",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153input_value\u0153, \u0153id\u0153: \u0153Agent-xeg6y\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "animated": false,
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "ChatInput",
                            "id": "ChatInput-VKkd5",
                            "name": "message",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "input_value",
                            "id": "Agent-Bsq4j",
                            "inputTypes": [
                                "Message"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "reactflow__edge-ChatInput-VKkd5{\u0153dataType\u0153:\u0153ChatInput\u0153,\u0153id\u0153:\u0153ChatInput-VKkd5\u0153,\u0153name\u0153:\u0153message\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-Agent-Bsq4j{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153Agent-Bsq4j\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "ChatInput-VKkd5",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153ChatInput\u0153, \u0153id\u0153: \u0153ChatInput-VKkd5\u0153, \u0153name\u0153: \u0153message\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "Agent-Bsq4j",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153input_value\u0153, \u0153id\u0153: \u0153Agent-Bsq4j\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "animated": false,
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "URL",
                            "id": "URL-VCoZD",
                            "name": "component_as_tool",
                            "output_types": [
                                "Tool"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "tools",
                            "id": "Agent-xeg6y",
                            "inputTypes": [
                                "Tool"
                            ],
                            "type": "other"
                        }
                    },
                    "id": "xy-edge__URL-VCoZD{\u0153dataType\u0153:\u0153URL\u0153,\u0153id\u0153:\u0153URL-VCoZD\u0153,\u0153name\u0153:\u0153component_as_tool\u0153,\u0153output_types\u0153:[\u0153Tool\u0153]}-Agent-xeg6y{\u0153fieldName\u0153:\u0153tools\u0153,\u0153id\u0153:\u0153Agent-xeg6y\u0153,\u0153inputTypes\u0153:[\u0153Tool\u0153],\u0153type\u0153:\u0153other\u0153}",
                    "source": "URL-VCoZD",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153URL\u0153, \u0153id\u0153: \u0153URL-VCoZD\u0153, \u0153name\u0153: \u0153component_as_tool\u0153, \u0153output_types\u0153: [\u0153Tool\u0153]}",
                    "target": "Agent-xeg6y",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153tools\u0153, \u0153id\u0153: \u0153Agent-xeg6y\u0153, \u0153inputTypes\u0153: [\u0153Tool\u0153], \u0153type\u0153: \u0153other\u0153}"
                },
                {
                    "animated": false,
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "CalculatorComponent",
                            "id": "CalculatorComponent-pSb5r",
                            "name": "component_as_tool",
                            "output_types": [
                                "Tool"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "tools",
                            "id": "Agent-txo0a",
                            "inputTypes": [
                                "Tool"
                            ],
                            "type": "other"
                        }
                    },
                    "id": "xy-edge__CalculatorComponent-pSb5r{\u0153dataType\u0153:\u0153CalculatorComponent\u0153,\u0153id\u0153:\u0153CalculatorComponent-pSb5r\u0153,\u0153name\u0153:\u0153component_as_tool\u0153,\u0153output_types\u0153:[\u0153Tool\u0153]}-Agent-txo0a{\u0153fieldName\u0153:\u0153tools\u0153,\u0153id\u0153:\u0153Agent-txo0a\u0153,\u0153inputTypes\u0153:[\u0153Tool\u0153],\u0153type\u0153:\u0153other\u0153}",
                    "source": "CalculatorComponent-pSb5r",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153CalculatorComponent\u0153, \u0153id\u0153: \u0153CalculatorComponent-pSb5r\u0153, \u0153name\u0153: \u0153component_as_tool\u0153, \u0153output_types\u0153: [\u0153Tool\u0153]}",
                    "target": "Agent-txo0a",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153tools\u0153, \u0153id\u0153: \u0153Agent-txo0a\u0153, \u0153inputTypes\u0153: [\u0153Tool\u0153], \u0153type\u0153: \u0153other\u0153}"
                },
                {
                    "animated": false,
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "SearchComponent",
                            "id": "SearchComponent-BSabY",
                            "name": "component_as_tool",
                            "output_types": [
                                "Tool"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "tools",
                            "id": "Agent-Bsq4j",
                            "inputTypes": [
                                "Tool"
                            ],
                            "type": "other"
                        }
                    },
                    "id": "xy-edge__SearchComponent-BSabY{\u0153dataType\u0153:\u0153SearchComponent\u0153,\u0153id\u0153:\u0153SearchComponent-BSabY\u0153,\u0153name\u0153:\u0153component_as_tool\u0153,\u0153output_types\u0153:[\u0153Tool\u0153]}-Agent-Bsq4j{\u0153fieldName\u0153:\u0153tools\u0153,\u0153id\u0153:\u0153Agent-Bsq4j\u0153,\u0153inputTypes\u0153:[\u0153Tool\u0153],\u0153type\u0153:\u0153other\u0153}",
                    "source": "SearchComponent-BSabY",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153SearchComponent\u0153, \u0153id\u0153: \u0153SearchComponent-BSabY\u0153, \u0153name\u0153: \u0153component_as_tool\u0153, \u0153output_types\u0153: [\u0153Tool\u0153]}",
                    "target": "Agent-Bsq4j",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153tools\u0153, \u0153id\u0153: \u0153Agent-Bsq4j\u0153, \u0153inputTypes\u0153: [\u0153Tool\u0153], \u0153type\u0153: \u0153other\u0153}"
                }
            ],
            "nodes": [
                {
                    "data": {
                        "id": "ChatInput-VKkd5",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Get chat inputs from the Playground.",
                            "display_name": "Chat Input",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "input_value",
                                "should_store_message",
                                "sender",
                                "sender_name",
                                "session_id",
                                "files"
                            ],
                            "frozen": false,
                            "icon": "MessagesSquare",
                            "legacy": false,
                            "lf_version": "1.1.1",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "message_response",
                                    "name": "message",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "background_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Background Color",
                                    "dynamic": false,
                                    "info": "The background color of the icon.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "background_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "chat_icon": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Icon",
                                    "dynamic": false,
                                    "info": "The icon of the message.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "chat_icon",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import (\n    DropdownInput,\n    FileInput,\n    MessageTextInput,\n    MultilineInput,\n    Output,\n)\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_USER,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatInput\"\n    minimized = True\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n            input_types=[],\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    async def message_response(self) -> Message:\n        background_color = self.background_color\n        text_color = self.text_color\n        icon = self.chat_icon\n\n        message = await Message.create(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n            properties={\n                \"background_color\": background_color,\n                \"text_color\": text_color,\n                \"icon\": icon,\n            },\n        )\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n"
                                },
                                "files": {
                                    "_input_type": "FileInput",
                                    "advanced": true,
                                    "display_name": "Files",
                                    "dynamic": false,
                                    "fileTypes": [
                                        "txt",
                                        "md",
                                        "mdx",
                                        "csv",
                                        "json",
                                        "yaml",
                                        "yml",
                                        "xml",
                                        "html",
                                        "htm",
                                        "pdf",
                                        "docx",
                                        "py",
                                        "sh",
                                        "sql",
                                        "js",
                                        "ts",
                                        "tsx",
                                        "jpg",
                                        "jpeg",
                                        "png",
                                        "bmp",
                                        "image"
                                    ],
                                    "file_path": "",
                                    "info": "Files to be sent with the message.",
                                    "list": true,
                                    "name": "files",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "file",
                                    "value": ""
                                },
                                "input_value": {
                                    "_input_type": "MultilineInput",
                                    "advanced": false,
                                    "display_name": "Text",
                                    "dynamic": false,
                                    "info": "Message to be passed as input.",
                                    "input_types": [],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Create a travel itinerary for a trip from S\u00e3o Paulo to Uberl\u00e2ndia, MG on August 23, 2024. The traveler enjoys drinking beer, eating p\u00e3o de queijo, and drinking special coffee."
                                },
                                "sender": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Sender Type",
                                    "dynamic": false,
                                    "info": "Type of sender.",
                                    "name": "sender",
                                    "options": [
                                        "Machine",
                                        "User"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "User"
                                },
                                "sender_name": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Sender Name",
                                    "dynamic": false,
                                    "info": "Name of the sender.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "sender_name",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "User"
                                },
                                "session_id": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Session ID",
                                    "dynamic": false,
                                    "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "session_id",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "should_store_message": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Store Messages",
                                    "dynamic": false,
                                    "info": "Store the message in the history.",
                                    "list": false,
                                    "name": "should_store_message",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "text_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Text Color",
                                    "dynamic": false,
                                    "info": "The text color of the name",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "text_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                }
                            }
                        },
                        "type": "ChatInput"
                    },
                    "dragging": false,
                    "height": 262,
                    "id": "ChatInput-VKkd5",
                    "measured": {
                        "height": 262,
                        "width": 360
                    },
                    "position": {
                        "x": 1756.77096149088,
                        "y": 292.73476765276695
                    },
                    "positionAbsolute": {
                        "x": 1756.77096149088,
                        "y": 292.73476765276695
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 360
                },
                {
                    "data": {
                        "description": "Display a chat message in the Playground.",
                        "display_name": "Chat Output",
                        "id": "ChatOutput-bHF59",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Display a chat message in the Playground.",
                            "display_name": "Chat Output",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "input_value",
                                "should_store_message",
                                "sender",
                                "sender_name",
                                "session_id",
                                "data_template",
                                "background_color",
                                "chat_icon",
                                "text_color"
                            ],
                            "frozen": false,
                            "icon": "MessagesSquare",
                            "legacy": false,
                            "lf_version": "1.1.1",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "message_response",
                                    "name": "message",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "background_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Background Color",
                                    "dynamic": false,
                                    "info": "The background color of the icon.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "background_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "chat_icon": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Icon",
                                    "dynamic": false,
                                    "info": "The icon of the message.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "chat_icon",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, MessageInput, MessageTextInput, Output\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        MessageInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            source_dict[\"source\"] = source\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n        background_color = self.background_color\n        text_color = self.text_color\n        if self.chat_icon:\n            icon = self.chat_icon\n        message = self.input_value if isinstance(self.input_value, Message) else Message(text=self.input_value)\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n        message.properties.icon = icon\n        message.properties.background_color = background_color\n        message.properties.text_color = text_color\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n"
                                },
                                "data_template": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Data Template",
                                    "dynamic": false,
                                    "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "data_template",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "{text}"
                                },
                                "input_value": {
                                    "_input_type": "MessageInput",
                                    "advanced": false,
                                    "display_name": "Text",
                                    "dynamic": false,
                                    "info": "Message to be passed as output.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "sender": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Sender Type",
                                    "dynamic": false,
                                    "info": "Type of sender.",
                                    "name": "sender",
                                    "options": [
                                        "Machine",
                                        "User"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Machine"
                                },
                                "sender_name": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Sender Name",
                                    "dynamic": false,
                                    "info": "Name of the sender.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "sender_name",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "AI"
                                },
                                "session_id": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Session ID",
                                    "dynamic": false,
                                    "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "session_id",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "should_store_message": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Store Messages",
                                    "dynamic": false,
                                    "info": "Store the message in the history.",
                                    "list": false,
                                    "name": "should_store_message",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "text_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Text Color",
                                    "dynamic": false,
                                    "info": "The text color of the name",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "text_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "ChatOutput"
                    },
                    "dragging": false,
                    "height": 262,
                    "id": "ChatOutput-bHF59",
                    "measured": {
                        "height": 262,
                        "width": 360
                    },
                    "position": {
                        "x": 4349.229697347143,
                        "y": 620.5490494265098
                    },
                    "positionAbsolute": {
                        "x": 4349.229697347143,
                        "y": 620.5490494265098
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 360
                },
                {
                    "data": {
                        "description": "Define the agent's instructions, then enter a task to complete using tools.",
                        "display_name": "City Selection Agent",
                        "id": "Agent-Bsq4j",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Define the agent's instructions, then enter a task to complete using tools.",
                            "display_name": "City Selection Agent",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "agent_llm",
                                "max_tokens",
                                "model_kwargs",
                                "json_mode",
                                "output_schema",
                                "model_name",
                                "openai_api_base",
                                "api_key",
                                "temperature",
                                "seed",
                                "output_parser",
                                "system_prompt",
                                "tools",
                                "input_value",
                                "handle_parsing_errors",
                                "verbose",
                                "max_iterations",
                                "agent_description",
                                "memory",
                                "sender",
                                "sender_name",
                                "n_messages",
                                "session_id",
                                "order",
                                "template",
                                "add_current_date_tool"
                            ],
                            "frozen": false,
                            "icon": "bot",
                            "legacy": false,
                            "lf_version": "1.1.1",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Response",
                                    "method": "message_response",
                                    "name": "response",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "add_current_date_tool": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Current Date",
                                    "dynamic": false,
                                    "info": "If true, will add a tool to the agent that returns the current date.",
                                    "list": false,
                                    "name": "add_current_date_tool",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "agent_description": {
                                    "_input_type": "MultilineInput",
                                    "advanced": true,
                                    "display_name": "Agent Description [Deprecated]",
                                    "dynamic": false,
                                    "info": "The description of the agent. This is only used when in Tool Mode. Defaults to 'A helpful assistant with access to the following tools:' and tools are added dynamically. This feature is deprecated and will be removed in future versions.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "agent_description",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "A helpful assistant with access to the following tools:"
                                },
                                "agent_llm": {
                                    "_input_type": "DropdownInput",
                                    "advanced": false,
                                    "combobox": false,
                                    "display_name": "Model Provider",
                                    "dynamic": false,
                                    "info": "The provider of the language model that the agent will use to generate responses.",
                                    "input_types": [],
                                    "name": "agent_llm",
                                    "options": [
                                        "Amazon Bedrock",
                                        "Anthropic",
                                        "Azure OpenAI",
                                        "Google Generative AI",
                                        "Groq",
                                        "NVIDIA",
                                        "OpenAI",
                                        "Custom"
                                    ],
                                    "placeholder": "",
                                    "real_time_refresh": true,
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "OpenAI"
                                },
                                "api_key": {
                                    "_input_type": "SecretStrInput",
                                    "advanced": false,
                                    "display_name": "OpenAI API Key",
                                    "dynamic": false,
                                    "info": "The OpenAI API Key to use for the OpenAI model.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "load_from_db": true,
                                    "name": "api_key",
                                    "password": true,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": "OPENAI_API_KEY"
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langchain_core.tools import StructuredTool\n\nfrom langflow.base.agents.agent import LCToolsAgentComponent\nfrom langflow.base.models.model_input_constants import (\n    ALL_PROVIDER_FIELDS,\n    MODEL_DYNAMIC_UPDATE_FIELDS,\n    MODEL_PROVIDERS_DICT,\n)\nfrom langflow.base.models.model_utils import get_model_name\nfrom langflow.components.helpers import CurrentDateComponent\nfrom langflow.components.helpers.memory import MemoryComponent\nfrom langflow.components.langchain_utilities.tool_calling import ToolCallingAgentComponent\nfrom langflow.custom.utils import update_component_build_config\nfrom langflow.io import BoolInput, DropdownInput, MultilineInput, Output\nfrom langflow.logging import logger\nfrom langflow.schema.dotdict import dotdict\nfrom langflow.schema.message import Message\n\n\ndef set_advanced_true(component_input):\n    component_input.advanced = True\n    return component_input\n\n\nclass AgentComponent(ToolCallingAgentComponent):\n    display_name: str = \"Agent\"\n    description: str = \"Define the agent's instructions, then enter a task to complete using tools.\"\n    icon = \"bot\"\n    beta = False\n    name = \"Agent\"\n\n    memory_inputs = [set_advanced_true(component_input) for component_input in MemoryComponent().inputs]\n\n    inputs = [\n        DropdownInput(\n            name=\"agent_llm\",\n            display_name=\"Model Provider\",\n            info=\"The provider of the language model that the agent will use to generate responses.\",\n            options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n            value=\"OpenAI\",\n            real_time_refresh=True,\n            input_types=[],\n        ),\n        *MODEL_PROVIDERS_DICT[\"OpenAI\"][\"inputs\"],\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=\"Agent Instructions\",\n            info=\"System Prompt: Initial instructions and context provided to guide the agent's behavior.\",\n            value=\"You are a helpful assistant that can use tools to answer questions and perform tasks.\",\n            advanced=False,\n        ),\n        *LCToolsAgentComponent._base_inputs,\n        *memory_inputs,\n        BoolInput(\n            name=\"add_current_date_tool\",\n            display_name=\"Current Date\",\n            advanced=True,\n            info=\"If true, will add a tool to the agent that returns the current date.\",\n            value=True,\n        ),\n    ]\n    outputs = [Output(name=\"response\", display_name=\"Response\", method=\"message_response\")]\n\n    async def message_response(self) -> Message:\n        try:\n            llm_model, display_name = self.get_llm()\n            if llm_model is None:\n                msg = \"No language model selected\"\n                raise ValueError(msg)\n            self.model_name = get_model_name(llm_model, display_name=display_name)\n        except Exception as e:\n            # Log the error for debugging purposes\n            logger.error(f\"Error retrieving language model: {e}\")\n            raise\n\n        try:\n            self.chat_history = await self.get_memory_data()\n        except Exception as e:\n            logger.error(f\"Error retrieving chat history: {e}\")\n            raise\n\n        if self.add_current_date_tool:\n            try:\n                if not isinstance(self.tools, list):  # type: ignore[has-type]\n                    self.tools = []\n                # Convert CurrentDateComponent to a StructuredTool\n                current_date_tool = (await CurrentDateComponent().to_toolkit()).pop(0)\n                # current_date_tool = CurrentDateComponent().to_toolkit()[0]\n                if isinstance(current_date_tool, StructuredTool):\n                    self.tools.append(current_date_tool)\n                else:\n                    msg = \"CurrentDateComponent must be converted to a StructuredTool\"\n                    raise TypeError(msg)\n            except Exception as e:\n                logger.error(f\"Error adding current date tool: {e}\")\n                raise\n\n        if not self.tools:\n            msg = \"Tools are required to run the agent.\"\n            logger.error(msg)\n            raise ValueError(msg)\n\n        try:\n            self.set(\n                llm=llm_model,\n                tools=self.tools,\n                chat_history=self.chat_history,\n                input_value=self.input_value,\n                system_prompt=self.system_prompt,\n            )\n            agent = self.create_agent_runnable()\n        except Exception as e:\n            logger.error(f\"Error setting up the agent: {e}\")\n            raise\n\n        return await self.run_agent(agent)\n\n    async def get_memory_data(self):\n        memory_kwargs = {\n            component_input.name: getattr(self, f\"{component_input.name}\") for component_input in self.memory_inputs\n        }\n        # filter out empty values\n        memory_kwargs = {k: v for k, v in memory_kwargs.items() if v}\n\n        return await MemoryComponent().set(**memory_kwargs).retrieve_messages()\n\n    def get_llm(self):\n        if isinstance(self.agent_llm, str):\n            try:\n                provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n                if provider_info:\n                    component_class = provider_info.get(\"component_class\")\n                    display_name = component_class.display_name\n                    inputs = provider_info.get(\"inputs\")\n                    prefix = provider_info.get(\"prefix\", \"\")\n                    return (\n                        self._build_llm_model(component_class, inputs, prefix),\n                        display_name,\n                    )\n            except Exception as e:\n                msg = f\"Error building {self.agent_llm} language model\"\n                raise ValueError(msg) from e\n        return self.agent_llm, None\n\n    def _build_llm_model(self, component, inputs, prefix=\"\"):\n        model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n        return component.set(**model_kwargs).build_model()\n\n    def set_component_params(self, component):\n        provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n        if provider_info:\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\")\n            model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n\n            return component.set(**model_kwargs)\n        return component\n\n    def delete_fields(self, build_config: dotdict, fields: dict | list[str]) -> None:\n        \"\"\"Delete specified fields from build_config.\"\"\"\n        for field in fields:\n            build_config.pop(field, None)\n\n    def update_input_types(self, build_config: dotdict) -> dotdict:\n        \"\"\"Update input types for all fields in build_config.\"\"\"\n        for key, value in build_config.items():\n            if isinstance(value, dict):\n                if value.get(\"input_types\") is None:\n                    build_config[key][\"input_types\"] = []\n            elif hasattr(value, \"input_types\") and value.input_types is None:\n                value.input_types = []\n        return build_config\n\n    async def update_build_config(\n        self, build_config: dotdict, field_value: str, field_name: str | None = None\n    ) -> dotdict:\n        # Iterate over all providers in the MODEL_PROVIDERS_DICT\n        # Existing logic for updating build_config\n        if field_name in (\"agent_llm\",):\n            build_config[\"agent_llm\"][\"value\"] = field_value\n            provider_info = MODEL_PROVIDERS_DICT.get(field_value)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call the component class's update_build_config method\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n\n            provider_configs: dict[str, tuple[dict, list[dict]]] = {\n                provider: (\n                    MODEL_PROVIDERS_DICT[provider][\"fields\"],\n                    [\n                        MODEL_PROVIDERS_DICT[other_provider][\"fields\"]\n                        for other_provider in MODEL_PROVIDERS_DICT\n                        if other_provider != provider\n                    ],\n                )\n                for provider in MODEL_PROVIDERS_DICT\n            }\n            if field_value in provider_configs:\n                fields_to_add, fields_to_delete = provider_configs[field_value]\n\n                # Delete fields from other providers\n                for fields in fields_to_delete:\n                    self.delete_fields(build_config, fields)\n\n                # Add provider-specific fields\n                if field_value == \"OpenAI\" and not any(field in build_config for field in fields_to_add):\n                    build_config.update(fields_to_add)\n                else:\n                    build_config.update(fields_to_add)\n                # Reset input types for agent_llm\n                build_config[\"agent_llm\"][\"input_types\"] = []\n            elif field_value == \"Custom\":\n                # Delete all provider fields\n                self.delete_fields(build_config, ALL_PROVIDER_FIELDS)\n                # Update with custom component\n                custom_component = DropdownInput(\n                    name=\"agent_llm\",\n                    display_name=\"Language Model\",\n                    options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n                    value=\"Custom\",\n                    real_time_refresh=True,\n                    input_types=[\"LanguageModel\"],\n                )\n                build_config.update({\"agent_llm\": custom_component.to_dict()})\n            # Update input types for all fields\n            build_config = self.update_input_types(build_config)\n\n            # Validate required keys\n            default_keys = [\n                \"code\",\n                \"_type\",\n                \"agent_llm\",\n                \"tools\",\n                \"input_value\",\n                \"add_current_date_tool\",\n                \"system_prompt\",\n                \"agent_description\",\n                \"max_iterations\",\n                \"handle_parsing_errors\",\n                \"verbose\",\n            ]\n            missing_keys = [key for key in default_keys if key not in build_config]\n            if missing_keys:\n                msg = f\"Missing required keys in build_config: {missing_keys}\"\n                raise ValueError(msg)\n        if (\n            isinstance(self.agent_llm, str)\n            and self.agent_llm in MODEL_PROVIDERS_DICT\n            and field_name in MODEL_DYNAMIC_UPDATE_FIELDS\n        ):\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                component_class = self.set_component_params(component_class)\n                prefix = provider_info.get(\"prefix\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call each component class's update_build_config method\n                    # remove the prefix from the field_name\n                    if isinstance(field_name, str) and isinstance(prefix, str):\n                        field_name = field_name.replace(prefix, \"\")\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n        return dotdict({k: v.to_dict() if hasattr(v, \"to_dict\") else v for k, v in build_config.items()})\n"
                                },
                                "handle_parsing_errors": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Handle Parse Errors",
                                    "dynamic": false,
                                    "info": "Should the Agent fix errors when reading user input for better processing?",
                                    "list": false,
                                    "name": "handle_parsing_errors",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "input_value": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": false,
                                    "display_name": "Input",
                                    "dynamic": false,
                                    "info": "The input provided by the user for the agent to process.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": true,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "json_mode": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "JSON Mode",
                                    "dynamic": false,
                                    "info": "If True, it will output JSON regardless of passing a schema.",
                                    "list": false,
                                    "name": "json_mode",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "max_iterations": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Max Iterations",
                                    "dynamic": false,
                                    "info": "The maximum number of attempts the agent can make to complete its task before it stops.",
                                    "list": false,
                                    "name": "max_iterations",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 15
                                },
                                "max_tokens": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Max Tokens",
                                    "dynamic": false,
                                    "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                                    "list": false,
                                    "name": "max_tokens",
                                    "placeholder": "",
                                    "range_spec": {
                                        "max": 128000,
                                        "min": 0,
                                        "step": 0.1,
                                        "step_type": "float"
                                    },
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": ""
                                },
                                "memory": {
                                    "_input_type": "HandleInput",
                                    "advanced": true,
                                    "display_name": "External Memory",
                                    "dynamic": false,
                                    "info": "Retrieve messages from an external memory. If empty, it will use the Langflow tables.",
                                    "input_types": [
                                        "Memory"
                                    ],
                                    "list": false,
                                    "name": "memory",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "other",
                                    "value": ""
                                },
                                "model_kwargs": {
                                    "_input_type": "DictInput",
                                    "advanced": true,
                                    "display_name": "Model Kwargs",
                                    "dynamic": false,
                                    "info": "Additional keyword arguments to pass to the model.",
                                    "list": false,
                                    "name": "model_kwargs",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "type": "dict",
                                    "value": {}
                                },
                                "model_name": {
                                    "_input_type": "DropdownInput",
                                    "advanced": false,
                                    "combobox": true,
                                    "display_name": "Model Name",
                                    "dynamic": false,
                                    "info": "To see the model names, first choose a provider. Then, enter your API key and click the refresh button next to the model name.",
                                    "name": "model_name",
                                    "options": [
                                        "gpt-4o-mini",
                                        "gpt-4o",
                                        "gpt-4-turbo",
                                        "gpt-4-turbo-preview",
                                        "gpt-4",
                                        "gpt-3.5-turbo",
                                        "gpt-3.5-turbo-0125"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "gpt-4o-mini"
                                },
                                "n_messages": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Number of Messages",
                                    "dynamic": false,
                                    "info": "Number of messages to retrieve.",
                                    "list": false,
                                    "name": "n_messages",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 100
                                },
                                "openai_api_base": {
                                    "_input_type": "StrInput",
                                    "advanced": true,
                                    "display_name": "OpenAI API Base",
                                    "dynamic": false,
                                    "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "openai_api_base",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "order": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Order",
                                    "dynamic": false,
                                    "info": "Order of the messages.",
                                    "name": "order",
                                    "options": [
                                        "Ascending",
                                        "Descending"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Ascending"
                                },
                                "seed": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Seed",
                                    "dynamic": false,
                                    "info": "The seed controls the reproducibility of the job.",
                                    "list": false,
                                    "name": "seed",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 1
                                },
                                "sender": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Sender Type",
                                    "dynamic": false,
                                    "info": "Filter by sender type.",
                                    "name": "sender",
                                    "options": [
                                        "Machine",
                                        "User",
                                        "Machine and User"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Machine and User"
                                },
                                "sender_name": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Sender Name",
                                    "dynamic": false,
                                    "info": "Filter by sender name.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "sender_name",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "session_id": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Session ID",
                                    "dynamic": false,
                                    "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "session_id",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "system_prompt": {
                                    "_input_type": "MultilineInput",
                                    "advanced": false,
                                    "display_name": "Agent Instructions",
                                    "dynamic": false,
                                    "info": "System Prompt: Initial instructions and context provided to guide the agent's behavior.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "system_prompt",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "You are a helpful assistant that can use tools to answer questions and perform tasks."
                                },
                                "temperature": {
                                    "_input_type": "FloatInput",
                                    "advanced": true,
                                    "display_name": "Temperature",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "name": "temperature",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "float",
                                    "value": 0.1
                                },
                                "template": {
                                    "_input_type": "MultilineInput",
                                    "advanced": true,
                                    "display_name": "Template",
                                    "dynamic": false,
                                    "info": "The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "template",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "{sender_name}: {text}"
                                },
                                "tools": {
                                    "_input_type": "HandleInput",
                                    "advanced": false,
                                    "display_name": "Tools",
                                    "dynamic": false,
                                    "info": "These are the tools that the agent can use to help with tasks.",
                                    "input_types": [
                                        "Tool"
                                    ],
                                    "list": true,
                                    "name": "tools",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "other",
                                    "value": ""
                                },
                                "verbose": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Verbose",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "name": "verbose",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "Agent"
                    },
                    "dragging": true,
                    "height": 725,
                    "id": "Agent-Bsq4j",
                    "measured": {
                        "height": 725,
                        "width": 360
                    },
                    "position": {
                        "x": 2472.7748760933105,
                        "y": 335.66187210240537
                    },
                    "positionAbsolute": {
                        "x": 2472.7748760933105,
                        "y": 335.66187210240537
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 360
                },
                {
                    "data": {
                        "description": "Define the agent's instructions, then enter a task to complete using tools.",
                        "display_name": "Local Expert Agent",
                        "id": "Agent-xeg6y",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Define the agent's instructions, then enter a task to complete using tools.",
                            "display_name": "Local Expert Agent",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "agent_llm",
                                "max_tokens",
                                "model_kwargs",
                                "json_mode",
                                "output_schema",
                                "model_name",
                                "openai_api_base",
                                "api_key",
                                "temperature",
                                "seed",
                                "output_parser",
                                "system_prompt",
                                "tools",
                                "input_value",
                                "handle_parsing_errors",
                                "verbose",
                                "max_iterations",
                                "agent_description",
                                "memory",
                                "sender",
                                "sender_name",
                                "n_messages",
                                "session_id",
                                "order",
                                "template",
                                "add_current_date_tool"
                            ],
                            "frozen": false,
                            "icon": "bot",
                            "legacy": false,
                            "lf_version": "1.1.1",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Response",
                                    "method": "message_response",
                                    "name": "response",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "add_current_date_tool": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Current Date",
                                    "dynamic": false,
                                    "info": "If true, will add a tool to the agent that returns the current date.",
                                    "list": false,
                                    "name": "add_current_date_tool",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "agent_description": {
                                    "_input_type": "MultilineInput",
                                    "advanced": true,
                                    "display_name": "Agent Description [Deprecated]",
                                    "dynamic": false,
                                    "info": "The description of the agent. This is only used when in Tool Mode. Defaults to 'A helpful assistant with access to the following tools:' and tools are added dynamically. This feature is deprecated and will be removed in future versions.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "agent_description",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "A helpful assistant with access to the following tools:"
                                },
                                "agent_llm": {
                                    "_input_type": "DropdownInput",
                                    "advanced": false,
                                    "combobox": false,
                                    "display_name": "Model Provider",
                                    "dynamic": false,
                                    "info": "The provider of the language model that the agent will use to generate responses.",
                                    "input_types": [],
                                    "name": "agent_llm",
                                    "options": [
                                        "Amazon Bedrock",
                                        "Anthropic",
                                        "Azure OpenAI",
                                        "Google Generative AI",
                                        "Groq",
                                        "NVIDIA",
                                        "OpenAI",
                                        "Custom"
                                    ],
                                    "placeholder": "",
                                    "real_time_refresh": true,
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "OpenAI"
                                },
                                "api_key": {
                                    "_input_type": "SecretStrInput",
                                    "advanced": false,
                                    "display_name": "OpenAI API Key",
                                    "dynamic": false,
                                    "info": "The OpenAI API Key to use for the OpenAI model.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "load_from_db": true,
                                    "name": "api_key",
                                    "password": true,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": "OPENAI_API_KEY"
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langchain_core.tools import StructuredTool\n\nfrom langflow.base.agents.agent import LCToolsAgentComponent\nfrom langflow.base.models.model_input_constants import (\n    ALL_PROVIDER_FIELDS,\n    MODEL_DYNAMIC_UPDATE_FIELDS,\n    MODEL_PROVIDERS_DICT,\n)\nfrom langflow.base.models.model_utils import get_model_name\nfrom langflow.components.helpers import CurrentDateComponent\nfrom langflow.components.helpers.memory import MemoryComponent\nfrom langflow.components.langchain_utilities.tool_calling import ToolCallingAgentComponent\nfrom langflow.custom.utils import update_component_build_config\nfrom langflow.io import BoolInput, DropdownInput, MultilineInput, Output\nfrom langflow.logging import logger\nfrom langflow.schema.dotdict import dotdict\nfrom langflow.schema.message import Message\n\n\ndef set_advanced_true(component_input):\n    component_input.advanced = True\n    return component_input\n\n\nclass AgentComponent(ToolCallingAgentComponent):\n    display_name: str = \"Agent\"\n    description: str = \"Define the agent's instructions, then enter a task to complete using tools.\"\n    icon = \"bot\"\n    beta = False\n    name = \"Agent\"\n\n    memory_inputs = [set_advanced_true(component_input) for component_input in MemoryComponent().inputs]\n\n    inputs = [\n        DropdownInput(\n            name=\"agent_llm\",\n            display_name=\"Model Provider\",\n            info=\"The provider of the language model that the agent will use to generate responses.\",\n            options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n            value=\"OpenAI\",\n            real_time_refresh=True,\n            input_types=[],\n        ),\n        *MODEL_PROVIDERS_DICT[\"OpenAI\"][\"inputs\"],\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=\"Agent Instructions\",\n            info=\"System Prompt: Initial instructions and context provided to guide the agent's behavior.\",\n            value=\"You are a helpful assistant that can use tools to answer questions and perform tasks.\",\n            advanced=False,\n        ),\n        *LCToolsAgentComponent._base_inputs,\n        *memory_inputs,\n        BoolInput(\n            name=\"add_current_date_tool\",\n            display_name=\"Current Date\",\n            advanced=True,\n            info=\"If true, will add a tool to the agent that returns the current date.\",\n            value=True,\n        ),\n    ]\n    outputs = [Output(name=\"response\", display_name=\"Response\", method=\"message_response\")]\n\n    async def message_response(self) -> Message:\n        try:\n            llm_model, display_name = self.get_llm()\n            if llm_model is None:\n                msg = \"No language model selected\"\n                raise ValueError(msg)\n            self.model_name = get_model_name(llm_model, display_name=display_name)\n        except Exception as e:\n            # Log the error for debugging purposes\n            logger.error(f\"Error retrieving language model: {e}\")\n            raise\n\n        try:\n            self.chat_history = await self.get_memory_data()\n        except Exception as e:\n            logger.error(f\"Error retrieving chat history: {e}\")\n            raise\n\n        if self.add_current_date_tool:\n            try:\n                if not isinstance(self.tools, list):  # type: ignore[has-type]\n                    self.tools = []\n                # Convert CurrentDateComponent to a StructuredTool\n                current_date_tool = (await CurrentDateComponent().to_toolkit()).pop(0)\n                # current_date_tool = CurrentDateComponent().to_toolkit()[0]\n                if isinstance(current_date_tool, StructuredTool):\n                    self.tools.append(current_date_tool)\n                else:\n                    msg = \"CurrentDateComponent must be converted to a StructuredTool\"\n                    raise TypeError(msg)\n            except Exception as e:\n                logger.error(f\"Error adding current date tool: {e}\")\n                raise\n\n        if not self.tools:\n            msg = \"Tools are required to run the agent.\"\n            logger.error(msg)\n            raise ValueError(msg)\n\n        try:\n            self.set(\n                llm=llm_model,\n                tools=self.tools,\n                chat_history=self.chat_history,\n                input_value=self.input_value,\n                system_prompt=self.system_prompt,\n            )\n            agent = self.create_agent_runnable()\n        except Exception as e:\n            logger.error(f\"Error setting up the agent: {e}\")\n            raise\n\n        return await self.run_agent(agent)\n\n    async def get_memory_data(self):\n        memory_kwargs = {\n            component_input.name: getattr(self, f\"{component_input.name}\") for component_input in self.memory_inputs\n        }\n        # filter out empty values\n        memory_kwargs = {k: v for k, v in memory_kwargs.items() if v}\n\n        return await MemoryComponent().set(**memory_kwargs).retrieve_messages()\n\n    def get_llm(self):\n        if isinstance(self.agent_llm, str):\n            try:\n                provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n                if provider_info:\n                    component_class = provider_info.get(\"component_class\")\n                    display_name = component_class.display_name\n                    inputs = provider_info.get(\"inputs\")\n                    prefix = provider_info.get(\"prefix\", \"\")\n                    return (\n                        self._build_llm_model(component_class, inputs, prefix),\n                        display_name,\n                    )\n            except Exception as e:\n                msg = f\"Error building {self.agent_llm} language model\"\n                raise ValueError(msg) from e\n        return self.agent_llm, None\n\n    def _build_llm_model(self, component, inputs, prefix=\"\"):\n        model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n        return component.set(**model_kwargs).build_model()\n\n    def set_component_params(self, component):\n        provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n        if provider_info:\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\")\n            model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n\n            return component.set(**model_kwargs)\n        return component\n\n    def delete_fields(self, build_config: dotdict, fields: dict | list[str]) -> None:\n        \"\"\"Delete specified fields from build_config.\"\"\"\n        for field in fields:\n            build_config.pop(field, None)\n\n    def update_input_types(self, build_config: dotdict) -> dotdict:\n        \"\"\"Update input types for all fields in build_config.\"\"\"\n        for key, value in build_config.items():\n            if isinstance(value, dict):\n                if value.get(\"input_types\") is None:\n                    build_config[key][\"input_types\"] = []\n            elif hasattr(value, \"input_types\") and value.input_types is None:\n                value.input_types = []\n        return build_config\n\n    async def update_build_config(\n        self, build_config: dotdict, field_value: str, field_name: str | None = None\n    ) -> dotdict:\n        # Iterate over all providers in the MODEL_PROVIDERS_DICT\n        # Existing logic for updating build_config\n        if field_name in (\"agent_llm\",):\n            build_config[\"agent_llm\"][\"value\"] = field_value\n            provider_info = MODEL_PROVIDERS_DICT.get(field_value)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call the component class's update_build_config method\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n\n            provider_configs: dict[str, tuple[dict, list[dict]]] = {\n                provider: (\n                    MODEL_PROVIDERS_DICT[provider][\"fields\"],\n                    [\n                        MODEL_PROVIDERS_DICT[other_provider][\"fields\"]\n                        for other_provider in MODEL_PROVIDERS_DICT\n                        if other_provider != provider\n                    ],\n                )\n                for provider in MODEL_PROVIDERS_DICT\n            }\n            if field_value in provider_configs:\n                fields_to_add, fields_to_delete = provider_configs[field_value]\n\n                # Delete fields from other providers\n                for fields in fields_to_delete:\n                    self.delete_fields(build_config, fields)\n\n                # Add provider-specific fields\n                if field_value == \"OpenAI\" and not any(field in build_config for field in fields_to_add):\n                    build_config.update(fields_to_add)\n                else:\n                    build_config.update(fields_to_add)\n                # Reset input types for agent_llm\n                build_config[\"agent_llm\"][\"input_types\"] = []\n            elif field_value == \"Custom\":\n                # Delete all provider fields\n                self.delete_fields(build_config, ALL_PROVIDER_FIELDS)\n                # Update with custom component\n                custom_component = DropdownInput(\n                    name=\"agent_llm\",\n                    display_name=\"Language Model\",\n                    options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n                    value=\"Custom\",\n                    real_time_refresh=True,\n                    input_types=[\"LanguageModel\"],\n                )\n                build_config.update({\"agent_llm\": custom_component.to_dict()})\n            # Update input types for all fields\n            build_config = self.update_input_types(build_config)\n\n            # Validate required keys\n            default_keys = [\n                \"code\",\n                \"_type\",\n                \"agent_llm\",\n                \"tools\",\n                \"input_value\",\n                \"add_current_date_tool\",\n                \"system_prompt\",\n                \"agent_description\",\n                \"max_iterations\",\n                \"handle_parsing_errors\",\n                \"verbose\",\n            ]\n            missing_keys = [key for key in default_keys if key not in build_config]\n            if missing_keys:\n                msg = f\"Missing required keys in build_config: {missing_keys}\"\n                raise ValueError(msg)\n        if (\n            isinstance(self.agent_llm, str)\n            and self.agent_llm in MODEL_PROVIDERS_DICT\n            and field_name in MODEL_DYNAMIC_UPDATE_FIELDS\n        ):\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                component_class = self.set_component_params(component_class)\n                prefix = provider_info.get(\"prefix\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call each component class's update_build_config method\n                    # remove the prefix from the field_name\n                    if isinstance(field_name, str) and isinstance(prefix, str):\n                        field_name = field_name.replace(prefix, \"\")\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n        return dotdict({k: v.to_dict() if hasattr(v, \"to_dict\") else v for k, v in build_config.items()})\n"
                                },
                                "handle_parsing_errors": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Handle Parse Errors",
                                    "dynamic": false,
                                    "info": "Should the Agent fix errors when reading user input for better processing?",
                                    "list": false,
                                    "name": "handle_parsing_errors",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "input_value": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": false,
                                    "display_name": "Input",
                                    "dynamic": false,
                                    "info": "The input provided by the user for the agent to process.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": true,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "json_mode": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "JSON Mode",
                                    "dynamic": false,
                                    "info": "If True, it will output JSON regardless of passing a schema.",
                                    "list": false,
                                    "name": "json_mode",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "max_iterations": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Max Iterations",
                                    "dynamic": false,
                                    "info": "The maximum number of attempts the agent can make to complete its task before it stops.",
                                    "list": false,
                                    "name": "max_iterations",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 15
                                },
                                "max_tokens": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Max Tokens",
                                    "dynamic": false,
                                    "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                                    "list": false,
                                    "name": "max_tokens",
                                    "placeholder": "",
                                    "range_spec": {
                                        "max": 128000,
                                        "min": 0,
                                        "step": 0.1,
                                        "step_type": "float"
                                    },
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": ""
                                },
                                "memory": {
                                    "_input_type": "HandleInput",
                                    "advanced": true,
                                    "display_name": "External Memory",
                                    "dynamic": false,
                                    "info": "Retrieve messages from an external memory. If empty, it will use the Langflow tables.",
                                    "input_types": [
                                        "Memory"
                                    ],
                                    "list": false,
                                    "name": "memory",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "other",
                                    "value": ""
                                },
                                "model_kwargs": {
                                    "_input_type": "DictInput",
                                    "advanced": true,
                                    "display_name": "Model Kwargs",
                                    "dynamic": false,
                                    "info": "Additional keyword arguments to pass to the model.",
                                    "list": false,
                                    "name": "model_kwargs",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "type": "dict",
                                    "value": {}
                                },
                                "model_name": {
                                    "_input_type": "DropdownInput",
                                    "advanced": false,
                                    "combobox": true,
                                    "display_name": "Model Name",
                                    "dynamic": false,
                                    "info": "To see the model names, first choose a provider. Then, enter your API key and click the refresh button next to the model name.",
                                    "name": "model_name",
                                    "options": [
                                        "gpt-4o-mini",
                                        "gpt-4o",
                                        "gpt-4-turbo",
                                        "gpt-4-turbo-preview",
                                        "gpt-4",
                                        "gpt-3.5-turbo",
                                        "gpt-3.5-turbo-0125"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "gpt-4o-mini"
                                },
                                "n_messages": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Number of Messages",
                                    "dynamic": false,
                                    "info": "Number of messages to retrieve.",
                                    "list": false,
                                    "name": "n_messages",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 100
                                },
                                "openai_api_base": {
                                    "_input_type": "StrInput",
                                    "advanced": true,
                                    "display_name": "OpenAI API Base",
                                    "dynamic": false,
                                    "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "openai_api_base",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "order": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Order",
                                    "dynamic": false,
                                    "info": "Order of the messages.",
                                    "name": "order",
                                    "options": [
                                        "Ascending",
                                        "Descending"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Ascending"
                                },
                                "seed": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Seed",
                                    "dynamic": false,
                                    "info": "The seed controls the reproducibility of the job.",
                                    "list": false,
                                    "name": "seed",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 1
                                },
                                "sender": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Sender Type",
                                    "dynamic": false,
                                    "info": "Filter by sender type.",
                                    "name": "sender",
                                    "options": [
                                        "Machine",
                                        "User",
                                        "Machine and User"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Machine and User"
                                },
                                "sender_name": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Sender Name",
                                    "dynamic": false,
                                    "info": "Filter by sender name.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "sender_name",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "session_id": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Session ID",
                                    "dynamic": false,
                                    "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "session_id",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "system_prompt": {
                                    "_input_type": "MultilineInput",
                                    "advanced": false,
                                    "display_name": "Agent Instructions",
                                    "dynamic": false,
                                    "info": "System Prompt: Initial instructions and context provided to guide the agent's behavior.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "system_prompt",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "You are a knowledgeable Local Expert with extensive information about the selected city, its attractions, and customs. Your goal is to provide the BEST insights about the city. Compile an in-depth guide for travelers, including key attractions, local customs, special events, and daily activity recommendations. Focus on hidden gems and local hotspots. Your final output should be a comprehensive city guide, rich in cultural insights and practical tips."
                                },
                                "temperature": {
                                    "_input_type": "FloatInput",
                                    "advanced": true,
                                    "display_name": "Temperature",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "name": "temperature",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "float",
                                    "value": 0.1
                                },
                                "template": {
                                    "_input_type": "MultilineInput",
                                    "advanced": true,
                                    "display_name": "Template",
                                    "dynamic": false,
                                    "info": "The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "template",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "{sender_name}: {text}"
                                },
                                "tools": {
                                    "_input_type": "HandleInput",
                                    "advanced": false,
                                    "display_name": "Tools",
                                    "dynamic": false,
                                    "info": "These are the tools that the agent can use to help with tasks.",
                                    "input_types": [
                                        "Tool"
                                    ],
                                    "list": true,
                                    "name": "tools",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "other",
                                    "value": ""
                                },
                                "verbose": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Verbose",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "name": "verbose",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "Agent"
                    },
                    "dragging": false,
                    "height": 725,
                    "id": "Agent-xeg6y",
                    "measured": {
                        "height": 725,
                        "width": 360
                    },
                    "position": {
                        "x": 3185.66991544494,
                        "y": 355.95841004876377
                    },
                    "positionAbsolute": {
                        "x": 3185.66991544494,
                        "y": 355.95841004876377
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 360
                },
                {
                    "data": {
                        "description": "Define the agent's instructions, then enter a task to complete using tools.",
                        "display_name": "Travel Concierge Agent",
                        "id": "Agent-txo0a",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Define the agent's instructions, then enter a task to complete using tools.",
                            "display_name": "Travel Concierge Agent",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "agent_llm",
                                "max_tokens",
                                "model_kwargs",
                                "json_mode",
                                "output_schema",
                                "model_name",
                                "openai_api_base",
                                "api_key",
                                "temperature",
                                "seed",
                                "output_parser",
                                "system_prompt",
                                "tools",
                                "input_value",
                                "handle_parsing_errors",
                                "verbose",
                                "max_iterations",
                                "agent_description",
                                "memory",
                                "sender",
                                "sender_name",
                                "n_messages",
                                "session_id",
                                "order",
                                "template",
                                "add_current_date_tool"
                            ],
                            "frozen": false,
                            "icon": "bot",
                            "legacy": false,
                            "lf_version": "1.1.1",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Response",
                                    "method": "message_response",
                                    "name": "response",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "add_current_date_tool": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Current Date",
                                    "dynamic": false,
                                    "info": "If true, will add a tool to the agent that returns the current date.",
                                    "list": false,
                                    "name": "add_current_date_tool",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "agent_description": {
                                    "_input_type": "MultilineInput",
                                    "advanced": true,
                                    "display_name": "Agent Description [Deprecated]",
                                    "dynamic": false,
                                    "info": "The description of the agent. This is only used when in Tool Mode. Defaults to 'A helpful assistant with access to the following tools:' and tools are added dynamically. This feature is deprecated and will be removed in future versions.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "agent_description",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "A helpful assistant with access to the following tools:"
                                },
                                "agent_llm": {
                                    "_input_type": "DropdownInput",
                                    "advanced": false,
                                    "combobox": false,
                                    "display_name": "Model Provider",
                                    "dynamic": false,
                                    "info": "The provider of the language model that the agent will use to generate responses.",
                                    "input_types": [],
                                    "name": "agent_llm",
                                    "options": [
                                        "Amazon Bedrock",
                                        "Anthropic",
                                        "Azure OpenAI",
                                        "Google Generative AI",
                                        "Groq",
                                        "NVIDIA",
                                        "OpenAI",
                                        "Custom"
                                    ],
                                    "placeholder": "",
                                    "real_time_refresh": true,
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "OpenAI"
                                },
                                "api_key": {
                                    "_input_type": "SecretStrInput",
                                    "advanced": false,
                                    "display_name": "OpenAI API Key",
                                    "dynamic": false,
                                    "info": "The OpenAI API Key to use for the OpenAI model.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "load_from_db": true,
                                    "name": "api_key",
                                    "password": true,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": "OPENAI_API_KEY"
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langchain_core.tools import StructuredTool\n\nfrom langflow.base.agents.agent import LCToolsAgentComponent\nfrom langflow.base.models.model_input_constants import (\n    ALL_PROVIDER_FIELDS,\n    MODEL_DYNAMIC_UPDATE_FIELDS,\n    MODEL_PROVIDERS_DICT,\n)\nfrom langflow.base.models.model_utils import get_model_name\nfrom langflow.components.helpers import CurrentDateComponent\nfrom langflow.components.helpers.memory import MemoryComponent\nfrom langflow.components.langchain_utilities.tool_calling import ToolCallingAgentComponent\nfrom langflow.custom.utils import update_component_build_config\nfrom langflow.io import BoolInput, DropdownInput, MultilineInput, Output\nfrom langflow.logging import logger\nfrom langflow.schema.dotdict import dotdict\nfrom langflow.schema.message import Message\n\n\ndef set_advanced_true(component_input):\n    component_input.advanced = True\n    return component_input\n\n\nclass AgentComponent(ToolCallingAgentComponent):\n    display_name: str = \"Agent\"\n    description: str = \"Define the agent's instructions, then enter a task to complete using tools.\"\n    icon = \"bot\"\n    beta = False\n    name = \"Agent\"\n\n    memory_inputs = [set_advanced_true(component_input) for component_input in MemoryComponent().inputs]\n\n    inputs = [\n        DropdownInput(\n            name=\"agent_llm\",\n            display_name=\"Model Provider\",\n            info=\"The provider of the language model that the agent will use to generate responses.\",\n            options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n            value=\"OpenAI\",\n            real_time_refresh=True,\n            input_types=[],\n        ),\n        *MODEL_PROVIDERS_DICT[\"OpenAI\"][\"inputs\"],\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=\"Agent Instructions\",\n            info=\"System Prompt: Initial instructions and context provided to guide the agent's behavior.\",\n            value=\"You are a helpful assistant that can use tools to answer questions and perform tasks.\",\n            advanced=False,\n        ),\n        *LCToolsAgentComponent._base_inputs,\n        *memory_inputs,\n        BoolInput(\n            name=\"add_current_date_tool\",\n            display_name=\"Current Date\",\n            advanced=True,\n            info=\"If true, will add a tool to the agent that returns the current date.\",\n            value=True,\n        ),\n    ]\n    outputs = [Output(name=\"response\", display_name=\"Response\", method=\"message_response\")]\n\n    async def message_response(self) -> Message:\n        try:\n            llm_model, display_name = self.get_llm()\n            if llm_model is None:\n                msg = \"No language model selected\"\n                raise ValueError(msg)\n            self.model_name = get_model_name(llm_model, display_name=display_name)\n        except Exception as e:\n            # Log the error for debugging purposes\n            logger.error(f\"Error retrieving language model: {e}\")\n            raise\n\n        try:\n            self.chat_history = await self.get_memory_data()\n        except Exception as e:\n            logger.error(f\"Error retrieving chat history: {e}\")\n            raise\n\n        if self.add_current_date_tool:\n            try:\n                if not isinstance(self.tools, list):  # type: ignore[has-type]\n                    self.tools = []\n                # Convert CurrentDateComponent to a StructuredTool\n                current_date_tool = (await CurrentDateComponent().to_toolkit()).pop(0)\n                # current_date_tool = CurrentDateComponent().to_toolkit()[0]\n                if isinstance(current_date_tool, StructuredTool):\n                    self.tools.append(current_date_tool)\n                else:\n                    msg = \"CurrentDateComponent must be converted to a StructuredTool\"\n                    raise TypeError(msg)\n            except Exception as e:\n                logger.error(f\"Error adding current date tool: {e}\")\n                raise\n\n        if not self.tools:\n            msg = \"Tools are required to run the agent.\"\n            logger.error(msg)\n            raise ValueError(msg)\n\n        try:\n            self.set(\n                llm=llm_model,\n                tools=self.tools,\n                chat_history=self.chat_history,\n                input_value=self.input_value,\n                system_prompt=self.system_prompt,\n            )\n            agent = self.create_agent_runnable()\n        except Exception as e:\n            logger.error(f\"Error setting up the agent: {e}\")\n            raise\n\n        return await self.run_agent(agent)\n\n    async def get_memory_data(self):\n        memory_kwargs = {\n            component_input.name: getattr(self, f\"{component_input.name}\") for component_input in self.memory_inputs\n        }\n        # filter out empty values\n        memory_kwargs = {k: v for k, v in memory_kwargs.items() if v}\n\n        return await MemoryComponent().set(**memory_kwargs).retrieve_messages()\n\n    def get_llm(self):\n        if isinstance(self.agent_llm, str):\n            try:\n                provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n                if provider_info:\n                    component_class = provider_info.get(\"component_class\")\n                    display_name = component_class.display_name\n                    inputs = provider_info.get(\"inputs\")\n                    prefix = provider_info.get(\"prefix\", \"\")\n                    return (\n                        self._build_llm_model(component_class, inputs, prefix),\n                        display_name,\n                    )\n            except Exception as e:\n                msg = f\"Error building {self.agent_llm} language model\"\n                raise ValueError(msg) from e\n        return self.agent_llm, None\n\n    def _build_llm_model(self, component, inputs, prefix=\"\"):\n        model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n        return component.set(**model_kwargs).build_model()\n\n    def set_component_params(self, component):\n        provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n        if provider_info:\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\")\n            model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n\n            return component.set(**model_kwargs)\n        return component\n\n    def delete_fields(self, build_config: dotdict, fields: dict | list[str]) -> None:\n        \"\"\"Delete specified fields from build_config.\"\"\"\n        for field in fields:\n            build_config.pop(field, None)\n\n    def update_input_types(self, build_config: dotdict) -> dotdict:\n        \"\"\"Update input types for all fields in build_config.\"\"\"\n        for key, value in build_config.items():\n            if isinstance(value, dict):\n                if value.get(\"input_types\") is None:\n                    build_config[key][\"input_types\"] = []\n            elif hasattr(value, \"input_types\") and value.input_types is None:\n                value.input_types = []\n        return build_config\n\n    async def update_build_config(\n        self, build_config: dotdict, field_value: str, field_name: str | None = None\n    ) -> dotdict:\n        # Iterate over all providers in the MODEL_PROVIDERS_DICT\n        # Existing logic for updating build_config\n        if field_name in (\"agent_llm\",):\n            build_config[\"agent_llm\"][\"value\"] = field_value\n            provider_info = MODEL_PROVIDERS_DICT.get(field_value)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call the component class's update_build_config method\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n\n            provider_configs: dict[str, tuple[dict, list[dict]]] = {\n                provider: (\n                    MODEL_PROVIDERS_DICT[provider][\"fields\"],\n                    [\n                        MODEL_PROVIDERS_DICT[other_provider][\"fields\"]\n                        for other_provider in MODEL_PROVIDERS_DICT\n                        if other_provider != provider\n                    ],\n                )\n                for provider in MODEL_PROVIDERS_DICT\n            }\n            if field_value in provider_configs:\n                fields_to_add, fields_to_delete = provider_configs[field_value]\n\n                # Delete fields from other providers\n                for fields in fields_to_delete:\n                    self.delete_fields(build_config, fields)\n\n                # Add provider-specific fields\n                if field_value == \"OpenAI\" and not any(field in build_config for field in fields_to_add):\n                    build_config.update(fields_to_add)\n                else:\n                    build_config.update(fields_to_add)\n                # Reset input types for agent_llm\n                build_config[\"agent_llm\"][\"input_types\"] = []\n            elif field_value == \"Custom\":\n                # Delete all provider fields\n                self.delete_fields(build_config, ALL_PROVIDER_FIELDS)\n                # Update with custom component\n                custom_component = DropdownInput(\n                    name=\"agent_llm\",\n                    display_name=\"Language Model\",\n                    options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n                    value=\"Custom\",\n                    real_time_refresh=True,\n                    input_types=[\"LanguageModel\"],\n                )\n                build_config.update({\"agent_llm\": custom_component.to_dict()})\n            # Update input types for all fields\n            build_config = self.update_input_types(build_config)\n\n            # Validate required keys\n            default_keys = [\n                \"code\",\n                \"_type\",\n                \"agent_llm\",\n                \"tools\",\n                \"input_value\",\n                \"add_current_date_tool\",\n                \"system_prompt\",\n                \"agent_description\",\n                \"max_iterations\",\n                \"handle_parsing_errors\",\n                \"verbose\",\n            ]\n            missing_keys = [key for key in default_keys if key not in build_config]\n            if missing_keys:\n                msg = f\"Missing required keys in build_config: {missing_keys}\"\n                raise ValueError(msg)\n        if (\n            isinstance(self.agent_llm, str)\n            and self.agent_llm in MODEL_PROVIDERS_DICT\n            and field_name in MODEL_DYNAMIC_UPDATE_FIELDS\n        ):\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                component_class = self.set_component_params(component_class)\n                prefix = provider_info.get(\"prefix\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call each component class's update_build_config method\n                    # remove the prefix from the field_name\n                    if isinstance(field_name, str) and isinstance(prefix, str):\n                        field_name = field_name.replace(prefix, \"\")\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n        return dotdict({k: v.to_dict() if hasattr(v, \"to_dict\") else v for k, v in build_config.items()})\n"
                                },
                                "handle_parsing_errors": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Handle Parse Errors",
                                    "dynamic": false,
                                    "info": "Should the Agent fix errors when reading user input for better processing?",
                                    "list": false,
                                    "name": "handle_parsing_errors",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "input_value": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": false,
                                    "display_name": "Input",
                                    "dynamic": false,
                                    "info": "The input provided by the user for the agent to process.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": true,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "json_mode": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "JSON Mode",
                                    "dynamic": false,
                                    "info": "If True, it will output JSON regardless of passing a schema.",
                                    "list": false,
                                    "name": "json_mode",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "max_iterations": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Max Iterations",
                                    "dynamic": false,
                                    "info": "The maximum number of attempts the agent can make to complete its task before it stops.",
                                    "list": false,
                                    "name": "max_iterations",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 15
                                },
                                "max_tokens": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Max Tokens",
                                    "dynamic": false,
                                    "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                                    "list": false,
                                    "name": "max_tokens",
                                    "placeholder": "",
                                    "range_spec": {
                                        "max": 128000,
                                        "min": 0,
                                        "step": 0.1,
                                        "step_type": "float"
                                    },
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": ""
                                },
                                "memory": {
                                    "_input_type": "HandleInput",
                                    "advanced": true,
                                    "display_name": "External Memory",
                                    "dynamic": false,
                                    "info": "Retrieve messages from an external memory. If empty, it will use the Langflow tables.",
                                    "input_types": [
                                        "Memory"
                                    ],
                                    "list": false,
                                    "name": "memory",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "other",
                                    "value": ""
                                },
                                "model_kwargs": {
                                    "_input_type": "DictInput",
                                    "advanced": true,
                                    "display_name": "Model Kwargs",
                                    "dynamic": false,
                                    "info": "Additional keyword arguments to pass to the model.",
                                    "list": false,
                                    "name": "model_kwargs",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "type": "dict",
                                    "value": {}
                                },
                                "model_name": {
                                    "_input_type": "DropdownInput",
                                    "advanced": false,
                                    "combobox": true,
                                    "display_name": "Model Name",
                                    "dynamic": false,
                                    "info": "To see the model names, first choose a provider. Then, enter your API key and click the refresh button next to the model name.",
                                    "name": "model_name",
                                    "options": [
                                        "gpt-4o-mini",
                                        "gpt-4o",
                                        "gpt-4-turbo",
                                        "gpt-4-turbo-preview",
                                        "gpt-4",
                                        "gpt-3.5-turbo",
                                        "gpt-3.5-turbo-0125"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "gpt-4o-mini"
                                },
                                "n_messages": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Number of Messages",
                                    "dynamic": false,
                                    "info": "Number of messages to retrieve.",
                                    "list": false,
                                    "name": "n_messages",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 100
                                },
                                "openai_api_base": {
                                    "_input_type": "StrInput",
                                    "advanced": true,
                                    "display_name": "OpenAI API Base",
                                    "dynamic": false,
                                    "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "openai_api_base",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "order": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Order",
                                    "dynamic": false,
                                    "info": "Order of the messages.",
                                    "name": "order",
                                    "options": [
                                        "Ascending",
                                        "Descending"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Ascending"
                                },
                                "seed": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Seed",
                                    "dynamic": false,
                                    "info": "The seed controls the reproducibility of the job.",
                                    "list": false,
                                    "name": "seed",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 1
                                },
                                "sender": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Sender Type",
                                    "dynamic": false,
                                    "info": "Filter by sender type.",
                                    "name": "sender",
                                    "options": [
                                        "Machine",
                                        "User",
                                        "Machine and User"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Machine and User"
                                },
                                "sender_name": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Sender Name",
                                    "dynamic": false,
                                    "info": "Filter by sender name.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "sender_name",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "session_id": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Session ID",
                                    "dynamic": false,
                                    "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "session_id",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "system_prompt": {
                                    "_input_type": "MultilineInput",
                                    "advanced": false,
                                    "display_name": "Agent Instructions",
                                    "dynamic": false,
                                    "info": "System Prompt: Initial instructions and context provided to guide the agent's behavior.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "system_prompt",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "You are an Amazing Travel Concierge, a specialist in travel planning and logistics with decades of experience. Your goal is to create the most amazing travel itineraries with budget and packing suggestions for the city. Expand the city guide into a full 7-day travel itinerary with detailed per-day plans. Include weather forecasts, places to eat, packing suggestions, and a budget breakdown. Suggest actual places to visit, hotels to stay, and restaurants to go to. Your final output should be a complete expanded travel plan, formatted as markdown, encompassing a daily schedule, anticipated weather conditions, recommended clothing and items to pack, and a detailed budget."
                                },
                                "temperature": {
                                    "_input_type": "FloatInput",
                                    "advanced": true,
                                    "display_name": "Temperature",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "name": "temperature",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "float",
                                    "value": 0.1
                                },
                                "template": {
                                    "_input_type": "MultilineInput",
                                    "advanced": true,
                                    "display_name": "Template",
                                    "dynamic": false,
                                    "info": "The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "template",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "{sender_name}: {text}"
                                },
                                "tools": {
                                    "_input_type": "HandleInput",
                                    "advanced": false,
                                    "display_name": "Tools",
                                    "dynamic": false,
                                    "info": "These are the tools that the agent can use to help with tasks.",
                                    "input_types": [
                                        "Tool"
                                    ],
                                    "list": true,
                                    "name": "tools",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "other",
                                    "value": ""
                                },
                                "verbose": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Verbose",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "name": "verbose",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "Agent"
                    },
                    "dragging": false,
                    "height": 725,
                    "id": "Agent-txo0a",
                    "measured": {
                        "height": 725,
                        "width": 360
                    },
                    "position": {
                        "x": 3889.695953842898,
                        "y": 370.3161168611889
                    },
                    "positionAbsolute": {
                        "x": 3889.695953842898,
                        "y": 370.3161168611889
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 360
                },
                {
                    "data": {
                        "id": "note-5Rl5S",
                        "node": {
                            "description": "# Travel Planning Agents \n\nThe travel planning system is a smart setup that uses several specialized \"agents\" to help plan incredible trips. Imagine each agent as a travel expert focusing on a part of your journey. Here's how it works:\n\n- **User-Friendly Start:** You start by telling the system about your travel needs\u2014where you want to go and what you love to do.\n\n- **Data Collection:** The agents uses its tools to gather current info about various destinations, like the best travel times, weather, and costs.\n\n- **Three Key Agents:**\n  - **City Selection Agent:** Picks the best places to visit based on your likes and current data.\n  - **Local Expert Agent:** Gathers interesting details about what to do and see in the chosen city.\n  - **Travel Concierge Agent:** Builds a day-by-day plan that includes where to stay, eat, and explore!\n\n- **Tools and Data:** Each agent uses tools to find and organize the latest information so you get recommendations that are both accurate and exciting.\n\n- **Final Plan:** Once everything is put together, you receive a complete, easy-to-follow travel itinerary, perfect for your adventure!\n",
                            "display_name": "",
                            "documentation": "",
                            "template": {}
                        },
                        "type": "note"
                    },
                    "dragging": false,
                    "height": 636,
                    "id": "note-5Rl5S",
                    "measured": {
                        "height": 636,
                        "width": 328
                    },
                    "position": {
                        "x": 1076.3710803600266,
                        "y": 92.06058855045646
                    },
                    "positionAbsolute": {
                        "x": 1076.3710803600266,
                        "y": 92.06058855045646
                    },
                    "resizing": false,
                    "selected": false,
                    "style": {
                        "height": 636,
                        "width": 600
                    },
                    "type": "noteNode",
                    "width": 600
                },
                {
                    "data": {
                        "id": "note-mOX7K",
                        "node": {
                            "description": "# **City Selection Agent**\n   - **Purpose:** This agent evaluates potential travel destinations based on user input and external data sources.\n   - **Core Functions:** Analyzes factors such as weather, local events, and travel costs to recommend optimal cities.\n   - **Tools Utilized:** Employs APIs and data-fetching tools to gather real-time information for decision-making.\n",
                            "display_name": "",
                            "documentation": "",
                            "template": {
                                "backgroundColor": "blue"
                            }
                        },
                        "type": "note"
                    },
                    "dragging": false,
                    "height": 362,
                    "id": "note-mOX7K",
                    "measured": {
                        "height": 362,
                        "width": 328
                    },
                    "position": {
                        "x": 2122.4146132377227,
                        "y": 485.2212661145467
                    },
                    "positionAbsolute": {
                        "x": 2122.4146132377227,
                        "y": 485.2212661145467
                    },
                    "resizing": false,
                    "selected": false,
                    "style": {
                        "height": 362,
                        "width": 331
                    },
                    "type": "noteNode",
                    "width": 331
                },
                {
                    "data": {
                        "id": "note-q4oVX",
                        "node": {
                            "description": "# **Local Expert Agent**\n   - **Purpose:** Focused on gathering and providing an in-depth guide to the selected city.\n   - **Core Functions:** Compiles insights into cultural attractions, local customs, and unique experiences.\n   - **Tools Utilized:** Uses web content fetchers and data APIs to collect detailed local insights and enhance the user understanding with hidden gems.\n",
                            "display_name": "",
                            "documentation": "",
                            "template": {
                                "backgroundColor": "blue"
                            }
                        },
                        "type": "note"
                    },
                    "dragging": false,
                    "height": 366,
                    "id": "note-q4oVX",
                    "measured": {
                        "height": 366,
                        "width": 328
                    },
                    "position": {
                        "x": 2827.660803823376,
                        "y": 488.6092281195304
                    },
                    "positionAbsolute": {
                        "x": 2827.660803823376,
                        "y": 488.6092281195304
                    },
                    "resizing": false,
                    "selected": false,
                    "style": {
                        "height": 366,
                        "width": 351
                    },
                    "type": "noteNode",
                    "width": 351
                },
                {
                    "data": {
                        "id": "note-uhNHM",
                        "node": {
                            "description": "# **Travel Concierge Agent**\n   - **Purpose:** Crafts detailed travel itineraries that are customized to the traveler's interests and needs.\n   - **Core Functions:** Offers a comprehensive daily schedule, including accommodations, dining spots, and activities.\n   - **Tools Utilized:** Integrates calculators and data tools for accurate budget planning and itinerary logistics.",
                            "display_name": "",
                            "documentation": "",
                            "template": {
                                "backgroundColor": "blue"
                            }
                        },
                        "type": "note"
                    },
                    "dragging": false,
                    "height": 344,
                    "id": "note-uhNHM",
                    "measured": {
                        "height": 344,
                        "width": 328
                    },
                    "position": {
                        "x": 3536.084279543714,
                        "y": 496.3155992003396
                    },
                    "positionAbsolute": {
                        "x": 3536.084279543714,
                        "y": 496.3155992003396
                    },
                    "resizing": false,
                    "selected": false,
                    "style": {
                        "height": 344,
                        "width": 344
                    },
                    "type": "noteNode",
                    "width": 344
                },
                {
                    "data": {
                        "id": "note-XHn2w",
                        "node": {
                            "description": "## Configure the agent by obtaining your OpenAI API key from [platform.openai.com](https://platform.openai.com). Under \"Model Provider\", choose:\n- OpenAI: Default, requires only API key\n- Anthropic/Azure/Groq/NVIDIA: Each requires their own API keys\n- Custom: Use your own model endpoint + authentication\n\nSelect model and input API key before running the flow.",
                            "display_name": "",
                            "documentation": "",
                            "template": {
                                "backgroundColor": "rose"
                            }
                        },
                        "type": "note"
                    },
                    "dragging": false,
                    "height": 328,
                    "id": "note-XHn2w",
                    "measured": {
                        "height": 328,
                        "width": 328
                    },
                    "position": {
                        "x": 2463.3881993480218,
                        "y": 42.83594355441298
                    },
                    "positionAbsolute": {
                        "x": 2463.3881993480218,
                        "y": 42.83594355441298
                    },
                    "selected": false,
                    "type": "noteNode",
                    "width": 328
                },
                {
                    "data": {
                        "id": "URL-VCoZD",
                        "node": {
                            "base_classes": [
                                "Data",
                                "DataFrame",
                                "Message"
                            ],
                            "beta": false,
                            "category": "data",
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Load and retrive data from specified URLs.",
                            "display_name": "URL",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "urls",
                                "format"
                            ],
                            "frozen": false,
                            "icon": "layout-template",
                            "key": "URL",
                            "legacy": false,
                            "lf_version": "1.1.1",
                            "metadata": {},
                            "minimized": false,
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Toolset",
                                    "hidden": null,
                                    "method": "to_toolkit",
                                    "name": "component_as_tool",
                                    "required_inputs": null,
                                    "selected": "Tool",
                                    "types": [
                                        "Tool"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "score": 2.220446049250313e-16,
                            "template": {
                                "_type": "Component",
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "import re\n\nfrom langchain_community.document_loaders import AsyncHtmlLoader, WebBaseLoader\n\nfrom langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.schema import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\n\n\nclass URLComponent(Component):\n    display_name = \"URL\"\n    description = \"Load and retrive data from specified URLs.\"\n    icon = \"layout-template\"\n    name = \"URL\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"urls\",\n            display_name=\"URLs\",\n            is_list=True,\n            tool_mode=True,\n            placeholder=\"Enter a URL...\",\n            list_add_label=\"Add URL\",\n        ),\n        DropdownInput(\n            name=\"format\",\n            display_name=\"Output Format\",\n            info=\"Output Format. Use 'Text' to extract the text from the HTML or 'Raw HTML' for the raw HTML content.\",\n            options=[\"Text\", \"Raw HTML\"],\n            value=\"Text\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"fetch_content\"),\n        Output(display_name=\"Message\", name=\"text\", method=\"fetch_content_text\"),\n        Output(display_name=\"DataFrame\", name=\"dataframe\", method=\"as_dataframe\"),\n    ]\n\n    def ensure_url(self, string: str) -> str:\n        \"\"\"Ensures the given string is a URL by adding 'http://' if it doesn't start with 'http://' or 'https://'.\n\n        Raises an error if the string is not a valid URL.\n\n        Parameters:\n            string (str): The string to be checked and possibly modified.\n\n        Returns:\n            str: The modified string that is ensured to be a URL.\n\n        Raises:\n            ValueError: If the string is not a valid URL.\n        \"\"\"\n        if not string.startswith((\"http://\", \"https://\")):\n            string = \"http://\" + string\n\n        # Basic URL validation regex\n        url_regex = re.compile(\n            r\"^(https?:\\/\\/)?\"  # optional protocol\n            r\"(www\\.)?\"  # optional www\n            r\"([a-zA-Z0-9.-]+)\"  # domain\n            r\"(\\.[a-zA-Z]{2,})?\"  # top-level domain\n            r\"(:\\d+)?\"  # optional port\n            r\"(\\/[^\\s]*)?$\",  # optional path\n            re.IGNORECASE,\n        )\n\n        if not url_regex.match(string):\n            msg = f\"Invalid URL: {string}\"\n            raise ValueError(msg)\n\n        return string\n\n    def fetch_content(self) -> list[Data]:\n        urls = [self.ensure_url(url.strip()) for url in self.urls if url.strip()]\n        if self.format == \"Raw HTML\":\n            loader = AsyncHtmlLoader(web_path=urls, encoding=\"utf-8\")\n        else:\n            loader = WebBaseLoader(web_paths=urls, encoding=\"utf-8\")\n        docs = loader.load()\n        data = [Data(text=doc.page_content, **doc.metadata) for doc in docs]\n        self.status = data\n        return data\n\n    def fetch_content_text(self) -> Message:\n        data = self.fetch_content()\n\n        result_string = data_to_text(\"{text}\", data)\n        self.status = result_string\n        return Message(text=result_string)\n\n    def as_dataframe(self) -> DataFrame:\n        return DataFrame(self.fetch_content())\n"
                                },
                                "format": {
                                    "_input_type": "DropdownInput",
                                    "advanced": false,
                                    "combobox": false,
                                    "dialog_inputs": {},
                                    "display_name": "Output Format",
                                    "dynamic": false,
                                    "info": "Output Format. Use 'Text' to extract the text from the HTML or 'Raw HTML' for the raw HTML content.",
                                    "name": "format",
                                    "options": [
                                        "Text",
                                        "Raw HTML"
                                    ],
                                    "options_metadata": [],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Text"
                                },
                                "tools_metadata": {
                                    "_input_type": "TableInput",
                                    "advanced": false,
                                    "display_name": "Edit tools",
                                    "dynamic": false,
                                    "info": "",
                                    "is_list": true,
                                    "list_add_label": "Add More",
                                    "name": "tools_metadata",
                                    "placeholder": "",
                                    "real_time_refresh": true,
                                    "required": false,
                                    "show": true,
                                    "table_icon": "Hammer",
                                    "table_options": {
                                        "block_add": true,
                                        "block_delete": true,
                                        "block_edit": true,
                                        "block_filter": true,
                                        "block_hide": true,
                                        "block_select": true,
                                        "block_sort": true,
                                        "description": "Modify tool names and descriptions to help agents understand when to use each tool.",
                                        "field_parsers": {
                                            "commands": "commands",
                                            "name": [
                                                "snake_case",
                                                "no_blank"
                                            ]
                                        },
                                        "hide_options": true
                                    },
                                    "table_schema": {
                                        "columns": [
                                            {
                                                "description": "Specify the name of the tool.",
                                                "disable_edit": false,
                                                "display_name": "Tool Name",
                                                "edit_mode": "inline",
                                                "filterable": false,
                                                "formatter": "text",
                                                "name": "name",
                                                "sortable": false,
                                                "type": "text"
                                            },
                                            {
                                                "description": "Describe the purpose of the tool.",
                                                "disable_edit": false,
                                                "display_name": "Tool Description",
                                                "edit_mode": "popover",
                                                "filterable": false,
                                                "formatter": "text",
                                                "name": "description",
                                                "sortable": false,
                                                "type": "text"
                                            },
                                            {
                                                "description": "The default identifiers for the tools and cannot be changed.",
                                                "disable_edit": true,
                                                "display_name": "Tool Identifiers",
                                                "edit_mode": "inline",
                                                "filterable": false,
                                                "formatter": "text",
                                                "name": "tags",
                                                "sortable": false,
                                                "type": "text"
                                            }
                                        ]
                                    },
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "trigger_icon": "Hammer",
                                    "trigger_text": "",
                                    "type": "table",
                                    "value": [
                                        {
                                            "description": "fetch_content() - Load and retrive data from specified URLs.",
                                            "name": "URL-fetch_content",
                                            "tags": [
                                                "URL-fetch_content"
                                            ]
                                        },
                                        {
                                            "description": "fetch_content_text() - Load and retrive data from specified URLs.",
                                            "name": "URL-fetch_content_text",
                                            "tags": [
                                                "URL-fetch_content_text"
                                            ]
                                        },
                                        {
                                            "description": "as_dataframe() - Load and retrive data from specified URLs.",
                                            "name": "URL-as_dataframe",
                                            "tags": [
                                                "URL-as_dataframe"
                                            ]
                                        }
                                    ]
                                },
                                "urls": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": false,
                                    "display_name": "URLs",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": true,
                                    "list_add_label": "Add URL",
                                    "load_from_db": false,
                                    "name": "urls",
                                    "placeholder": "Enter a URL...",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": true,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                }
                            },
                            "tool_mode": true
                        },
                        "showNode": true,
                        "type": "URL"
                    },
                    "dragging": false,
                    "id": "URL-VCoZD",
                    "measured": {
                        "height": 453,
                        "width": 360
                    },
                    "position": {
                        "x": 2829.4526852839367,
                        "y": 956.7694697088367
                    },
                    "selected": false,
                    "type": "genericNode"
                },
                {
                    "data": {
                        "id": "CalculatorComponent-pSb5r",
                        "node": {
                            "base_classes": [
                                "Data"
                            ],
                            "beta": false,
                            "category": "tools",
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Perform basic arithmetic operations on a given expression.",
                            "display_name": "Calculator",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "expression"
                            ],
                            "frozen": false,
                            "icon": "calculator",
                            "key": "CalculatorComponent",
                            "legacy": false,
                            "lf_version": "1.1.1",
                            "metadata": {},
                            "minimized": false,
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Toolset",
                                    "hidden": null,
                                    "method": "to_toolkit",
                                    "name": "component_as_tool",
                                    "required_inputs": null,
                                    "selected": "Tool",
                                    "types": [
                                        "Tool"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "score": 0.001,
                            "template": {
                                "_type": "Component",
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "import ast\nimport operator\nfrom collections.abc import Callable\n\nfrom langflow.custom import Component\nfrom langflow.inputs import MessageTextInput\nfrom langflow.io import Output\nfrom langflow.schema import Data\n\n\nclass CalculatorComponent(Component):\n    display_name = \"Calculator\"\n    description = \"Perform basic arithmetic operations on a given expression.\"\n    icon = \"calculator\"\n\n    # Cache operators dictionary as a class variable\n    OPERATORS: dict[type[ast.operator], Callable] = {\n        ast.Add: operator.add,\n        ast.Sub: operator.sub,\n        ast.Mult: operator.mul,\n        ast.Div: operator.truediv,\n        ast.Pow: operator.pow,\n    }\n\n    inputs = [\n        MessageTextInput(\n            name=\"expression\",\n            display_name=\"Expression\",\n            info=\"The arithmetic expression to evaluate (e.g., '4*4*(33/22)+12-20').\",\n            tool_mode=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"result\", type_=Data, method=\"evaluate_expression\"),\n    ]\n\n    def _eval_expr(self, node: ast.AST) -> float:\n        \"\"\"Evaluate an AST node recursively.\"\"\"\n        if isinstance(node, ast.Constant):\n            if isinstance(node.value, int | float):\n                return float(node.value)\n            error_msg = f\"Unsupported constant type: {type(node.value).__name__}\"\n            raise TypeError(error_msg)\n        if isinstance(node, ast.Num):  # For backwards compatibility\n            if isinstance(node.n, int | float):\n                return float(node.n)\n            error_msg = f\"Unsupported number type: {type(node.n).__name__}\"\n            raise TypeError(error_msg)\n\n        if isinstance(node, ast.BinOp):\n            op_type = type(node.op)\n            if op_type not in self.OPERATORS:\n                error_msg = f\"Unsupported binary operator: {op_type.__name__}\"\n                raise TypeError(error_msg)\n\n            left = self._eval_expr(node.left)\n            right = self._eval_expr(node.right)\n            return self.OPERATORS[op_type](left, right)\n\n        error_msg = f\"Unsupported operation or expression type: {type(node).__name__}\"\n        raise TypeError(error_msg)\n\n    def evaluate_expression(self) -> Data:\n        \"\"\"Evaluate the mathematical expression and return the result.\"\"\"\n        try:\n            tree = ast.parse(self.expression, mode=\"eval\")\n            result = self._eval_expr(tree.body)\n\n            formatted_result = f\"{float(result):.6f}\".rstrip(\"0\").rstrip(\".\")\n            self.log(f\"Calculation result: {formatted_result}\")\n\n            self.status = formatted_result\n            return Data(data={\"result\": formatted_result})\n\n        except ZeroDivisionError:\n            error_message = \"Error: Division by zero\"\n            self.status = error_message\n            return Data(data={\"error\": error_message, \"input\": self.expression})\n\n        except (SyntaxError, TypeError, KeyError, ValueError, AttributeError, OverflowError) as e:\n            error_message = f\"Invalid expression: {e!s}\"\n            self.status = error_message\n            return Data(data={\"error\": error_message, \"input\": self.expression})\n\n    def build(self):\n        \"\"\"Return the main evaluation function.\"\"\"\n        return self.evaluate_expression\n"
                                },
                                "expression": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": false,
                                    "display_name": "Expression",
                                    "dynamic": false,
                                    "info": "The arithmetic expression to evaluate (e.g., '4*4*(33/22)+12-20').",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "name": "expression",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": true,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "tools_metadata": {
                                    "_input_type": "TableInput",
                                    "advanced": false,
                                    "display_name": "Edit tools",
                                    "dynamic": false,
                                    "info": "",
                                    "is_list": true,
                                    "list_add_label": "Add More",
                                    "name": "tools_metadata",
                                    "placeholder": "",
                                    "real_time_refresh": true,
                                    "required": false,
                                    "show": true,
                                    "table_icon": "Hammer",
                                    "table_options": {
                                        "block_add": true,
                                        "block_delete": true,
                                        "block_edit": true,
                                        "block_filter": true,
                                        "block_hide": true,
                                        "block_select": true,
                                        "block_sort": true,
                                        "description": "Modify tool names and descriptions to help agents understand when to use each tool.",
                                        "field_parsers": {
                                            "commands": "commands",
                                            "name": [
                                                "snake_case",
                                                "no_blank"
                                            ]
                                        },
                                        "hide_options": true
                                    },
                                    "table_schema": {
                                        "columns": [
                                            {
                                                "description": "Specify the name of the tool.",
                                                "disable_edit": false,
                                                "display_name": "Tool Name",
                                                "edit_mode": "inline",
                                                "filterable": false,
                                                "formatter": "text",
                                                "name": "name",
                                                "sortable": false,
                                                "type": "text"
                                            },
                                            {
                                                "description": "Describe the purpose of the tool.",
                                                "disable_edit": false,
                                                "display_name": "Tool Description",
                                                "edit_mode": "popover",
                                                "filterable": false,
                                                "formatter": "text",
                                                "name": "description",
                                                "sortable": false,
                                                "type": "text"
                                            },
                                            {
                                                "description": "The default identifiers for the tools and cannot be changed.",
                                                "disable_edit": true,
                                                "display_name": "Tool Identifiers",
                                                "edit_mode": "inline",
                                                "filterable": false,
                                                "formatter": "text",
                                                "name": "tags",
                                                "sortable": false,
                                                "type": "text"
                                            }
                                        ]
                                    },
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "trigger_icon": "Hammer",
                                    "trigger_text": "",
                                    "type": "table",
                                    "value": [
                                        {
                                            "description": "evaluate_expression() - Perform basic arithmetic operations on a given expression.",
                                            "name": "CalculatorComponent-evaluate_expression",
                                            "tags": [
                                                "CalculatorComponent-evaluate_expression"
                                            ]
                                        }
                                    ]
                                }
                            },
                            "tool_mode": true
                        },
                        "showNode": true,
                        "type": "CalculatorComponent"
                    },
                    "dragging": false,
                    "id": "CalculatorComponent-pSb5r",
                    "measured": {
                        "height": 374,
                        "width": 360
                    },
                    "position": {
                        "x": 3540.356346381247,
                        "y": 989.3563951826354
                    },
                    "selected": false,
                    "type": "genericNode"
                },
                {
                    "data": {
                        "id": "SearchComponent-BSabY",
                        "node": {
                            "base_classes": [
                                "Data",
                                "Message"
                            ],
                            "beta": false,
                            "category": "tools",
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Call the searchapi.io API with result limiting",
                            "display_name": "Search API",
                            "documentation": "https://www.searchapi.io/docs/google",
                            "edited": false,
                            "field_order": [
                                "engine",
                                "api_key",
                                "input_value",
                                "search_params",
                                "max_results",
                                "max_snippet_length"
                            ],
                            "frozen": false,
                            "icon": "SearchAPI",
                            "key": "SearchComponent",
                            "legacy": false,
                            "lf_version": "1.1.1",
                            "metadata": {},
                            "minimized": false,
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Toolset",
                                    "hidden": null,
                                    "method": "to_toolkit",
                                    "name": "component_as_tool",
                                    "required_inputs": null,
                                    "selected": "Tool",
                                    "types": [
                                        "Tool"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "score": 0.0030458160338519237,
                            "template": {
                                "_type": "Component",
                                "api_key": {
                                    "_input_type": "SecretStrInput",
                                    "advanced": false,
                                    "display_name": "SearchAPI API Key",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "load_from_db": true,
                                    "name": "api_key",
                                    "password": true,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": ""
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from typing import Any\n\nfrom langchain_community.utilities.searchapi import SearchApiAPIWrapper\n\nfrom langflow.custom import Component\nfrom langflow.inputs import DictInput, DropdownInput, IntInput, MultilineInput, SecretStrInput\nfrom langflow.io import Output\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\n\n\nclass SearchComponent(Component):\n    display_name: str = \"Search API\"\n    description: str = \"Call the searchapi.io API with result limiting\"\n    documentation: str = \"https://www.searchapi.io/docs/google\"\n    icon = \"SearchAPI\"\n\n    inputs = [\n        DropdownInput(name=\"engine\", display_name=\"Engine\", value=\"google\", options=[\"google\", \"bing\", \"duckduckgo\"]),\n        SecretStrInput(name=\"api_key\", display_name=\"SearchAPI API Key\", required=True),\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Input\",\n            tool_mode=True,\n        ),\n        DictInput(name=\"search_params\", display_name=\"Search parameters\", advanced=True, is_list=True),\n        IntInput(name=\"max_results\", display_name=\"Max Results\", value=5, advanced=True),\n        IntInput(name=\"max_snippet_length\", display_name=\"Max Snippet Length\", value=100, advanced=True),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"fetch_content\"),\n        Output(display_name=\"Text\", name=\"text\", method=\"fetch_content_text\"),\n    ]\n\n    def _build_wrapper(self):\n        return SearchApiAPIWrapper(engine=self.engine, searchapi_api_key=self.api_key)\n\n    def run_model(self) -> list[Data]:\n        return self.fetch_content()\n\n    def fetch_content(self) -> list[Data]:\n        wrapper = self._build_wrapper()\n\n        def search_func(\n            query: str, params: dict[str, Any] | None = None, max_results: int = 5, max_snippet_length: int = 100\n        ) -> list[Data]:\n            params = params or {}\n            full_results = wrapper.results(query=query, **params)\n            organic_results = full_results.get(\"organic_results\", [])[:max_results]\n\n            return [\n                Data(\n                    text=result.get(\"snippet\", \"\"),\n                    data={\n                        \"title\": result.get(\"title\", \"\")[:max_snippet_length],\n                        \"link\": result.get(\"link\", \"\"),\n                        \"snippet\": result.get(\"snippet\", \"\")[:max_snippet_length],\n                    },\n                )\n                for result in organic_results\n            ]\n\n        results = search_func(\n            self.input_value,\n            self.search_params or {},\n            self.max_results,\n            self.max_snippet_length,\n        )\n        self.status = results\n        return results\n\n    def fetch_content_text(self) -> Message:\n        data = self.fetch_content()\n        result_string = \"\"\n        for item in data:\n            result_string += item.text + \"\\n\"\n        self.status = result_string\n        return Message(text=result_string)\n"
                                },
                                "engine": {
                                    "_input_type": "DropdownInput",
                                    "advanced": false,
                                    "combobox": false,
                                    "dialog_inputs": {},
                                    "display_name": "Engine",
                                    "dynamic": false,
                                    "info": "",
                                    "name": "engine",
                                    "options": [
                                        "google",
                                        "bing",
                                        "duckduckgo"
                                    ],
                                    "options_metadata": [],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "google"
                                },
                                "input_value": {
                                    "_input_type": "MultilineInput",
                                    "advanced": false,
                                    "display_name": "Input",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": true,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "max_results": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Max Results",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "max_results",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 5
                                },
                                "max_snippet_length": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Max Snippet Length",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "max_snippet_length",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 100
                                },
                                "search_params": {
                                    "_input_type": "DictInput",
                                    "advanced": true,
                                    "display_name": "Search parameters",
                                    "dynamic": false,
                                    "info": "",
                                    "list": true,
                                    "list_add_label": "Add More",
                                    "name": "search_params",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "type": "dict",
                                    "value": {}
                                },
                                "tools_metadata": {
                                    "_input_type": "TableInput",
                                    "advanced": false,
                                    "display_name": "Edit tools",
                                    "dynamic": false,
                                    "info": "",
                                    "is_list": true,
                                    "list_add_label": "Add More",
                                    "name": "tools_metadata",
                                    "placeholder": "",
                                    "real_time_refresh": true,
                                    "required": false,
                                    "show": true,
                                    "table_icon": "Hammer",
                                    "table_options": {
                                        "block_add": true,
                                        "block_delete": true,
                                        "block_edit": true,
                                        "block_filter": true,
                                        "block_hide": true,
                                        "block_select": true,
                                        "block_sort": true,
                                        "description": "Modify tool names and descriptions to help agents understand when to use each tool.",
                                        "field_parsers": {
                                            "commands": "commands",
                                            "name": [
                                                "snake_case",
                                                "no_blank"
                                            ]
                                        },
                                        "hide_options": true
                                    },
                                    "table_schema": {
                                        "columns": [
                                            {
                                                "description": "Specify the name of the tool.",
                                                "disable_edit": false,
                                                "display_name": "Tool Name",
                                                "edit_mode": "inline",
                                                "filterable": false,
                                                "formatter": "text",
                                                "name": "name",
                                                "sortable": false,
                                                "type": "text"
                                            },
                                            {
                                                "description": "Describe the purpose of the tool.",
                                                "disable_edit": false,
                                                "display_name": "Tool Description",
                                                "edit_mode": "popover",
                                                "filterable": false,
                                                "formatter": "text",
                                                "name": "description",
                                                "sortable": false,
                                                "type": "text"
                                            },
                                            {
                                                "description": "The default identifiers for the tools and cannot be changed.",
                                                "disable_edit": true,
                                                "display_name": "Tool Identifiers",
                                                "edit_mode": "inline",
                                                "filterable": false,
                                                "formatter": "text",
                                                "name": "tags",
                                                "sortable": false,
                                                "type": "text"
                                            }
                                        ]
                                    },
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "trigger_icon": "Hammer",
                                    "trigger_text": "",
                                    "type": "table",
                                    "value": [
                                        {
                                            "description": "fetch_content(api_key: Message) - Call the searchapi.io API with result limiting",
                                            "name": "SearchComponent-fetch_content",
                                            "tags": [
                                                "SearchComponent-fetch_content"
                                            ]
                                        },
                                        {
                                            "description": "fetch_content_text(api_key: Message) - Call the searchapi.io API with result limiting",
                                            "name": "SearchComponent-fetch_content_text",
                                            "tags": [
                                                "SearchComponent-fetch_content_text"
                                            ]
                                        }
                                    ]
                                }
                            },
                            "tool_mode": true
                        },
                        "showNode": true,
                        "type": "SearchComponent"
                    },
                    "dragging": false,
                    "id": "SearchComponent-BSabY",
                    "measured": {
                        "height": 536,
                        "width": 360
                    },
                    "position": {
                        "x": 2089.0393126914205,
                        "y": 864.3967489854795
                    },
                    "selected": false,
                    "type": "genericNode"
                }
            ],
            "viewport": {
                "x": -725.9163351506193,
                "y": 43.25864447430234,
                "zoom": 0.4743305032399001
            }
        },
        "is_component": false,
        "updated_at": "2025-01-25T04:58:25+00:00",
        "webhook": false,
        "endpoint_name": null,
        "tags": [
            "agents",
            "openai"
        ],
        "locked": false,
        "id": "5bd39e67-be18-47ef-b33c-5a91c6f8847c",
        "user_id": null,
        "folder_id": "c54584e6-88eb-4ac0-b70c-68aee37fdce2"
    },
    {
        "name": "Simple Agent",
        "description": "A simple but powerful starter agent.",
        "icon": null,
        "icon_bg_color": null,
        "gradient": null,
        "data": {
            "edges": [
                {
                    "animated": false,
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "ChatInput",
                            "id": "ChatInput-Kdh0W",
                            "name": "message",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "input_value",
                            "id": "Agent-3NhNI",
                            "inputTypes": [
                                "Message"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "reactflow__edge-ChatInput-Kdh0W{\u0153dataType\u0153:\u0153ChatInput\u0153,\u0153id\u0153:\u0153ChatInput-Kdh0W\u0153,\u0153name\u0153:\u0153message\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-Agent-3NhNI{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153Agent-3NhNI\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "selected": false,
                    "source": "ChatInput-Kdh0W",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153ChatInput\u0153, \u0153id\u0153: \u0153ChatInput-Kdh0W\u0153, \u0153name\u0153: \u0153message\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "Agent-3NhNI",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153input_value\u0153, \u0153id\u0153: \u0153Agent-3NhNI\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "animated": false,
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "Agent",
                            "id": "Agent-3NhNI",
                            "name": "response",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "input_value",
                            "id": "ChatOutput-SzD3j",
                            "inputTypes": [
                                "Message"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "reactflow__edge-Agent-3NhNI{\u0153dataType\u0153:\u0153Agent\u0153,\u0153id\u0153:\u0153Agent-3NhNI\u0153,\u0153name\u0153:\u0153response\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-ChatOutput-SzD3j{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153ChatOutput-SzD3j\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "selected": false,
                    "source": "Agent-3NhNI",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153Agent\u0153, \u0153id\u0153: \u0153Agent-3NhNI\u0153, \u0153name\u0153: \u0153response\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "ChatOutput-SzD3j",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153input_value\u0153, \u0153id\u0153: \u0153ChatOutput-SzD3j\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "CalculatorComponent",
                            "id": "CalculatorComponent-F89Ck",
                            "name": "component_as_tool",
                            "output_types": [
                                "Tool"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "tools",
                            "id": "Agent-3NhNI",
                            "inputTypes": [
                                "Tool"
                            ],
                            "type": "other"
                        }
                    },
                    "id": "reactflow__edge-CalculatorComponent-F89Ck{\u0153dataType\u0153:\u0153CalculatorComponent\u0153,\u0153id\u0153:\u0153CalculatorComponent-F89Ck\u0153,\u0153name\u0153:\u0153component_as_tool\u0153,\u0153output_types\u0153:[\u0153Tool\u0153]}-Agent-3NhNI{\u0153fieldName\u0153:\u0153tools\u0153,\u0153id\u0153:\u0153Agent-3NhNI\u0153,\u0153inputTypes\u0153:[\u0153Tool\u0153],\u0153type\u0153:\u0153other\u0153}",
                    "source": "CalculatorComponent-F89Ck",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153CalculatorComponent\u0153, \u0153id\u0153: \u0153CalculatorComponent-F89Ck\u0153, \u0153name\u0153: \u0153component_as_tool\u0153, \u0153output_types\u0153: [\u0153Tool\u0153]}",
                    "target": "Agent-3NhNI",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153tools\u0153, \u0153id\u0153: \u0153Agent-3NhNI\u0153, \u0153inputTypes\u0153: [\u0153Tool\u0153], \u0153type\u0153: \u0153other\u0153}"
                },
                {
                    "className": "",
                    "data": {
                        "sourceHandle": {
                            "dataType": "URL",
                            "id": "URL-4Q2PI",
                            "name": "component_as_tool",
                            "output_types": [
                                "Tool"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "tools",
                            "id": "Agent-3NhNI",
                            "inputTypes": [
                                "Tool"
                            ],
                            "type": "other"
                        }
                    },
                    "id": "reactflow__edge-URL-4Q2PI{\u0153dataType\u0153:\u0153URL\u0153,\u0153id\u0153:\u0153URL-4Q2PI\u0153,\u0153name\u0153:\u0153component_as_tool\u0153,\u0153output_types\u0153:[\u0153Tool\u0153]}-Agent-3NhNI{\u0153fieldName\u0153:\u0153tools\u0153,\u0153id\u0153:\u0153Agent-3NhNI\u0153,\u0153inputTypes\u0153:[\u0153Tool\u0153],\u0153type\u0153:\u0153other\u0153}",
                    "source": "URL-4Q2PI",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153URL\u0153, \u0153id\u0153: \u0153URL-4Q2PI\u0153, \u0153name\u0153: \u0153component_as_tool\u0153, \u0153output_types\u0153: [\u0153Tool\u0153]}",
                    "target": "Agent-3NhNI",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153tools\u0153, \u0153id\u0153: \u0153Agent-3NhNI\u0153, \u0153inputTypes\u0153: [\u0153Tool\u0153], \u0153type\u0153: \u0153other\u0153}"
                }
            ],
            "nodes": [
                {
                    "data": {
                        "description": "Define the agent's instructions, then enter a task to complete using tools.",
                        "display_name": "Agent",
                        "id": "Agent-3NhNI",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Define the agent's instructions, then enter a task to complete using tools.",
                            "display_name": "Agent",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "agent_llm",
                                "max_tokens",
                                "model_kwargs",
                                "json_mode",
                                "output_schema",
                                "model_name",
                                "openai_api_base",
                                "api_key",
                                "temperature",
                                "seed",
                                "output_parser",
                                "system_prompt",
                                "tools",
                                "input_value",
                                "handle_parsing_errors",
                                "verbose",
                                "max_iterations",
                                "agent_description",
                                "memory",
                                "sender",
                                "sender_name",
                                "n_messages",
                                "session_id",
                                "order",
                                "template",
                                "add_current_date_tool"
                            ],
                            "frozen": false,
                            "icon": "bot",
                            "legacy": false,
                            "lf_version": "1.1.1",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Response",
                                    "method": "message_response",
                                    "name": "response",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "add_current_date_tool": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Current Date",
                                    "dynamic": false,
                                    "info": "If true, will add a tool to the agent that returns the current date.",
                                    "list": false,
                                    "name": "add_current_date_tool",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "agent_description": {
                                    "_input_type": "MultilineInput",
                                    "advanced": true,
                                    "display_name": "Agent Description [Deprecated]",
                                    "dynamic": false,
                                    "info": "The description of the agent. This is only used when in Tool Mode. Defaults to 'A helpful assistant with access to the following tools:' and tools are added dynamically. This feature is deprecated and will be removed in future versions.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "agent_description",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "A helpful assistant with access to the following tools:"
                                },
                                "agent_llm": {
                                    "_input_type": "DropdownInput",
                                    "advanced": false,
                                    "combobox": false,
                                    "display_name": "Model Provider",
                                    "dynamic": false,
                                    "info": "The provider of the language model that the agent will use to generate responses.",
                                    "input_types": [],
                                    "name": "agent_llm",
                                    "options": [
                                        "Amazon Bedrock",
                                        "Anthropic",
                                        "Azure OpenAI",
                                        "Google Generative AI",
                                        "Groq",
                                        "NVIDIA",
                                        "OpenAI",
                                        "Custom"
                                    ],
                                    "placeholder": "",
                                    "real_time_refresh": true,
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "OpenAI"
                                },
                                "api_key": {
                                    "_input_type": "SecretStrInput",
                                    "advanced": false,
                                    "display_name": "OpenAI API Key",
                                    "dynamic": false,
                                    "info": "The OpenAI API Key to use for the OpenAI model.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "load_from_db": true,
                                    "name": "api_key",
                                    "password": true,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": "OPENAI_API_KEY"
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langchain_core.tools import StructuredTool\n\nfrom langflow.base.agents.agent import LCToolsAgentComponent\nfrom langflow.base.models.model_input_constants import (\n    ALL_PROVIDER_FIELDS,\n    MODEL_DYNAMIC_UPDATE_FIELDS,\n    MODEL_PROVIDERS_DICT,\n)\nfrom langflow.base.models.model_utils import get_model_name\nfrom langflow.components.helpers import CurrentDateComponent\nfrom langflow.components.helpers.memory import MemoryComponent\nfrom langflow.components.langchain_utilities.tool_calling import ToolCallingAgentComponent\nfrom langflow.custom.utils import update_component_build_config\nfrom langflow.io import BoolInput, DropdownInput, MultilineInput, Output\nfrom langflow.logging import logger\nfrom langflow.schema.dotdict import dotdict\nfrom langflow.schema.message import Message\n\n\ndef set_advanced_true(component_input):\n    component_input.advanced = True\n    return component_input\n\n\nclass AgentComponent(ToolCallingAgentComponent):\n    display_name: str = \"Agent\"\n    description: str = \"Define the agent's instructions, then enter a task to complete using tools.\"\n    icon = \"bot\"\n    beta = False\n    name = \"Agent\"\n\n    memory_inputs = [set_advanced_true(component_input) for component_input in MemoryComponent().inputs]\n\n    inputs = [\n        DropdownInput(\n            name=\"agent_llm\",\n            display_name=\"Model Provider\",\n            info=\"The provider of the language model that the agent will use to generate responses.\",\n            options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n            value=\"OpenAI\",\n            real_time_refresh=True,\n            input_types=[],\n        ),\n        *MODEL_PROVIDERS_DICT[\"OpenAI\"][\"inputs\"],\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=\"Agent Instructions\",\n            info=\"System Prompt: Initial instructions and context provided to guide the agent's behavior.\",\n            value=\"You are a helpful assistant that can use tools to answer questions and perform tasks.\",\n            advanced=False,\n        ),\n        *LCToolsAgentComponent._base_inputs,\n        *memory_inputs,\n        BoolInput(\n            name=\"add_current_date_tool\",\n            display_name=\"Current Date\",\n            advanced=True,\n            info=\"If true, will add a tool to the agent that returns the current date.\",\n            value=True,\n        ),\n    ]\n    outputs = [Output(name=\"response\", display_name=\"Response\", method=\"message_response\")]\n\n    async def message_response(self) -> Message:\n        try:\n            llm_model, display_name = self.get_llm()\n            if llm_model is None:\n                msg = \"No language model selected\"\n                raise ValueError(msg)\n            self.model_name = get_model_name(llm_model, display_name=display_name)\n        except Exception as e:\n            # Log the error for debugging purposes\n            logger.error(f\"Error retrieving language model: {e}\")\n            raise\n\n        try:\n            self.chat_history = await self.get_memory_data()\n        except Exception as e:\n            logger.error(f\"Error retrieving chat history: {e}\")\n            raise\n\n        if self.add_current_date_tool:\n            try:\n                if not isinstance(self.tools, list):  # type: ignore[has-type]\n                    self.tools = []\n                # Convert CurrentDateComponent to a StructuredTool\n                current_date_tool = (await CurrentDateComponent().to_toolkit()).pop(0)\n                # current_date_tool = CurrentDateComponent().to_toolkit()[0]\n                if isinstance(current_date_tool, StructuredTool):\n                    self.tools.append(current_date_tool)\n                else:\n                    msg = \"CurrentDateComponent must be converted to a StructuredTool\"\n                    raise TypeError(msg)\n            except Exception as e:\n                logger.error(f\"Error adding current date tool: {e}\")\n                raise\n\n        if not self.tools:\n            msg = \"Tools are required to run the agent.\"\n            logger.error(msg)\n            raise ValueError(msg)\n\n        try:\n            self.set(\n                llm=llm_model,\n                tools=self.tools,\n                chat_history=self.chat_history,\n                input_value=self.input_value,\n                system_prompt=self.system_prompt,\n            )\n            agent = self.create_agent_runnable()\n        except Exception as e:\n            logger.error(f\"Error setting up the agent: {e}\")\n            raise\n\n        return await self.run_agent(agent)\n\n    async def get_memory_data(self):\n        memory_kwargs = {\n            component_input.name: getattr(self, f\"{component_input.name}\") for component_input in self.memory_inputs\n        }\n        # filter out empty values\n        memory_kwargs = {k: v for k, v in memory_kwargs.items() if v}\n\n        return await MemoryComponent().set(**memory_kwargs).retrieve_messages()\n\n    def get_llm(self):\n        if isinstance(self.agent_llm, str):\n            try:\n                provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n                if provider_info:\n                    component_class = provider_info.get(\"component_class\")\n                    display_name = component_class.display_name\n                    inputs = provider_info.get(\"inputs\")\n                    prefix = provider_info.get(\"prefix\", \"\")\n                    return (\n                        self._build_llm_model(component_class, inputs, prefix),\n                        display_name,\n                    )\n            except Exception as e:\n                msg = f\"Error building {self.agent_llm} language model\"\n                raise ValueError(msg) from e\n        return self.agent_llm, None\n\n    def _build_llm_model(self, component, inputs, prefix=\"\"):\n        model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n        return component.set(**model_kwargs).build_model()\n\n    def set_component_params(self, component):\n        provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n        if provider_info:\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\")\n            model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n\n            return component.set(**model_kwargs)\n        return component\n\n    def delete_fields(self, build_config: dotdict, fields: dict | list[str]) -> None:\n        \"\"\"Delete specified fields from build_config.\"\"\"\n        for field in fields:\n            build_config.pop(field, None)\n\n    def update_input_types(self, build_config: dotdict) -> dotdict:\n        \"\"\"Update input types for all fields in build_config.\"\"\"\n        for key, value in build_config.items():\n            if isinstance(value, dict):\n                if value.get(\"input_types\") is None:\n                    build_config[key][\"input_types\"] = []\n            elif hasattr(value, \"input_types\") and value.input_types is None:\n                value.input_types = []\n        return build_config\n\n    async def update_build_config(\n        self, build_config: dotdict, field_value: str, field_name: str | None = None\n    ) -> dotdict:\n        # Iterate over all providers in the MODEL_PROVIDERS_DICT\n        # Existing logic for updating build_config\n        if field_name in (\"agent_llm\",):\n            build_config[\"agent_llm\"][\"value\"] = field_value\n            provider_info = MODEL_PROVIDERS_DICT.get(field_value)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call the component class's update_build_config method\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n\n            provider_configs: dict[str, tuple[dict, list[dict]]] = {\n                provider: (\n                    MODEL_PROVIDERS_DICT[provider][\"fields\"],\n                    [\n                        MODEL_PROVIDERS_DICT[other_provider][\"fields\"]\n                        for other_provider in MODEL_PROVIDERS_DICT\n                        if other_provider != provider\n                    ],\n                )\n                for provider in MODEL_PROVIDERS_DICT\n            }\n            if field_value in provider_configs:\n                fields_to_add, fields_to_delete = provider_configs[field_value]\n\n                # Delete fields from other providers\n                for fields in fields_to_delete:\n                    self.delete_fields(build_config, fields)\n\n                # Add provider-specific fields\n                if field_value == \"OpenAI\" and not any(field in build_config for field in fields_to_add):\n                    build_config.update(fields_to_add)\n                else:\n                    build_config.update(fields_to_add)\n                # Reset input types for agent_llm\n                build_config[\"agent_llm\"][\"input_types\"] = []\n            elif field_value == \"Custom\":\n                # Delete all provider fields\n                self.delete_fields(build_config, ALL_PROVIDER_FIELDS)\n                # Update with custom component\n                custom_component = DropdownInput(\n                    name=\"agent_llm\",\n                    display_name=\"Language Model\",\n                    options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n                    value=\"Custom\",\n                    real_time_refresh=True,\n                    input_types=[\"LanguageModel\"],\n                )\n                build_config.update({\"agent_llm\": custom_component.to_dict()})\n            # Update input types for all fields\n            build_config = self.update_input_types(build_config)\n\n            # Validate required keys\n            default_keys = [\n                \"code\",\n                \"_type\",\n                \"agent_llm\",\n                \"tools\",\n                \"input_value\",\n                \"add_current_date_tool\",\n                \"system_prompt\",\n                \"agent_description\",\n                \"max_iterations\",\n                \"handle_parsing_errors\",\n                \"verbose\",\n            ]\n            missing_keys = [key for key in default_keys if key not in build_config]\n            if missing_keys:\n                msg = f\"Missing required keys in build_config: {missing_keys}\"\n                raise ValueError(msg)\n        if (\n            isinstance(self.agent_llm, str)\n            and self.agent_llm in MODEL_PROVIDERS_DICT\n            and field_name in MODEL_DYNAMIC_UPDATE_FIELDS\n        ):\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                component_class = self.set_component_params(component_class)\n                prefix = provider_info.get(\"prefix\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call each component class's update_build_config method\n                    # remove the prefix from the field_name\n                    if isinstance(field_name, str) and isinstance(prefix, str):\n                        field_name = field_name.replace(prefix, \"\")\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n        return dotdict({k: v.to_dict() if hasattr(v, \"to_dict\") else v for k, v in build_config.items()})\n"
                                },
                                "handle_parsing_errors": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Handle Parse Errors",
                                    "dynamic": false,
                                    "info": "Should the Agent fix errors when reading user input for better processing?",
                                    "list": false,
                                    "name": "handle_parsing_errors",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "input_value": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": false,
                                    "display_name": "Input",
                                    "dynamic": false,
                                    "info": "The input provided by the user for the agent to process.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": true,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "json_mode": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "JSON Mode",
                                    "dynamic": false,
                                    "info": "If True, it will output JSON regardless of passing a schema.",
                                    "list": false,
                                    "name": "json_mode",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "max_iterations": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Max Iterations",
                                    "dynamic": false,
                                    "info": "The maximum number of attempts the agent can make to complete its task before it stops.",
                                    "list": false,
                                    "name": "max_iterations",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 15
                                },
                                "max_tokens": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Max Tokens",
                                    "dynamic": false,
                                    "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                                    "list": false,
                                    "name": "max_tokens",
                                    "placeholder": "",
                                    "range_spec": {
                                        "max": 128000,
                                        "min": 0,
                                        "step": 0.1,
                                        "step_type": "float"
                                    },
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": ""
                                },
                                "memory": {
                                    "_input_type": "HandleInput",
                                    "advanced": true,
                                    "display_name": "External Memory",
                                    "dynamic": false,
                                    "info": "Retrieve messages from an external memory. If empty, it will use the Langflow tables.",
                                    "input_types": [
                                        "Memory"
                                    ],
                                    "list": false,
                                    "name": "memory",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "other",
                                    "value": ""
                                },
                                "model_kwargs": {
                                    "_input_type": "DictInput",
                                    "advanced": true,
                                    "display_name": "Model Kwargs",
                                    "dynamic": false,
                                    "info": "Additional keyword arguments to pass to the model.",
                                    "list": false,
                                    "name": "model_kwargs",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "type": "dict",
                                    "value": {}
                                },
                                "model_name": {
                                    "_input_type": "DropdownInput",
                                    "advanced": false,
                                    "combobox": true,
                                    "display_name": "Model Name",
                                    "dynamic": false,
                                    "info": "To see the model names, first choose a provider. Then, enter your API key and click the refresh button next to the model name.",
                                    "name": "model_name",
                                    "options": [
                                        "gpt-4o-mini",
                                        "gpt-4o",
                                        "gpt-4-turbo",
                                        "gpt-4-turbo-preview",
                                        "gpt-4",
                                        "gpt-3.5-turbo",
                                        "gpt-3.5-turbo-0125"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "gpt-4o-mini"
                                },
                                "n_messages": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Number of Messages",
                                    "dynamic": false,
                                    "info": "Number of messages to retrieve.",
                                    "list": false,
                                    "name": "n_messages",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 100
                                },
                                "openai_api_base": {
                                    "_input_type": "StrInput",
                                    "advanced": true,
                                    "display_name": "OpenAI API Base",
                                    "dynamic": false,
                                    "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "openai_api_base",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "order": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Order",
                                    "dynamic": false,
                                    "info": "Order of the messages.",
                                    "name": "order",
                                    "options": [
                                        "Ascending",
                                        "Descending"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Ascending"
                                },
                                "seed": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Seed",
                                    "dynamic": false,
                                    "info": "The seed controls the reproducibility of the job.",
                                    "list": false,
                                    "name": "seed",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 1
                                },
                                "sender": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Sender Type",
                                    "dynamic": false,
                                    "info": "Filter by sender type.",
                                    "name": "sender",
                                    "options": [
                                        "Machine",
                                        "User",
                                        "Machine and User"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Machine and User"
                                },
                                "sender_name": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Sender Name",
                                    "dynamic": false,
                                    "info": "Filter by sender name.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "sender_name",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "session_id": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Session ID",
                                    "dynamic": false,
                                    "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "session_id",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "system_prompt": {
                                    "_input_type": "MultilineInput",
                                    "advanced": false,
                                    "display_name": "Agent Instructions",
                                    "dynamic": false,
                                    "info": "System Prompt: Initial instructions and context provided to guide the agent's behavior.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "system_prompt",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "You are a helpful assistant that can use tools to answer questions and perform tasks.\nUse markdown to format your answer, properly embedding images and urls."
                                },
                                "temperature": {
                                    "_input_type": "FloatInput",
                                    "advanced": true,
                                    "display_name": "Temperature",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "name": "temperature",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "float",
                                    "value": 0.1
                                },
                                "template": {
                                    "_input_type": "MultilineInput",
                                    "advanced": true,
                                    "display_name": "Template",
                                    "dynamic": false,
                                    "info": "The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "template",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "{sender_name}: {text}"
                                },
                                "tools": {
                                    "_input_type": "HandleInput",
                                    "advanced": false,
                                    "display_name": "Tools",
                                    "dynamic": false,
                                    "info": "These are the tools that the agent can use to help with tasks.",
                                    "input_types": [
                                        "Tool"
                                    ],
                                    "list": true,
                                    "name": "tools",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "other",
                                    "value": ""
                                },
                                "verbose": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Verbose",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "name": "verbose",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "Agent"
                    },
                    "dragging": false,
                    "id": "Agent-3NhNI",
                    "measured": {
                        "height": 698,
                        "width": 360
                    },
                    "position": {
                        "x": 1652.2479633316434,
                        "y": 297.9085084144251
                    },
                    "selected": true,
                    "type": "genericNode"
                },
                {
                    "data": {
                        "id": "ChatInput-Kdh0W",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Get chat inputs from the Playground.",
                            "display_name": "Chat Input",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "input_value",
                                "should_store_message",
                                "sender",
                                "sender_name",
                                "session_id",
                                "files",
                                "background_color",
                                "chat_icon",
                                "text_color"
                            ],
                            "frozen": false,
                            "icon": "MessagesSquare",
                            "legacy": false,
                            "lf_version": "1.1.1",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "message_response",
                                    "name": "message",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "background_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Background Color",
                                    "dynamic": false,
                                    "info": "The background color of the icon.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "background_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "chat_icon": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Icon",
                                    "dynamic": false,
                                    "info": "The icon of the message.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "chat_icon",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import (\n    DropdownInput,\n    FileInput,\n    MessageTextInput,\n    MultilineInput,\n    Output,\n)\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_USER,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatInput\"\n    minimized = True\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n            input_types=[],\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    async def message_response(self) -> Message:\n        background_color = self.background_color\n        text_color = self.text_color\n        icon = self.chat_icon\n\n        message = await Message.create(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n            properties={\n                \"background_color\": background_color,\n                \"text_color\": text_color,\n                \"icon\": icon,\n            },\n        )\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n"
                                },
                                "files": {
                                    "_input_type": "FileInput",
                                    "advanced": true,
                                    "display_name": "Files",
                                    "dynamic": false,
                                    "fileTypes": [
                                        "txt",
                                        "md",
                                        "mdx",
                                        "csv",
                                        "json",
                                        "yaml",
                                        "yml",
                                        "xml",
                                        "html",
                                        "htm",
                                        "pdf",
                                        "docx",
                                        "py",
                                        "sh",
                                        "sql",
                                        "js",
                                        "ts",
                                        "tsx",
                                        "jpg",
                                        "jpeg",
                                        "png",
                                        "bmp",
                                        "image"
                                    ],
                                    "file_path": "",
                                    "info": "Files to be sent with the message.",
                                    "list": true,
                                    "name": "files",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "file",
                                    "value": ""
                                },
                                "input_value": {
                                    "_input_type": "MultilineInput",
                                    "advanced": false,
                                    "display_name": "Text",
                                    "dynamic": false,
                                    "info": "Message to be passed as input.",
                                    "input_types": [],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "sender": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Sender Type",
                                    "dynamic": false,
                                    "info": "Type of sender.",
                                    "name": "sender",
                                    "options": [
                                        "Machine",
                                        "User"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "User"
                                },
                                "sender_name": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Sender Name",
                                    "dynamic": false,
                                    "info": "Name of the sender.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "sender_name",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "User"
                                },
                                "session_id": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Session ID",
                                    "dynamic": false,
                                    "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "session_id",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "should_store_message": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Store Messages",
                                    "dynamic": false,
                                    "info": "Store the message in the history.",
                                    "list": false,
                                    "name": "should_store_message",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "text_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Text Color",
                                    "dynamic": false,
                                    "info": "The text color of the name",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "text_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "ChatInput"
                    },
                    "dragging": false,
                    "id": "ChatInput-Kdh0W",
                    "measured": {
                        "height": 257,
                        "width": 360
                    },
                    "position": {
                        "x": 1241.9566260691947,
                        "y": 930.7462715570136
                    },
                    "selected": false,
                    "type": "genericNode"
                },
                {
                    "data": {
                        "description": "Display a chat message in the Playground.",
                        "display_name": "Chat Output",
                        "id": "ChatOutput-SzD3j",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Display a chat message in the Playground.",
                            "display_name": "Chat Output",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "input_value",
                                "should_store_message",
                                "sender",
                                "sender_name",
                                "session_id",
                                "data_template",
                                "background_color",
                                "chat_icon",
                                "text_color"
                            ],
                            "frozen": false,
                            "icon": "MessagesSquare",
                            "legacy": false,
                            "lf_version": "1.1.1",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "message_response",
                                    "name": "message",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "background_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Background Color",
                                    "dynamic": false,
                                    "info": "The background color of the icon.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "background_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "chat_icon": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Icon",
                                    "dynamic": false,
                                    "info": "The icon of the message.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "chat_icon",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, MessageInput, MessageTextInput, Output\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        MessageInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            source_dict[\"source\"] = source\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n        background_color = self.background_color\n        text_color = self.text_color\n        if self.chat_icon:\n            icon = self.chat_icon\n        message = self.input_value if isinstance(self.input_value, Message) else Message(text=self.input_value)\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n        message.properties.icon = icon\n        message.properties.background_color = background_color\n        message.properties.text_color = text_color\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n"
                                },
                                "data_template": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Data Template",
                                    "dynamic": false,
                                    "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "data_template",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "{text}"
                                },
                                "input_value": {
                                    "_input_type": "MessageInput",
                                    "advanced": false,
                                    "display_name": "Text",
                                    "dynamic": false,
                                    "info": "Message to be passed as output.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "sender": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Sender Type",
                                    "dynamic": false,
                                    "info": "Type of sender.",
                                    "name": "sender",
                                    "options": [
                                        "Machine",
                                        "User"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Machine"
                                },
                                "sender_name": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Sender Name",
                                    "dynamic": false,
                                    "info": "Name of the sender.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "sender_name",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "AI"
                                },
                                "session_id": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Session ID",
                                    "dynamic": false,
                                    "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "session_id",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "should_store_message": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Store Messages",
                                    "dynamic": false,
                                    "info": "Store the message in the history.",
                                    "list": false,
                                    "name": "should_store_message",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "text_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Text Color",
                                    "dynamic": false,
                                    "info": "The text color of the name",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "text_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "ChatOutput"
                    },
                    "id": "ChatOutput-SzD3j",
                    "measured": {
                        "height": 257,
                        "width": 360
                    },
                    "position": {
                        "x": 2029.726227044409,
                        "y": 521.9624030396819
                    },
                    "selected": false,
                    "type": "genericNode"
                },
                {
                    "data": {
                        "description": "Load and retrive data from specified URLs.",
                        "display_name": "URL",
                        "id": "URL-4Q2PI",
                        "node": {
                            "base_classes": [
                                "Data",
                                "DataFrame",
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Load and retrive data from specified URLs.",
                            "display_name": "URL",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "urls",
                                "format"
                            ],
                            "frozen": false,
                            "icon": "layout-template",
                            "legacy": false,
                            "metadata": {},
                            "minimized": false,
                            "output_types": [],
                            "outputs": [
                                {
                                    "cache": true,
                                    "display_name": "Toolset",
                                    "hidden": null,
                                    "method": "to_toolkit",
                                    "name": "component_as_tool",
                                    "required_inputs": null,
                                    "selected": "Tool",
                                    "types": [
                                        "Tool"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "import re\n\nfrom langchain_community.document_loaders import AsyncHtmlLoader, WebBaseLoader\n\nfrom langflow.custom import Component\nfrom langflow.helpers.data import data_to_text\nfrom langflow.io import DropdownInput, MessageTextInput, Output\nfrom langflow.schema import Data\nfrom langflow.schema.dataframe import DataFrame\nfrom langflow.schema.message import Message\n\n\nclass URLComponent(Component):\n    display_name = \"URL\"\n    description = \"Load and retrive data from specified URLs.\"\n    icon = \"layout-template\"\n    name = \"URL\"\n\n    inputs = [\n        MessageTextInput(\n            name=\"urls\",\n            display_name=\"URLs\",\n            is_list=True,\n            tool_mode=True,\n            placeholder=\"Enter a URL...\",\n            list_add_label=\"Add URL\",\n        ),\n        DropdownInput(\n            name=\"format\",\n            display_name=\"Output Format\",\n            info=\"Output Format. Use 'Text' to extract the text from the HTML or 'Raw HTML' for the raw HTML content.\",\n            options=[\"Text\", \"Raw HTML\"],\n            value=\"Text\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"fetch_content\"),\n        Output(display_name=\"Message\", name=\"text\", method=\"fetch_content_text\"),\n        Output(display_name=\"DataFrame\", name=\"dataframe\", method=\"as_dataframe\"),\n    ]\n\n    def ensure_url(self, string: str) -> str:\n        \"\"\"Ensures the given string is a URL by adding 'http://' if it doesn't start with 'http://' or 'https://'.\n\n        Raises an error if the string is not a valid URL.\n\n        Parameters:\n            string (str): The string to be checked and possibly modified.\n\n        Returns:\n            str: The modified string that is ensured to be a URL.\n\n        Raises:\n            ValueError: If the string is not a valid URL.\n        \"\"\"\n        if not string.startswith((\"http://\", \"https://\")):\n            string = \"http://\" + string\n\n        # Basic URL validation regex\n        url_regex = re.compile(\n            r\"^(https?:\\/\\/)?\"  # optional protocol\n            r\"(www\\.)?\"  # optional www\n            r\"([a-zA-Z0-9.-]+)\"  # domain\n            r\"(\\.[a-zA-Z]{2,})?\"  # top-level domain\n            r\"(:\\d+)?\"  # optional port\n            r\"(\\/[^\\s]*)?$\",  # optional path\n            re.IGNORECASE,\n        )\n\n        if not url_regex.match(string):\n            msg = f\"Invalid URL: {string}\"\n            raise ValueError(msg)\n\n        return string\n\n    def fetch_content(self) -> list[Data]:\n        urls = [self.ensure_url(url.strip()) for url in self.urls if url.strip()]\n        if self.format == \"Raw HTML\":\n            loader = AsyncHtmlLoader(web_path=urls, encoding=\"utf-8\")\n        else:\n            loader = WebBaseLoader(web_paths=urls, encoding=\"utf-8\")\n        docs = loader.load()\n        data = [Data(text=doc.page_content, **doc.metadata) for doc in docs]\n        self.status = data\n        return data\n\n    def fetch_content_text(self) -> Message:\n        data = self.fetch_content()\n\n        result_string = data_to_text(\"{text}\", data)\n        self.status = result_string\n        return Message(text=result_string)\n\n    def as_dataframe(self) -> DataFrame:\n        return DataFrame(self.fetch_content())\n"
                                },
                                "format": {
                                    "_input_type": "DropdownInput",
                                    "advanced": false,
                                    "combobox": false,
                                    "display_name": "Output Format",
                                    "dynamic": false,
                                    "info": "Output Format. Use 'Text' to extract the text from the HTML or 'Raw HTML' for the raw HTML content.",
                                    "name": "format",
                                    "options": [
                                        "Text",
                                        "Raw HTML"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Text"
                                },
                                "tools_metadata": {
                                    "_input_type": "TableInput",
                                    "advanced": false,
                                    "display_name": "Edit tools",
                                    "dynamic": false,
                                    "info": "",
                                    "is_list": true,
                                    "list_add_label": "Add More",
                                    "name": "tools_metadata",
                                    "placeholder": "",
                                    "real_time_refresh": true,
                                    "required": false,
                                    "show": true,
                                    "table_icon": "Hammer",
                                    "table_options": {
                                        "block_add": true,
                                        "block_delete": true,
                                        "block_edit": true,
                                        "block_filter": true,
                                        "block_hide": true,
                                        "block_select": true,
                                        "block_sort": true,
                                        "description": "Modify tool names and descriptions to help agents understand when to use each tool.",
                                        "field_parsers": {
                                            "commands": "commands",
                                            "name": [
                                                "snake_case",
                                                "no_blank"
                                            ]
                                        },
                                        "hide_options": true
                                    },
                                    "table_schema": {
                                        "columns": [
                                            {
                                                "description": "Specify the name of the tool.",
                                                "disable_edit": false,
                                                "display_name": "Tool Name",
                                                "edit_mode": "inline",
                                                "filterable": false,
                                                "formatter": "text",
                                                "name": "name",
                                                "sortable": false,
                                                "type": "text"
                                            },
                                            {
                                                "description": "Describe the purpose of the tool.",
                                                "disable_edit": false,
                                                "display_name": "Tool Description",
                                                "edit_mode": "popover",
                                                "filterable": false,
                                                "formatter": "text",
                                                "name": "description",
                                                "sortable": false,
                                                "type": "text"
                                            },
                                            {
                                                "description": "The default identifiers for the tools and cannot be changed.",
                                                "disable_edit": true,
                                                "display_name": "Tool Identifiers",
                                                "edit_mode": "inline",
                                                "filterable": false,
                                                "formatter": "text",
                                                "name": "tags",
                                                "sortable": false,
                                                "type": "text"
                                            }
                                        ]
                                    },
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "trigger_icon": "Hammer",
                                    "trigger_text": "",
                                    "type": "table",
                                    "value": [
                                        {
                                            "description": "fetch_content() - Load and retrive data from specified URLs.",
                                            "name": "URL-fetch_content",
                                            "tags": [
                                                "URL-fetch_content"
                                            ]
                                        },
                                        {
                                            "description": "fetch_content_text() - Load and retrive data from specified URLs.",
                                            "name": "URL-fetch_content_text",
                                            "tags": [
                                                "URL-fetch_content_text"
                                            ]
                                        },
                                        {
                                            "description": "as_dataframe() - Load and retrive data from specified URLs.",
                                            "name": "URL-as_dataframe",
                                            "tags": [
                                                "URL-as_dataframe"
                                            ]
                                        }
                                    ]
                                },
                                "urls": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": false,
                                    "display_name": "URLs",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": true,
                                    "list_add_label": "Add URL",
                                    "load_from_db": false,
                                    "name": "urls",
                                    "placeholder": "Enter a URL...",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": true,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                }
                            },
                            "tool_mode": true
                        },
                        "type": "URL"
                    },
                    "dragging": false,
                    "id": "URL-4Q2PI",
                    "measured": {
                        "height": 453,
                        "width": 360
                    },
                    "position": {
                        "x": 1225.8773509111968,
                        "y": 27.333577318641687
                    },
                    "selected": false,
                    "type": "genericNode"
                },
                {
                    "data": {
                        "id": "note-MeseW",
                        "node": {
                            "description": "# \ud83d\udcd6 README\nRun an Agent with URL and Calculator tools available for its use. \nThe Agent decides which tool to use to solve a problem.\n## Quick start\n\n1. Add your OpenAI API key to the Agent.\n2. Open the Playground and chat with the Agent. Request some information about a recipe, and then ask to add two numbers together. In the responses, the Agent will use different tools to solve different problems.\n\n## Next steps\nConnect more tools to the Agent to create your perfect assistant.\n\nFor more, see the [Langflow docs](https://docs.langflow.org/agents-tool-calling-agent-component).",
                            "display_name": "",
                            "documentation": "",
                            "template": {
                                "backgroundColor": "neutral"
                            }
                        },
                        "type": "note"
                    },
                    "dragging": false,
                    "id": "note-MeseW",
                    "measured": {
                        "height": 328,
                        "width": 328
                    },
                    "position": {
                        "x": 775.5268622081468,
                        "y": 27.927425537464444
                    },
                    "selected": false,
                    "type": "noteNode"
                },
                {
                    "data": {
                        "id": "note-yfpyo",
                        "node": {
                            "description": "### \ud83d\udca1 Add your OpenAI API key here\ud83d\udc47",
                            "display_name": "",
                            "documentation": "",
                            "template": {
                                "backgroundColor": "transparent"
                            }
                        },
                        "type": "note"
                    },
                    "id": "note-yfpyo",
                    "measured": {
                        "height": 326,
                        "width": 326
                    },
                    "position": {
                        "x": 1648.6876745095624,
                        "y": 253.8646618156497
                    },
                    "selected": false,
                    "type": "noteNode"
                },
                {
                    "data": {
                        "id": "CalculatorComponent-F89Ck",
                        "node": {
                            "base_classes": [
                                "Data"
                            ],
                            "beta": false,
                            "category": "tools",
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Perform basic arithmetic operations on a given expression.",
                            "display_name": "Calculator",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "expression"
                            ],
                            "frozen": false,
                            "icon": "calculator",
                            "key": "CalculatorComponent",
                            "legacy": false,
                            "lf_version": "1.1.1",
                            "metadata": {},
                            "minimized": false,
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Toolset",
                                    "hidden": null,
                                    "method": "to_toolkit",
                                    "name": "component_as_tool",
                                    "required_inputs": null,
                                    "selected": "Tool",
                                    "types": [
                                        "Tool"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "score": 0.001,
                            "template": {
                                "_type": "Component",
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "import ast\nimport operator\nfrom collections.abc import Callable\n\nfrom langflow.custom import Component\nfrom langflow.inputs import MessageTextInput\nfrom langflow.io import Output\nfrom langflow.schema import Data\n\n\nclass CalculatorComponent(Component):\n    display_name = \"Calculator\"\n    description = \"Perform basic arithmetic operations on a given expression.\"\n    icon = \"calculator\"\n\n    # Cache operators dictionary as a class variable\n    OPERATORS: dict[type[ast.operator], Callable] = {\n        ast.Add: operator.add,\n        ast.Sub: operator.sub,\n        ast.Mult: operator.mul,\n        ast.Div: operator.truediv,\n        ast.Pow: operator.pow,\n    }\n\n    inputs = [\n        MessageTextInput(\n            name=\"expression\",\n            display_name=\"Expression\",\n            info=\"The arithmetic expression to evaluate (e.g., '4*4*(33/22)+12-20').\",\n            tool_mode=True,\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"result\", type_=Data, method=\"evaluate_expression\"),\n    ]\n\n    def _eval_expr(self, node: ast.AST) -> float:\n        \"\"\"Evaluate an AST node recursively.\"\"\"\n        if isinstance(node, ast.Constant):\n            if isinstance(node.value, int | float):\n                return float(node.value)\n            error_msg = f\"Unsupported constant type: {type(node.value).__name__}\"\n            raise TypeError(error_msg)\n        if isinstance(node, ast.Num):  # For backwards compatibility\n            if isinstance(node.n, int | float):\n                return float(node.n)\n            error_msg = f\"Unsupported number type: {type(node.n).__name__}\"\n            raise TypeError(error_msg)\n\n        if isinstance(node, ast.BinOp):\n            op_type = type(node.op)\n            if op_type not in self.OPERATORS:\n                error_msg = f\"Unsupported binary operator: {op_type.__name__}\"\n                raise TypeError(error_msg)\n\n            left = self._eval_expr(node.left)\n            right = self._eval_expr(node.right)\n            return self.OPERATORS[op_type](left, right)\n\n        error_msg = f\"Unsupported operation or expression type: {type(node).__name__}\"\n        raise TypeError(error_msg)\n\n    def evaluate_expression(self) -> Data:\n        \"\"\"Evaluate the mathematical expression and return the result.\"\"\"\n        try:\n            tree = ast.parse(self.expression, mode=\"eval\")\n            result = self._eval_expr(tree.body)\n\n            formatted_result = f\"{float(result):.6f}\".rstrip(\"0\").rstrip(\".\")\n            self.log(f\"Calculation result: {formatted_result}\")\n\n            self.status = formatted_result\n            return Data(data={\"result\": formatted_result})\n\n        except ZeroDivisionError:\n            error_message = \"Error: Division by zero\"\n            self.status = error_message\n            return Data(data={\"error\": error_message, \"input\": self.expression})\n\n        except (SyntaxError, TypeError, KeyError, ValueError, AttributeError, OverflowError) as e:\n            error_message = f\"Invalid expression: {e!s}\"\n            self.status = error_message\n            return Data(data={\"error\": error_message, \"input\": self.expression})\n\n    def build(self):\n        \"\"\"Return the main evaluation function.\"\"\"\n        return self.evaluate_expression\n"
                                },
                                "expression": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": false,
                                    "display_name": "Expression",
                                    "dynamic": false,
                                    "info": "The arithmetic expression to evaluate (e.g., '4*4*(33/22)+12-20').",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "name": "expression",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": true,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "tools_metadata": {
                                    "_input_type": "TableInput",
                                    "advanced": false,
                                    "display_name": "Edit tools",
                                    "dynamic": false,
                                    "info": "",
                                    "is_list": true,
                                    "list_add_label": "Add More",
                                    "name": "tools_metadata",
                                    "placeholder": "",
                                    "real_time_refresh": true,
                                    "required": false,
                                    "show": true,
                                    "table_icon": "Hammer",
                                    "table_options": {
                                        "block_add": true,
                                        "block_delete": true,
                                        "block_edit": true,
                                        "block_filter": true,
                                        "block_hide": true,
                                        "block_select": true,
                                        "block_sort": true,
                                        "description": "Modify tool names and descriptions to help agents understand when to use each tool.",
                                        "field_parsers": {
                                            "commands": "commands",
                                            "name": [
                                                "snake_case",
                                                "no_blank"
                                            ]
                                        },
                                        "hide_options": true
                                    },
                                    "table_schema": {
                                        "columns": [
                                            {
                                                "description": "Specify the name of the tool.",
                                                "disable_edit": false,
                                                "display_name": "Tool Name",
                                                "edit_mode": "inline",
                                                "filterable": false,
                                                "formatter": "text",
                                                "name": "name",
                                                "sortable": false,
                                                "type": "text"
                                            },
                                            {
                                                "description": "Describe the purpose of the tool.",
                                                "disable_edit": false,
                                                "display_name": "Tool Description",
                                                "edit_mode": "popover",
                                                "filterable": false,
                                                "formatter": "text",
                                                "name": "description",
                                                "sortable": false,
                                                "type": "text"
                                            },
                                            {
                                                "description": "The default identifiers for the tools and cannot be changed.",
                                                "disable_edit": true,
                                                "display_name": "Tool Identifiers",
                                                "edit_mode": "inline",
                                                "filterable": false,
                                                "formatter": "text",
                                                "name": "tags",
                                                "sortable": false,
                                                "type": "text"
                                            }
                                        ]
                                    },
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "trigger_icon": "Hammer",
                                    "trigger_text": "",
                                    "type": "table",
                                    "value": [
                                        {
                                            "description": "evaluate_expression() - Perform basic arithmetic operations on a given expression.",
                                            "name": "None-evaluate_expression",
                                            "tags": [
                                                "None-evaluate_expression"
                                            ]
                                        }
                                    ]
                                }
                            },
                            "tool_mode": true
                        },
                        "showNode": true,
                        "type": "CalculatorComponent"
                    },
                    "dragging": false,
                    "id": "CalculatorComponent-F89Ck",
                    "measured": {
                        "height": 374,
                        "width": 360
                    },
                    "position": {
                        "x": 1233.166256931297,
                        "y": 514.7544001650839
                    },
                    "selected": false,
                    "type": "genericNode"
                }
            ],
            "viewport": {
                "x": -311.5761975342741,
                "y": 21.53149314357762,
                "zoom": 0.7039413065053529
            }
        },
        "is_component": false,
        "updated_at": "2025-01-25T04:58:25+00:00",
        "webhook": false,
        "endpoint_name": null,
        "tags": [
            "assistants",
            "agents"
        ],
        "locked": false,
        "id": "ca7db88b-3744-46dc-9862-3a980135805f",
        "user_id": null,
        "folder_id": "c54584e6-88eb-4ac0-b70c-68aee37fdce2"
    },
    {
        "name": "SEO Keyword Generator",
        "description": "Generates targeted SEO keywords based on product information, pain points, and customer profiles for strategic marketing.",
        "icon": "List",
        "icon_bg_color": null,
        "gradient": "2",
        "data": {
            "edges": [
                {
                    "data": {
                        "sourceHandle": {
                            "dataType": "Prompt",
                            "id": "Prompt-QFfcl",
                            "name": "prompt",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "system_message",
                            "id": "OpenAIModel-3mbCD",
                            "inputTypes": [
                                "Message"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "xy-edge__Prompt-QFfcl{\u0153dataType\u0153:\u0153Prompt\u0153,\u0153id\u0153:\u0153Prompt-QFfcl\u0153,\u0153name\u0153:\u0153prompt\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-OpenAIModel-3mbCD{\u0153fieldName\u0153:\u0153system_message\u0153,\u0153id\u0153:\u0153OpenAIModel-3mbCD\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "Prompt-QFfcl",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153Prompt\u0153, \u0153id\u0153: \u0153Prompt-QFfcl\u0153, \u0153name\u0153: \u0153prompt\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "OpenAIModel-3mbCD",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153system_message\u0153, \u0153id\u0153: \u0153OpenAIModel-3mbCD\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "data": {
                        "sourceHandle": {
                            "dataType": "Prompt",
                            "id": "Prompt-RpVoN",
                            "name": "prompt",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "input_value",
                            "id": "OpenAIModel-3mbCD",
                            "inputTypes": [
                                "Message"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "xy-edge__Prompt-RpVoN{\u0153dataType\u0153:\u0153Prompt\u0153,\u0153id\u0153:\u0153Prompt-RpVoN\u0153,\u0153name\u0153:\u0153prompt\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-OpenAIModel-3mbCD{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153OpenAIModel-3mbCD\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "Prompt-RpVoN",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153Prompt\u0153, \u0153id\u0153: \u0153Prompt-RpVoN\u0153, \u0153name\u0153: \u0153prompt\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "OpenAIModel-3mbCD",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153input_value\u0153, \u0153id\u0153: \u0153OpenAIModel-3mbCD\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153], \u0153type\u0153: \u0153str\u0153}"
                },
                {
                    "data": {
                        "sourceHandle": {
                            "dataType": "OpenAIModel",
                            "id": "OpenAIModel-3mbCD",
                            "name": "text_output",
                            "output_types": [
                                "Message"
                            ]
                        },
                        "targetHandle": {
                            "fieldName": "input_value",
                            "id": "ChatOutput-vBbvi",
                            "inputTypes": [
                                "Message"
                            ],
                            "type": "str"
                        }
                    },
                    "id": "xy-edge__OpenAIModel-3mbCD{\u0153dataType\u0153:\u0153OpenAIModel\u0153,\u0153id\u0153:\u0153OpenAIModel-3mbCD\u0153,\u0153name\u0153:\u0153text_output\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-ChatOutput-vBbvi{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153ChatOutput-vBbvi\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "source": "OpenAIModel-3mbCD",
                    "sourceHandle": "{\u0153dataType\u0153: \u0153OpenAIModel\u0153, \u0153id\u0153: \u0153OpenAIModel-3mbCD\u0153, \u0153name\u0153: \u0153text_output\u0153, \u0153output_types\u0153: [\u0153Message\u0153]}",
                    "target": "ChatOutput-vBbvi",
                    "targetHandle": "{\u0153fieldName\u0153: \u0153input_value\u0153, \u0153id\u0153: \u0153ChatOutput-vBbvi\u0153, \u0153inputTypes\u0153: [\u0153Message\u0153], \u0153type\u0153: \u0153str\u0153}"
                }
            ],
            "nodes": [
                {
                    "data": {
                        "description": "Create a prompt template with dynamic variables.",
                        "display_name": "Prompt",
                        "id": "Prompt-RpVoN",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {
                                "template": [
                                    "product",
                                    "pain_points",
                                    "goals",
                                    "current_solutions",
                                    "target_audience",
                                    "expertise_level"
                                ]
                            },
                            "description": "Create a prompt template with dynamic variables.",
                            "display_name": "Prompt",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "template"
                            ],
                            "frozen": false,
                            "icon": "prompts",
                            "legacy": false,
                            "lf_version": "1.0.19.post2",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Prompt Message",
                                    "method": "build_prompt",
                                    "name": "prompt",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import MessageTextInput, Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            tool_mode=True,\n            advanced=True,\n            info=\"A placeholder input for tool mode.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    async def update_frontend_node(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = await super().update_frontend_node(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n"
                                },
                                "current_solutions": {
                                    "advanced": false,
                                    "display_name": "current_solutions",
                                    "dynamic": false,
                                    "field_type": "str",
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "input_types": [
                                        "Message",
                                        "Text"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "current_solutions",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": "- Basic website blockers\n- Manual \"Do Not Disturb\" modes\n- Traditional time management apps\n- Paper planners and to-do lists\n- Pomodoro timer apps\n- Calendar blocking\n"
                                },
                                "expertise_level": {
                                    "advanced": false,
                                    "display_name": "expertise_level",
                                    "dynamic": false,
                                    "field_type": "str",
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "input_types": [
                                        "Message",
                                        "Text"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "expertise_level",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": "Intermediate to Advanced - Users are familiar with basic productivity tools and concepts but seek more sophisticated solutions. They understand terms like \"deep work\" and \"time blocking\" and are comfortable adopting new technology that promises meaningful improvements to their workflow."
                                },
                                "goals": {
                                    "advanced": false,
                                    "display_name": "goals",
                                    "dynamic": false,
                                    "field_type": "str",
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "input_types": [
                                        "Message",
                                        "Text"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "goals",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": "- Achieve longer periods of uninterrupted focus\n- Improve work efficiency and output quality\n- Develop sustainable productivity habits\n- Better manage time and energy levels\n- Reduce stress from digital overwhelm\n- Create more balanced workdays"
                                },
                                "pain_points": {
                                    "advanced": false,
                                    "display_name": "pain_points",
                                    "dynamic": false,
                                    "field_type": "str",
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "input_types": [
                                        "Message",
                                        "Text"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "pain_points",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": "- Constant interruptions from notifications and social media\n- Difficulty maintaining sustained focus during deep work\n- Inconsistent productivity levels throughout the day\n- Struggle to build effective work routines\n- Time wasted switching between tasks\n- Burnout from poor work-life balance\n"
                                },
                                "product": {
                                    "advanced": false,
                                    "display_name": "product",
                                    "dynamic": false,
                                    "field_type": "str",
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "input_types": [
                                        "Message",
                                        "Text"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "product",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": "FocusFlow - An AI-powered productivity app that automatically detects and blocks digital distractions while learning from user behavior to create personalized focus schedules. Features include smart notification management, work pattern analysis, and adaptive focus modes."
                                },
                                "target_audience": {
                                    "advanced": false,
                                    "display_name": "target_audience",
                                    "dynamic": false,
                                    "field_type": "str",
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "input_types": [
                                        "Message",
                                        "Text"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "target_audience",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": "Knowledge workers aged 25-45, primarily working in tech, creative, or professional services. They are tech-savvy professionals who work remotely or in hybrid settings, earning $75,000+ annually. They value work-life balance and are willing to invest in tools that boost their productivity. Many are active on LinkedIn and tech-focused platforms, regularly consuming content about personal development and productivity."
                                },
                                "template": {
                                    "_input_type": "PromptInput",
                                    "advanced": false,
                                    "display_name": "Template",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "template",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "type": "prompt",
                                    "value": "Product:\n{product}\n \nPain Points:\n{pain_points}\n \nGoals:\n{goals}\n \nCurrent Solutions:\n{current_solutions}\n \nSpecific Target Audience:\n{target_audience}\n\nExpertise Level:\n{expertise_level}\n"
                                },
                                "tool_placeholder": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Tool Placeholder",
                                    "dynamic": false,
                                    "info": "A placeholder input for tool mode.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "tool_placeholder",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": true,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "Prompt"
                    },
                    "dragging": false,
                    "height": 779,
                    "id": "Prompt-RpVoN",
                    "measured": {
                        "height": 779,
                        "width": 360
                    },
                    "position": {
                        "x": 816.9328565352126,
                        "y": 189.70442453076902
                    },
                    "positionAbsolute": {
                        "x": 816.9328565352126,
                        "y": 189.70442453076902
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "id": "note-bzlUs",
                        "node": {
                            "description": "# SEO Keyword Generator\nWelcome to the SEO Keywords Generator - an AI tool to create strategic keywords based on your product and audience profile!\n\n## Instructions\n\n1. **Fill Product Information**\n   - Enter your product name and description\n   - Keep it clear and specific\n   - Highlight unique features and benefits\n\n2. **Define Pain Points**\n   - List customer problems and challenges\n   - Be specific about what frustrations they face\n   - Include both practical and emotional pain points\n\n3. **Set Goals & Solutions**\n   - Specify customer objectives\n   - Detail how they currently solve problems\n   - Outline desired outcomes\n\n4. **Target Audience Details**\n   - Define demographics and characteristics\n   - Include expertise level\n   - Describe behavior patterns and preferences\n\n5. **Review Output**\n   - Examine generated keywords\n   - Check relevance and search intent\n   - Use insights for SEO strategy planning\n\nRemember: The more detailed your input, the more targeted and effective your keywords will be! \ud83c\udfaf\ud83d\udd0d\u2728",
                            "display_name": "",
                            "documentation": "",
                            "template": {}
                        },
                        "type": "note"
                    },
                    "dragging": false,
                    "height": 607,
                    "id": "note-bzlUs",
                    "measured": {
                        "height": 607,
                        "width": 328
                    },
                    "position": {
                        "x": 221.74248905040588,
                        "y": 363.5469410934121
                    },
                    "positionAbsolute": {
                        "x": 221.74248905040588,
                        "y": 363.5469410934121
                    },
                    "resizing": false,
                    "selected": false,
                    "style": {
                        "height": 607,
                        "width": 489
                    },
                    "type": "noteNode",
                    "width": 489
                },
                {
                    "data": {
                        "description": "Create a prompt template with dynamic variables.",
                        "display_name": "Prompt",
                        "id": "Prompt-QFfcl",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {
                                "template": []
                            },
                            "description": "Create a prompt template with dynamic variables.",
                            "display_name": "Prompt",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "template"
                            ],
                            "frozen": false,
                            "icon": "prompts",
                            "legacy": false,
                            "lf_version": "1.0.19.post2",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Prompt Message",
                                    "method": "build_prompt",
                                    "name": "prompt",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import MessageTextInput, Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            tool_mode=True,\n            advanced=True,\n            info=\"A placeholder input for tool mode.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    async def update_frontend_node(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = await super().update_frontend_node(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n"
                                },
                                "template": {
                                    "_input_type": "PromptInput",
                                    "advanced": false,
                                    "display_name": "Template",
                                    "dynamic": false,
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "template",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "type": "prompt",
                                    "value": "You are a digital marketing strategist specialized in generating highly relevant, optimized keywords for a product\u2019s specific target audience. Your task is to create a list of keywords that are not only attractive and impactful but also resonate with the needs and desires of the customers, capturing the core motivations driving them to seek a solution.\n\nBelow are details about the product, including its target audience, the pain points faced by this audience, and the current solutions they consider or use. Use this information to generate precise keywords that connect directly with the unique value of the product and with the customers' goals. Consider factors like the customer\u2019s level of expertise and major market trends to create a powerful and well-grounded keyword list.\n\n### Product Information:\n- **Product:** \u2013 A brief description of the product, including what sets it apart in the market.\n- **Customer Pain Points:** \u2013 Specific pain points that the audience faces and that the product aims to address.\n- **Customer Goals:** \u2013 The primary goals and aspirations of the target audience that the product helps to achieve.\n- **Current Solutions Used:** \u2013 How the audience currently tries to address these pain points, including competitor solutions or alternatives.\n- **Specific Target Audience:** \u2013 A detailed description of the target audience, including demographics, interests, lifestyle, and behavioral profile.\n- **Customer Expertise Level:**\u2013 The level of familiarity or experience the audience has with similar or related solutions.\n\n### Guidelines for Keyword Generation:\n1. **Focus on Pain Points and Solutions**: Generate keywords that accurately reflect the customers\u2019 pain points, clearly conveying how the product offers an effective and unique solution.\n2. **Emphasize Goals and Benefits**: Highlight keywords aligned with customer goals, emphasizing the positive impact and achievable results of the product.\n3. **Consider Competition and Differentiators**: Think about existing solutions and how the product stands out. Create keywords that emphasize differentiators and help the product stand out in a competitive landscape.\n4. **Tailor to Target Audience**: Use terms and phrases that resonate directly with the target audience\u2019s profile, utilizing language and themes most appealing to this segment.\n5. **Customize to Expertise Level**: Adjust the complexity of the keywords according to the audience\u2019s experience level, ensuring they are appealing and accessible.\n6. **Incorporate Market Trends**: Where possible, include keywords that reflect the latest trends in the sector, increasing the content\u2019s relevance and timeliness.\n\n### Example Keyword Suggestions:\n- **For customer pain points:**  \u2013 Use keywords that reinforce customer pain points, making it clear how the product can be a solution.\n- **For goals and aspirations:**  \u2013 Keywords that symbolize the outcomes and goals desired by customers, such as \u2018stress relief,\u2019 \u2018productivity boost.\u2019\n- **For product differentiators:** \u2013 Keywords that contrast the product with current solutions, highlighting its unique advantages.\n\nFor each keyword generated, provide a brief explanation of how it connects with the product details and the target audience, ensuring the final list is powerful, strategic, and well-founded for maximum market impact."
                                },
                                "tool_placeholder": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Tool Placeholder",
                                    "dynamic": false,
                                    "info": "A placeholder input for tool mode.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "tool_placeholder",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": true,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "Prompt"
                    },
                    "dragging": false,
                    "height": 260,
                    "id": "Prompt-QFfcl",
                    "measured": {
                        "height": 260,
                        "width": 360
                    },
                    "position": {
                        "x": 813.5727530934735,
                        "y": 991.0702563306074
                    },
                    "positionAbsolute": {
                        "x": 813.5727530934735,
                        "y": 991.0702563306074
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "description": "Display a chat message in the Playground.",
                        "display_name": "Chat Output",
                        "id": "ChatOutput-vBbvi",
                        "node": {
                            "base_classes": [
                                "Message"
                            ],
                            "beta": false,
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Display a chat message in the Playground.",
                            "display_name": "Chat Output",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "input_value",
                                "should_store_message",
                                "sender",
                                "sender_name",
                                "session_id",
                                "data_template",
                                "background_color",
                                "chat_icon",
                                "text_color"
                            ],
                            "frozen": false,
                            "icon": "MessagesSquare",
                            "legacy": false,
                            "lf_version": "1.0.19.post2",
                            "metadata": {},
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "message_response",
                                    "name": "message",
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "template": {
                                "_type": "Component",
                                "background_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Background Color",
                                    "dynamic": false,
                                    "info": "The background color of the icon.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "background_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "chat_icon": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Icon",
                                    "dynamic": false,
                                    "info": "The icon of the message.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "chat_icon",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, MessageInput, MessageTextInput, Output\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        MessageInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            source_dict[\"source\"] = source\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n        background_color = self.background_color\n        text_color = self.text_color\n        if self.chat_icon:\n            icon = self.chat_icon\n        message = self.input_value if isinstance(self.input_value, Message) else Message(text=self.input_value)\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n        message.properties.icon = icon\n        message.properties.background_color = background_color\n        message.properties.text_color = text_color\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n"
                                },
                                "data_template": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Data Template",
                                    "dynamic": false,
                                    "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "data_template",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "{text}"
                                },
                                "input_value": {
                                    "_input_type": "MessageInput",
                                    "advanced": false,
                                    "display_name": "Text",
                                    "dynamic": false,
                                    "info": "Message to be passed as output.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "sender": {
                                    "_input_type": "DropdownInput",
                                    "advanced": true,
                                    "combobox": false,
                                    "display_name": "Sender Type",
                                    "dynamic": false,
                                    "info": "Type of sender.",
                                    "name": "sender",
                                    "options": [
                                        "Machine",
                                        "User"
                                    ],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "Machine"
                                },
                                "sender_name": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Sender Name",
                                    "dynamic": false,
                                    "info": "Name of the sender.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "sender_name",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "AI"
                                },
                                "session_id": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Session ID",
                                    "dynamic": false,
                                    "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "session_id",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "should_store_message": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "Store Messages",
                                    "dynamic": false,
                                    "info": "Store the message in the history.",
                                    "list": false,
                                    "name": "should_store_message",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": true
                                },
                                "text_color": {
                                    "_input_type": "MessageTextInput",
                                    "advanced": true,
                                    "display_name": "Text Color",
                                    "dynamic": false,
                                    "info": "The text color of the name",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "load_from_db": false,
                                    "name": "text_color",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                }
                            },
                            "tool_mode": false
                        },
                        "type": "ChatOutput"
                    },
                    "dragging": false,
                    "height": 234,
                    "id": "ChatOutput-vBbvi",
                    "measured": {
                        "height": 234,
                        "width": 360
                    },
                    "position": {
                        "x": 1598.2529634286327,
                        "y": 623.4799714496987
                    },
                    "positionAbsolute": {
                        "x": 1598.2529634286327,
                        "y": 623.4799714496987
                    },
                    "selected": false,
                    "type": "genericNode",
                    "width": 320
                },
                {
                    "data": {
                        "id": "note-BWTHt",
                        "node": {
                            "description": "## Make sure to add your OpenAI API key from [platform.openai.com](https://platform.openai.com). ",
                            "display_name": "",
                            "documentation": "",
                            "template": {}
                        },
                        "type": "note"
                    },
                    "dragging": false,
                    "height": 325,
                    "id": "note-BWTHt",
                    "measured": {
                        "height": 325,
                        "width": 328
                    },
                    "position": {
                        "x": 1207.1996899547116,
                        "y": 260.0148704431837
                    },
                    "positionAbsolute": {
                        "x": 1207.1996899547116,
                        "y": 260.0148704431837
                    },
                    "selected": false,
                    "type": "noteNode",
                    "width": 325
                },
                {
                    "data": {
                        "id": "OpenAIModel-3mbCD",
                        "node": {
                            "base_classes": [
                                "LanguageModel",
                                "Message"
                            ],
                            "beta": false,
                            "category": "models",
                            "conditional_paths": [],
                            "custom_fields": {},
                            "description": "Generates text using OpenAI LLMs.",
                            "display_name": "OpenAI",
                            "documentation": "",
                            "edited": false,
                            "field_order": [
                                "input_value",
                                "system_message",
                                "stream",
                                "max_tokens",
                                "model_kwargs",
                                "json_mode",
                                "model_name",
                                "openai_api_base",
                                "api_key",
                                "temperature",
                                "seed"
                            ],
                            "frozen": false,
                            "icon": "OpenAI",
                            "key": "OpenAIModel",
                            "legacy": false,
                            "metadata": {},
                            "minimized": false,
                            "output_types": [],
                            "outputs": [
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Message",
                                    "method": "text_response",
                                    "name": "text_output",
                                    "required_inputs": [],
                                    "selected": "Message",
                                    "types": [
                                        "Message"
                                    ],
                                    "value": "__UNDEFINED__"
                                },
                                {
                                    "allows_loop": false,
                                    "cache": true,
                                    "display_name": "Language Model",
                                    "method": "build_model",
                                    "name": "model_output",
                                    "required_inputs": [
                                        "api_key"
                                    ],
                                    "selected": "LanguageModel",
                                    "types": [
                                        "LanguageModel"
                                    ],
                                    "value": "__UNDEFINED__"
                                }
                            ],
                            "pinned": false,
                            "score": 2.220446049250313e-16,
                            "template": {
                                "_type": "Component",
                                "api_key": {
                                    "_input_type": "SecretStrInput",
                                    "advanced": false,
                                    "display_name": "OpenAI API Key",
                                    "dynamic": false,
                                    "info": "The OpenAI API Key to use for the OpenAI model.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "load_from_db": true,
                                    "name": "api_key",
                                    "password": true,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "str",
                                    "value": "OPENAI_API_KEY"
                                },
                                "code": {
                                    "advanced": true,
                                    "dynamic": true,
                                    "fileTypes": [],
                                    "file_path": "",
                                    "info": "",
                                    "list": false,
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "code",
                                    "password": false,
                                    "placeholder": "",
                                    "required": true,
                                    "show": true,
                                    "title_case": false,
                                    "type": "code",
                                    "value": "from langchain_openai import ChatOpenAI\nfrom pydantic.v1 import SecretStr\n\nfrom langflow.base.models.model import LCModelComponent\nfrom langflow.base.models.openai_constants import OPENAI_MODEL_NAMES\nfrom langflow.field_typing import LanguageModel\nfrom langflow.field_typing.range_spec import RangeSpec\nfrom langflow.inputs import BoolInput, DictInput, DropdownInput, IntInput, SecretStrInput, SliderInput, StrInput\n\n\nclass OpenAIModelComponent(LCModelComponent):\n    display_name = \"OpenAI\"\n    description = \"Generates text using OpenAI LLMs.\"\n    icon = \"OpenAI\"\n    name = \"OpenAIModel\"\n\n    inputs = [\n        *LCModelComponent._base_inputs,\n        IntInput(\n            name=\"max_tokens\",\n            display_name=\"Max Tokens\",\n            advanced=True,\n            info=\"The maximum number of tokens to generate. Set to 0 for unlimited tokens.\",\n            range_spec=RangeSpec(min=0, max=128000),\n        ),\n        DictInput(\n            name=\"model_kwargs\",\n            display_name=\"Model Kwargs\",\n            advanced=True,\n            info=\"Additional keyword arguments to pass to the model.\",\n        ),\n        BoolInput(\n            name=\"json_mode\",\n            display_name=\"JSON Mode\",\n            advanced=True,\n            info=\"If True, it will output JSON regardless of passing a schema.\",\n        ),\n        DropdownInput(\n            name=\"model_name\",\n            display_name=\"Model Name\",\n            advanced=False,\n            options=OPENAI_MODEL_NAMES,\n            value=OPENAI_MODEL_NAMES[0],\n        ),\n        StrInput(\n            name=\"openai_api_base\",\n            display_name=\"OpenAI API Base\",\n            advanced=True,\n            info=\"The base URL of the OpenAI API. \"\n            \"Defaults to https://api.openai.com/v1. \"\n            \"You can change this to use other APIs like JinaChat, LocalAI and Prem.\",\n        ),\n        SecretStrInput(\n            name=\"api_key\",\n            display_name=\"OpenAI API Key\",\n            info=\"The OpenAI API Key to use for the OpenAI model.\",\n            advanced=False,\n            value=\"OPENAI_API_KEY\",\n            required=True,\n        ),\n        SliderInput(\n            name=\"temperature\", display_name=\"Temperature\", value=0.1, range_spec=RangeSpec(min=0, max=2, step=0.01)\n        ),\n        IntInput(\n            name=\"seed\",\n            display_name=\"Seed\",\n            info=\"The seed controls the reproducibility of the job.\",\n            advanced=True,\n            value=1,\n        ),\n    ]\n\n    def build_model(self) -> LanguageModel:  # type: ignore[type-var]\n        openai_api_key = self.api_key\n        temperature = self.temperature\n        model_name: str = self.model_name\n        max_tokens = self.max_tokens\n        model_kwargs = self.model_kwargs or {}\n        openai_api_base = self.openai_api_base or \"https://api.openai.com/v1\"\n        json_mode = self.json_mode\n        seed = self.seed\n\n        api_key = SecretStr(openai_api_key).get_secret_value() if openai_api_key else None\n        output = ChatOpenAI(\n            max_tokens=max_tokens or None,\n            model_kwargs=model_kwargs,\n            model=model_name,\n            base_url=openai_api_base,\n            api_key=api_key,\n            temperature=temperature if temperature is not None else 0.1,\n            seed=seed,\n        )\n        if json_mode:\n            output = output.bind(response_format={\"type\": \"json_object\"})\n\n        return output\n\n    def _get_exception_message(self, e: Exception):\n        \"\"\"Get a message from an OpenAI exception.\n\n        Args:\n            e (Exception): The exception to get the message from.\n\n        Returns:\n            str: The message from the exception.\n        \"\"\"\n        try:\n            from openai import BadRequestError\n        except ImportError:\n            return None\n        if isinstance(e, BadRequestError):\n            message = e.body.get(\"message\")\n            if message:\n                return message\n        return None\n"
                                },
                                "input_value": {
                                    "_input_type": "MessageInput",
                                    "advanced": false,
                                    "display_name": "Input",
                                    "dynamic": false,
                                    "info": "",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "name": "input_value",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "json_mode": {
                                    "_input_type": "BoolInput",
                                    "advanced": true,
                                    "display_name": "JSON Mode",
                                    "dynamic": false,
                                    "info": "If True, it will output JSON regardless of passing a schema.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "json_mode",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "max_tokens": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Max Tokens",
                                    "dynamic": false,
                                    "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "max_tokens",
                                    "placeholder": "",
                                    "range_spec": {
                                        "max": 128000,
                                        "min": 0,
                                        "step": 0.1,
                                        "step_type": "float"
                                    },
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": ""
                                },
                                "model_kwargs": {
                                    "_input_type": "DictInput",
                                    "advanced": true,
                                    "display_name": "Model Kwargs",
                                    "dynamic": false,
                                    "info": "Additional keyword arguments to pass to the model.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "model_kwargs",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "type": "dict",
                                    "value": {}
                                },
                                "model_name": {
                                    "_input_type": "DropdownInput",
                                    "advanced": false,
                                    "combobox": false,
                                    "dialog_inputs": {},
                                    "display_name": "Model Name",
                                    "dynamic": false,
                                    "info": "",
                                    "name": "model_name",
                                    "options": [
                                        "gpt-4o-mini",
                                        "gpt-4o",
                                        "gpt-4-turbo",
                                        "gpt-4-turbo-preview",
                                        "gpt-4",
                                        "gpt-3.5-turbo",
                                        "gpt-3.5-turbo-0125"
                                    ],
                                    "options_metadata": [],
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": "gpt-4o-mini"
                                },
                                "openai_api_base": {
                                    "_input_type": "StrInput",
                                    "advanced": true,
                                    "display_name": "OpenAI API Base",
                                    "dynamic": false,
                                    "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "name": "openai_api_base",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "seed": {
                                    "_input_type": "IntInput",
                                    "advanced": true,
                                    "display_name": "Seed",
                                    "dynamic": false,
                                    "info": "The seed controls the reproducibility of the job.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "seed",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "int",
                                    "value": 1
                                },
                                "stream": {
                                    "_input_type": "BoolInput",
                                    "advanced": false,
                                    "display_name": "Stream",
                                    "dynamic": false,
                                    "info": "Stream the response from the model. Streaming works only in Chat.",
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "name": "stream",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "type": "bool",
                                    "value": false
                                },
                                "system_message": {
                                    "_input_type": "MultilineInput",
                                    "advanced": false,
                                    "display_name": "System Message",
                                    "dynamic": false,
                                    "info": "System message to pass to the model.",
                                    "input_types": [
                                        "Message"
                                    ],
                                    "list": false,
                                    "list_add_label": "Add More",
                                    "load_from_db": false,
                                    "multiline": true,
                                    "name": "system_message",
                                    "placeholder": "",
                                    "required": false,
                                    "show": true,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "type": "str",
                                    "value": ""
                                },
                                "temperature": {
                                    "_input_type": "SliderInput",
                                    "advanced": false,
                                    "display_name": "Temperature",
                                    "dynamic": false,
                                    "info": "",
                                    "max_label": "",
                                    "max_label_icon": "",
                                    "min_label": "",
                                    "min_label_icon": "",
                                    "name": "temperature",
                                    "placeholder": "",
                                    "range_spec": {
                                        "max": 2,
                                        "min": 0,
                                        "step": 0.01,
                                        "step_type": "float"
                                    },
                                    "required": false,
                                    "show": true,
                                    "slider_buttons": false,
                                    "slider_buttons_options": [],
                                    "slider_input": false,
                                    "title_case": false,
                                    "tool_mode": false,
                                    "type": "slider",
                                    "value": 0.1
                                }
                            },
                            "tool_mode": false
                        },
                        "showNode": true,
                        "type": "OpenAIModel"
                    },
                    "dragging": false,
                    "id": "OpenAIModel-3mbCD",
                    "measured": {
                        "height": 734,
                        "width": 360
                    },
                    "position": {
                        "x": 1211.6745177781336,
                        "y": 389.1200512413449
                    },
                    "selected": false,
                    "type": "genericNode"
                }
            ],
            "viewport": {
                "x": -34.95262355945238,
                "y": -104.978464862529,
                "zoom": 0.7683067619311971
            }
        },
        "is_component": false,
        "updated_at": "2025-01-25T04:58:25+00:00",
        "webhook": false,
        "endpoint_name": null,
        "tags": [
            "chatbots",
            "assistants"
        ],
        "locked": false,
        "id": "e4845a5d-eebc-4378-8b20-7492ead6ff7d",
        "user_id": null,
        "folder_id": "c54584e6-88eb-4ac0-b70c-68aee37fdce2"
    },
    {
        "name": "teste 1",
        "description": "Navigate the Linguistic Landscape, Discover Opportunities.",
        "icon": null,
        "icon_bg_color": null,
        "gradient": null,
        "data": {
            "nodes": [
                {
                    "id": "ChatInput-XI3oz",
                    "type": "genericNode",
                    "position": {
                        "x": 390.5,
                        "y": 174.5
                    },
                    "data": {
                        "node": {
                            "template": {
                                "_type": "Component",
                                "files": {
                                    "trace_as_metadata": true,
                                    "file_path": "",
                                    "fileTypes": [
                                        "txt",
                                        "md",
                                        "mdx",
                                        "csv",
                                        "json",
                                        "yaml",
                                        "yml",
                                        "xml",
                                        "html",
                                        "htm",
                                        "pdf",
                                        "docx",
                                        "py",
                                        "sh",
                                        "sql",
                                        "js",
                                        "ts",
                                        "tsx",
                                        "jpg",
                                        "jpeg",
                                        "png",
                                        "bmp",
                                        "image"
                                    ],
                                    "list": true,
                                    "required": false,
                                    "placeholder": "",
                                    "show": true,
                                    "name": "files",
                                    "value": "",
                                    "display_name": "Files",
                                    "advanced": true,
                                    "dynamic": false,
                                    "info": "Files to be sent with the message.",
                                    "title_case": false,
                                    "type": "file",
                                    "_input_type": "FileInput"
                                },
                                "background_color": {
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "load_from_db": false,
                                    "list": false,
                                    "required": false,
                                    "placeholder": "",
                                    "show": true,
                                    "name": "background_color",
                                    "value": "",
                                    "display_name": "Background Color",
                                    "advanced": true,
                                    "input_types": [
                                        "Message"
                                    ],
                                    "dynamic": false,
                                    "info": "The background color of the icon.",
                                    "title_case": false,
                                    "type": "str",
                                    "_input_type": "MessageTextInput"
                                },
                                "chat_icon": {
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "load_from_db": false,
                                    "list": false,
                                    "required": false,
                                    "placeholder": "",
                                    "show": true,
                                    "name": "chat_icon",
                                    "value": "",
                                    "display_name": "Icon",
                                    "advanced": true,
                                    "input_types": [
                                        "Message"
                                    ],
                                    "dynamic": false,
                                    "info": "The icon of the message.",
                                    "title_case": false,
                                    "type": "str",
                                    "_input_type": "MessageTextInput"
                                },
                                "code": {
                                    "type": "code",
                                    "required": true,
                                    "placeholder": "",
                                    "list": false,
                                    "show": true,
                                    "multiline": true,
                                    "value": "from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, FileInput, MessageTextInput, MultilineInput, Output\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_NAME_USER, MESSAGE_SENDER_USER\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        _background_color = self.background_color\n        _text_color = self.text_color\n        _icon = self.chat_icon\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n            properties={\"background_color\": _background_color, \"text_color\": _text_color, \"icon\": _icon},\n        )\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n",
                                    "fileTypes": [],
                                    "file_path": "",
                                    "password": false,
                                    "name": "code",
                                    "advanced": true,
                                    "dynamic": true,
                                    "info": "",
                                    "load_from_db": false,
                                    "title_case": false
                                },
                                "input_value": {
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "multiline": true,
                                    "trace_as_metadata": true,
                                    "load_from_db": false,
                                    "list": false,
                                    "required": false,
                                    "placeholder": "",
                                    "show": true,
                                    "name": "input_value",
                                    "value": "",
                                    "display_name": "Text",
                                    "advanced": false,
                                    "input_types": [
                                        "Message"
                                    ],
                                    "dynamic": false,
                                    "info": "Message to be passed as input.",
                                    "title_case": false,
                                    "type": "str",
                                    "_input_type": "MultilineInput"
                                },
                                "sender": {
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "options": [
                                        "Machine",
                                        "User"
                                    ],
                                    "combobox": false,
                                    "required": false,
                                    "placeholder": "",
                                    "show": true,
                                    "name": "sender",
                                    "value": "User",
                                    "display_name": "Sender Type",
                                    "advanced": true,
                                    "dynamic": false,
                                    "info": "Type of sender.",
                                    "title_case": false,
                                    "type": "str",
                                    "_input_type": "DropdownInput"
                                },
                                "sender_name": {
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "load_from_db": false,
                                    "list": false,
                                    "required": false,
                                    "placeholder": "",
                                    "show": true,
                                    "name": "sender_name",
                                    "value": "User",
                                    "display_name": "Sender Name",
                                    "advanced": true,
                                    "input_types": [
                                        "Message"
                                    ],
                                    "dynamic": false,
                                    "info": "Name of the sender.",
                                    "title_case": false,
                                    "type": "str",
                                    "_input_type": "MessageTextInput"
                                },
                                "session_id": {
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "load_from_db": false,
                                    "list": false,
                                    "required": false,
                                    "placeholder": "",
                                    "show": true,
                                    "name": "session_id",
                                    "value": "",
                                    "display_name": "Session ID",
                                    "advanced": true,
                                    "input_types": [
                                        "Message"
                                    ],
                                    "dynamic": false,
                                    "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                    "title_case": false,
                                    "type": "str",
                                    "_input_type": "MessageTextInput"
                                },
                                "should_store_message": {
                                    "trace_as_metadata": true,
                                    "list": false,
                                    "required": false,
                                    "placeholder": "",
                                    "show": true,
                                    "name": "should_store_message",
                                    "value": true,
                                    "display_name": "Store Messages",
                                    "advanced": true,
                                    "dynamic": false,
                                    "info": "Store the message in the history.",
                                    "title_case": false,
                                    "type": "bool",
                                    "_input_type": "BoolInput"
                                },
                                "text_color": {
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "load_from_db": false,
                                    "list": false,
                                    "required": false,
                                    "placeholder": "",
                                    "show": true,
                                    "name": "text_color",
                                    "value": "",
                                    "display_name": "Text Color",
                                    "advanced": true,
                                    "input_types": [
                                        "Message"
                                    ],
                                    "dynamic": false,
                                    "info": "The text color of the name",
                                    "title_case": false,
                                    "type": "str",
                                    "_input_type": "MessageTextInput"
                                }
                            },
                            "description": "Get chat inputs from the Playground.",
                            "icon": "MessagesSquare",
                            "base_classes": [
                                "Message"
                            ],
                            "display_name": "Chat Input",
                            "documentation": "",
                            "custom_fields": {},
                            "output_types": [],
                            "pinned": false,
                            "conditional_paths": [],
                            "frozen": false,
                            "outputs": [
                                {
                                    "types": [
                                        "Message"
                                    ],
                                    "selected": "Message",
                                    "name": "message",
                                    "display_name": "Message",
                                    "method": "message_response",
                                    "value": "__UNDEFINED__",
                                    "cache": true
                                }
                            ],
                            "field_order": [
                                "input_value",
                                "should_store_message",
                                "sender",
                                "sender_name",
                                "session_id",
                                "files",
                                "background_color",
                                "chat_icon",
                                "text_color"
                            ],
                            "beta": false,
                            "legacy": false,
                            "edited": false,
                            "metadata": {},
                            "tool_mode": false,
                            "category": "inputs",
                            "key": "ChatInput",
                            "score": 0.0020353564437605998
                        },
                        "type": "ChatInput",
                        "id": "ChatInput-XI3oz"
                    },
                    "selected": false,
                    "width": 320,
                    "height": 231
                },
                {
                    "id": "ChatOutput-TVHJr",
                    "type": "genericNode",
                    "position": {
                        "x": 796.5,
                        "y": 139.5
                    },
                    "data": {
                        "node": {
                            "template": {
                                "_type": "Component",
                                "background_color": {
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "load_from_db": false,
                                    "list": false,
                                    "required": false,
                                    "placeholder": "",
                                    "show": true,
                                    "name": "background_color",
                                    "value": "",
                                    "display_name": "Background Color",
                                    "advanced": true,
                                    "input_types": [
                                        "Message"
                                    ],
                                    "dynamic": false,
                                    "info": "The background color of the icon.",
                                    "title_case": false,
                                    "type": "str",
                                    "_input_type": "MessageTextInput"
                                },
                                "chat_icon": {
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "load_from_db": false,
                                    "list": false,
                                    "required": false,
                                    "placeholder": "",
                                    "show": true,
                                    "name": "chat_icon",
                                    "value": "",
                                    "display_name": "Icon",
                                    "advanced": true,
                                    "input_types": [
                                        "Message"
                                    ],
                                    "dynamic": false,
                                    "info": "The icon of the message.",
                                    "title_case": false,
                                    "type": "str",
                                    "_input_type": "MessageTextInput"
                                },
                                "code": {
                                    "type": "code",
                                    "required": true,
                                    "placeholder": "",
                                    "list": false,
                                    "show": true,
                                    "multiline": true,
                                    "value": "from langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, MessageInput, MessageTextInput, Output\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_NAME_AI, MESSAGE_SENDER_USER\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n\n    inputs = [\n        MessageInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, _id: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if _id:\n            source_dict[\"id\"] = _id\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            source_dict[\"source\"] = source\n        return Source(**source_dict)\n\n    def message_response(self) -> Message:\n        _source, _icon, _display_name, _source_id = self.get_properties_from_source_component()\n        _background_color = self.background_color\n        _text_color = self.text_color\n        if self.chat_icon:\n            _icon = self.chat_icon\n        message = self.input_value if isinstance(self.input_value, Message) else Message(text=self.input_value)\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(_source_id, _display_name, _source)\n        message.properties.icon = _icon\n        message.properties.background_color = _background_color\n        message.properties.text_color = _text_color\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n",
                                    "fileTypes": [],
                                    "file_path": "",
                                    "password": false,
                                    "name": "code",
                                    "advanced": true,
                                    "dynamic": true,
                                    "info": "",
                                    "load_from_db": false,
                                    "title_case": false
                                },
                                "data_template": {
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "load_from_db": false,
                                    "list": false,
                                    "required": false,
                                    "placeholder": "",
                                    "show": true,
                                    "name": "data_template",
                                    "value": "{text}",
                                    "display_name": "Data Template",
                                    "advanced": true,
                                    "input_types": [
                                        "Message"
                                    ],
                                    "dynamic": false,
                                    "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                                    "title_case": false,
                                    "type": "str",
                                    "_input_type": "MessageTextInput"
                                },
                                "input_value": {
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "load_from_db": false,
                                    "list": false,
                                    "required": false,
                                    "placeholder": "",
                                    "show": true,
                                    "name": "input_value",
                                    "value": "",
                                    "display_name": "Text",
                                    "advanced": false,
                                    "input_types": [
                                        "Message"
                                    ],
                                    "dynamic": false,
                                    "info": "Message to be passed as output.",
                                    "title_case": false,
                                    "type": "str",
                                    "_input_type": "MessageInput"
                                },
                                "sender": {
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "options": [
                                        "Machine",
                                        "User"
                                    ],
                                    "combobox": false,
                                    "required": false,
                                    "placeholder": "",
                                    "show": true,
                                    "name": "sender",
                                    "value": "Machine",
                                    "display_name": "Sender Type",
                                    "advanced": true,
                                    "dynamic": false,
                                    "info": "Type of sender.",
                                    "title_case": false,
                                    "type": "str",
                                    "_input_type": "DropdownInput"
                                },
                                "sender_name": {
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "load_from_db": false,
                                    "list": false,
                                    "required": false,
                                    "placeholder": "",
                                    "show": true,
                                    "name": "sender_name",
                                    "value": "AI",
                                    "display_name": "Sender Name",
                                    "advanced": true,
                                    "input_types": [
                                        "Message"
                                    ],
                                    "dynamic": false,
                                    "info": "Name of the sender.",
                                    "title_case": false,
                                    "type": "str",
                                    "_input_type": "MessageTextInput"
                                },
                                "session_id": {
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "load_from_db": false,
                                    "list": false,
                                    "required": false,
                                    "placeholder": "",
                                    "show": true,
                                    "name": "session_id",
                                    "value": "",
                                    "display_name": "Session ID",
                                    "advanced": true,
                                    "input_types": [
                                        "Message"
                                    ],
                                    "dynamic": false,
                                    "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                    "title_case": false,
                                    "type": "str",
                                    "_input_type": "MessageTextInput"
                                },
                                "should_store_message": {
                                    "trace_as_metadata": true,
                                    "list": false,
                                    "required": false,
                                    "placeholder": "",
                                    "show": true,
                                    "name": "should_store_message",
                                    "value": true,
                                    "display_name": "Store Messages",
                                    "advanced": true,
                                    "dynamic": false,
                                    "info": "Store the message in the history.",
                                    "title_case": false,
                                    "type": "bool",
                                    "_input_type": "BoolInput"
                                },
                                "text_color": {
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "load_from_db": false,
                                    "list": false,
                                    "required": false,
                                    "placeholder": "",
                                    "show": true,
                                    "name": "text_color",
                                    "value": "",
                                    "display_name": "Text Color",
                                    "advanced": true,
                                    "input_types": [
                                        "Message"
                                    ],
                                    "dynamic": false,
                                    "info": "The text color of the name",
                                    "title_case": false,
                                    "type": "str",
                                    "_input_type": "MessageTextInput"
                                }
                            },
                            "description": "Display a chat message in the Playground.",
                            "icon": "MessagesSquare",
                            "base_classes": [
                                "Message"
                            ],
                            "display_name": "Chat Output",
                            "documentation": "",
                            "custom_fields": {},
                            "output_types": [],
                            "pinned": false,
                            "conditional_paths": [],
                            "frozen": false,
                            "outputs": [
                                {
                                    "types": [
                                        "Message"
                                    ],
                                    "selected": "Message",
                                    "name": "message",
                                    "display_name": "Message",
                                    "method": "message_response",
                                    "value": "__UNDEFINED__",
                                    "cache": true
                                }
                            ],
                            "field_order": [
                                "input_value",
                                "should_store_message",
                                "sender",
                                "sender_name",
                                "session_id",
                                "data_template",
                                "background_color",
                                "chat_icon",
                                "text_color"
                            ],
                            "beta": false,
                            "legacy": false,
                            "edited": false,
                            "metadata": {},
                            "tool_mode": false,
                            "category": "outputs",
                            "key": "ChatOutput",
                            "score": 0.003169567463043492
                        },
                        "type": "ChatOutput",
                        "id": "ChatOutput-TVHJr"
                    },
                    "selected": true,
                    "width": 320,
                    "height": 232,
                    "positionAbsolute": {
                        "x": 796.5,
                        "y": 139.5
                    },
                    "dragging": false
                }
            ],
            "edges": [
                {
                    "source": "ChatInput-XI3oz",
                    "sourceHandle": "{\u0153dataType\u0153:\u0153ChatInput\u0153,\u0153id\u0153:\u0153ChatInput-XI3oz\u0153,\u0153name\u0153:\u0153message\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}",
                    "target": "ChatOutput-TVHJr",
                    "targetHandle": "{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153ChatOutput-TVHJr\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "data": {
                        "targetHandle": {
                            "fieldName": "input_value",
                            "id": "ChatOutput-TVHJr",
                            "inputTypes": [
                                "Message"
                            ],
                            "type": "str"
                        },
                        "sourceHandle": {
                            "dataType": "ChatInput",
                            "id": "ChatInput-XI3oz",
                            "name": "message",
                            "output_types": [
                                "Message"
                            ]
                        }
                    },
                    "id": "reactflow__edge-ChatInput-XI3oz{\u0153dataType\u0153:\u0153ChatInput\u0153,\u0153id\u0153:\u0153ChatInput-XI3oz\u0153,\u0153name\u0153:\u0153message\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-ChatOutput-TVHJr{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153ChatOutput-TVHJr\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}"
                }
            ],
            "viewport": {
                "x": 0,
                "y": 0,
                "zoom": 1
            }
        },
        "is_component": false,
        "updated_at": "2025-01-25T03:50:34+00:00",
        "webhook": false,
        "endpoint_name": null,
        "tags": null,
        "locked": null,
        "id": "c33e7b65-3996-4c64-9a7e-f2c1046b49eb",
        "user_id": "b670cab2-5e35-4dc1-a08d-6d3158f701f2",
        "folder_id": "f4c008f0-a572-4c41-a760-f07870e5069b"
    },
    {
        "name": "AUTOMAGIK_CHECK",
        "description": "Connect the Dots, Craft Language.",
        "icon": null,
        "icon_bg_color": null,
        "gradient": null,
        "data": {
            "nodes": [
                {
                    "id": "ChatInput-IuuKo",
                    "type": "genericNode",
                    "position": {
                        "x": 36.5,
                        "y": 120
                    },
                    "data": {
                        "node": {
                            "template": {
                                "_type": "Component",
                                "files": {
                                    "trace_as_metadata": true,
                                    "file_path": "",
                                    "fileTypes": [
                                        "txt",
                                        "md",
                                        "mdx",
                                        "csv",
                                        "json",
                                        "yaml",
                                        "yml",
                                        "xml",
                                        "html",
                                        "htm",
                                        "pdf",
                                        "docx",
                                        "py",
                                        "sh",
                                        "sql",
                                        "js",
                                        "ts",
                                        "tsx",
                                        "jpg",
                                        "jpeg",
                                        "png",
                                        "bmp",
                                        "image"
                                    ],
                                    "list": true,
                                    "required": false,
                                    "placeholder": "",
                                    "show": true,
                                    "name": "files",
                                    "value": "",
                                    "display_name": "Files",
                                    "advanced": true,
                                    "dynamic": false,
                                    "info": "Files to be sent with the message.",
                                    "title_case": false,
                                    "type": "file",
                                    "_input_type": "FileInput"
                                },
                                "background_color": {
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "load_from_db": false,
                                    "list": false,
                                    "required": false,
                                    "placeholder": "",
                                    "show": true,
                                    "name": "background_color",
                                    "value": "",
                                    "display_name": "Background Color",
                                    "advanced": true,
                                    "input_types": [
                                        "Message"
                                    ],
                                    "dynamic": false,
                                    "info": "The background color of the icon.",
                                    "title_case": false,
                                    "type": "str",
                                    "_input_type": "MessageTextInput"
                                },
                                "chat_icon": {
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "load_from_db": false,
                                    "list": false,
                                    "required": false,
                                    "placeholder": "",
                                    "show": true,
                                    "name": "chat_icon",
                                    "value": "",
                                    "display_name": "Icon",
                                    "advanced": true,
                                    "input_types": [
                                        "Message"
                                    ],
                                    "dynamic": false,
                                    "info": "The icon of the message.",
                                    "title_case": false,
                                    "type": "str",
                                    "_input_type": "MessageTextInput"
                                },
                                "code": {
                                    "type": "code",
                                    "required": true,
                                    "placeholder": "",
                                    "list": false,
                                    "show": true,
                                    "multiline": true,
                                    "value": "from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, FileInput, MessageTextInput, MultilineInput, Output\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_NAME_USER, MESSAGE_SENDER_USER\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatInput\"\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    def message_response(self) -> Message:\n        _background_color = self.background_color\n        _text_color = self.text_color\n        _icon = self.chat_icon\n        message = Message(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n            properties={\"background_color\": _background_color, \"text_color\": _text_color, \"icon\": _icon},\n        )\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n",
                                    "fileTypes": [],
                                    "file_path": "",
                                    "password": false,
                                    "name": "code",
                                    "advanced": true,
                                    "dynamic": true,
                                    "info": "",
                                    "load_from_db": false,
                                    "title_case": false
                                },
                                "input_value": {
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "multiline": true,
                                    "trace_as_metadata": true,
                                    "load_from_db": false,
                                    "list": false,
                                    "required": false,
                                    "placeholder": "",
                                    "show": true,
                                    "name": "input_value",
                                    "value": "",
                                    "display_name": "Text",
                                    "advanced": false,
                                    "input_types": [
                                        "Message"
                                    ],
                                    "dynamic": false,
                                    "info": "Message to be passed as input.",
                                    "title_case": false,
                                    "type": "str",
                                    "_input_type": "MultilineInput"
                                },
                                "sender": {
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "options": [
                                        "Machine",
                                        "User"
                                    ],
                                    "combobox": false,
                                    "required": false,
                                    "placeholder": "",
                                    "show": true,
                                    "name": "sender",
                                    "value": "User",
                                    "display_name": "Sender Type",
                                    "advanced": true,
                                    "dynamic": false,
                                    "info": "Type of sender.",
                                    "title_case": false,
                                    "type": "str",
                                    "_input_type": "DropdownInput"
                                },
                                "sender_name": {
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "load_from_db": false,
                                    "list": false,
                                    "required": false,
                                    "placeholder": "",
                                    "show": true,
                                    "name": "sender_name",
                                    "value": "User",
                                    "display_name": "Sender Name",
                                    "advanced": true,
                                    "input_types": [
                                        "Message"
                                    ],
                                    "dynamic": false,
                                    "info": "Name of the sender.",
                                    "title_case": false,
                                    "type": "str",
                                    "_input_type": "MessageTextInput"
                                },
                                "session_id": {
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "load_from_db": false,
                                    "list": false,
                                    "required": false,
                                    "placeholder": "",
                                    "show": true,
                                    "name": "session_id",
                                    "value": "",
                                    "display_name": "Session ID",
                                    "advanced": true,
                                    "input_types": [
                                        "Message"
                                    ],
                                    "dynamic": false,
                                    "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                    "title_case": false,
                                    "type": "str",
                                    "_input_type": "MessageTextInput"
                                },
                                "should_store_message": {
                                    "trace_as_metadata": true,
                                    "list": false,
                                    "required": false,
                                    "placeholder": "",
                                    "show": true,
                                    "name": "should_store_message",
                                    "value": true,
                                    "display_name": "Store Messages",
                                    "advanced": true,
                                    "dynamic": false,
                                    "info": "Store the message in the history.",
                                    "title_case": false,
                                    "type": "bool",
                                    "_input_type": "BoolInput"
                                },
                                "text_color": {
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "load_from_db": false,
                                    "list": false,
                                    "required": false,
                                    "placeholder": "",
                                    "show": true,
                                    "name": "text_color",
                                    "value": "",
                                    "display_name": "Text Color",
                                    "advanced": true,
                                    "input_types": [
                                        "Message"
                                    ],
                                    "dynamic": false,
                                    "info": "The text color of the name",
                                    "title_case": false,
                                    "type": "str",
                                    "_input_type": "MessageTextInput"
                                }
                            },
                            "description": "Get chat inputs from the Playground.",
                            "icon": "MessagesSquare",
                            "base_classes": [
                                "Message"
                            ],
                            "display_name": "Chat Input",
                            "documentation": "",
                            "custom_fields": {},
                            "output_types": [],
                            "pinned": false,
                            "conditional_paths": [],
                            "frozen": false,
                            "outputs": [
                                {
                                    "types": [
                                        "Message"
                                    ],
                                    "selected": "Message",
                                    "name": "message",
                                    "display_name": "Message",
                                    "method": "message_response",
                                    "value": "__UNDEFINED__",
                                    "cache": true
                                }
                            ],
                            "field_order": [
                                "input_value",
                                "should_store_message",
                                "sender",
                                "sender_name",
                                "session_id",
                                "files",
                                "background_color",
                                "chat_icon",
                                "text_color"
                            ],
                            "beta": false,
                            "legacy": false,
                            "edited": false,
                            "metadata": {},
                            "tool_mode": false,
                            "category": "inputs",
                            "key": "ChatInput",
                            "score": 0.0020353564437605998
                        },
                        "type": "ChatInput",
                        "id": "ChatInput-IuuKo"
                    },
                    "selected": false,
                    "width": 320,
                    "height": 231,
                    "dragging": false,
                    "positionAbsolute": {
                        "x": 36.5,
                        "y": 120
                    }
                },
                {
                    "id": "ChatOutput-L5nPI",
                    "type": "genericNode",
                    "position": {
                        "x": 578.5,
                        "y": 97
                    },
                    "data": {
                        "node": {
                            "template": {
                                "_type": "Component",
                                "background_color": {
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "load_from_db": false,
                                    "list": false,
                                    "required": false,
                                    "placeholder": "",
                                    "show": true,
                                    "name": "background_color",
                                    "value": "",
                                    "display_name": "Background Color",
                                    "advanced": true,
                                    "input_types": [
                                        "Message"
                                    ],
                                    "dynamic": false,
                                    "info": "The background color of the icon.",
                                    "title_case": false,
                                    "type": "str",
                                    "_input_type": "MessageTextInput"
                                },
                                "chat_icon": {
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "load_from_db": false,
                                    "list": false,
                                    "required": false,
                                    "placeholder": "",
                                    "show": true,
                                    "name": "chat_icon",
                                    "value": "",
                                    "display_name": "Icon",
                                    "advanced": true,
                                    "input_types": [
                                        "Message"
                                    ],
                                    "dynamic": false,
                                    "info": "The icon of the message.",
                                    "title_case": false,
                                    "type": "str",
                                    "_input_type": "MessageTextInput"
                                },
                                "code": {
                                    "type": "code",
                                    "required": true,
                                    "placeholder": "",
                                    "list": false,
                                    "show": true,
                                    "multiline": true,
                                    "value": "from langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, MessageInput, MessageTextInput, Output\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.utils.constants import MESSAGE_SENDER_AI, MESSAGE_SENDER_NAME_AI, MESSAGE_SENDER_USER\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n\n    inputs = [\n        MessageInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, _id: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if _id:\n            source_dict[\"id\"] = _id\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            source_dict[\"source\"] = source\n        return Source(**source_dict)\n\n    def message_response(self) -> Message:\n        _source, _icon, _display_name, _source_id = self.get_properties_from_source_component()\n        _background_color = self.background_color\n        _text_color = self.text_color\n        if self.chat_icon:\n            _icon = self.chat_icon\n        message = self.input_value if isinstance(self.input_value, Message) else Message(text=self.input_value)\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(_source_id, _display_name, _source)\n        message.properties.icon = _icon\n        message.properties.background_color = _background_color\n        message.properties.text_color = _text_color\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n",
                                    "fileTypes": [],
                                    "file_path": "",
                                    "password": false,
                                    "name": "code",
                                    "advanced": true,
                                    "dynamic": true,
                                    "info": "",
                                    "load_from_db": false,
                                    "title_case": false
                                },
                                "data_template": {
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "load_from_db": false,
                                    "list": false,
                                    "required": false,
                                    "placeholder": "",
                                    "show": true,
                                    "name": "data_template",
                                    "value": "{text}",
                                    "display_name": "Data Template",
                                    "advanced": true,
                                    "input_types": [
                                        "Message"
                                    ],
                                    "dynamic": false,
                                    "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                                    "title_case": false,
                                    "type": "str",
                                    "_input_type": "MessageTextInput"
                                },
                                "input_value": {
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "load_from_db": false,
                                    "list": false,
                                    "required": false,
                                    "placeholder": "",
                                    "show": true,
                                    "name": "input_value",
                                    "value": "",
                                    "display_name": "Text",
                                    "advanced": false,
                                    "input_types": [
                                        "Message"
                                    ],
                                    "dynamic": false,
                                    "info": "Message to be passed as output.",
                                    "title_case": false,
                                    "type": "str",
                                    "_input_type": "MessageInput"
                                },
                                "sender": {
                                    "tool_mode": false,
                                    "trace_as_metadata": true,
                                    "options": [
                                        "Machine",
                                        "User"
                                    ],
                                    "combobox": false,
                                    "required": false,
                                    "placeholder": "",
                                    "show": true,
                                    "name": "sender",
                                    "value": "Machine",
                                    "display_name": "Sender Type",
                                    "advanced": true,
                                    "dynamic": false,
                                    "info": "Type of sender.",
                                    "title_case": false,
                                    "type": "str",
                                    "_input_type": "DropdownInput"
                                },
                                "sender_name": {
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "load_from_db": false,
                                    "list": false,
                                    "required": false,
                                    "placeholder": "",
                                    "show": true,
                                    "name": "sender_name",
                                    "value": "AI",
                                    "display_name": "Sender Name",
                                    "advanced": true,
                                    "input_types": [
                                        "Message"
                                    ],
                                    "dynamic": false,
                                    "info": "Name of the sender.",
                                    "title_case": false,
                                    "type": "str",
                                    "_input_type": "MessageTextInput"
                                },
                                "session_id": {
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "load_from_db": false,
                                    "list": false,
                                    "required": false,
                                    "placeholder": "",
                                    "show": true,
                                    "name": "session_id",
                                    "value": "",
                                    "display_name": "Session ID",
                                    "advanced": true,
                                    "input_types": [
                                        "Message"
                                    ],
                                    "dynamic": false,
                                    "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                                    "title_case": false,
                                    "type": "str",
                                    "_input_type": "MessageTextInput"
                                },
                                "should_store_message": {
                                    "trace_as_metadata": true,
                                    "list": false,
                                    "required": false,
                                    "placeholder": "",
                                    "show": true,
                                    "name": "should_store_message",
                                    "value": true,
                                    "display_name": "Store Messages",
                                    "advanced": true,
                                    "dynamic": false,
                                    "info": "Store the message in the history.",
                                    "title_case": false,
                                    "type": "bool",
                                    "_input_type": "BoolInput"
                                },
                                "text_color": {
                                    "tool_mode": false,
                                    "trace_as_input": true,
                                    "trace_as_metadata": true,
                                    "load_from_db": false,
                                    "list": false,
                                    "required": false,
                                    "placeholder": "",
                                    "show": true,
                                    "name": "text_color",
                                    "value": "",
                                    "display_name": "Text Color",
                                    "advanced": true,
                                    "input_types": [
                                        "Message"
                                    ],
                                    "dynamic": false,
                                    "info": "The text color of the name",
                                    "title_case": false,
                                    "type": "str",
                                    "_input_type": "MessageTextInput"
                                }
                            },
                            "description": "Display a chat message in the Playground.",
                            "icon": "MessagesSquare",
                            "base_classes": [
                                "Message"
                            ],
                            "display_name": "Chat Output",
                            "documentation": "",
                            "custom_fields": {},
                            "output_types": [],
                            "pinned": false,
                            "conditional_paths": [],
                            "frozen": false,
                            "outputs": [
                                {
                                    "types": [
                                        "Message"
                                    ],
                                    "selected": "Message",
                                    "name": "message",
                                    "display_name": "Message",
                                    "method": "message_response",
                                    "value": "__UNDEFINED__",
                                    "cache": true
                                }
                            ],
                            "field_order": [
                                "input_value",
                                "should_store_message",
                                "sender",
                                "sender_name",
                                "session_id",
                                "data_template",
                                "background_color",
                                "chat_icon",
                                "text_color"
                            ],
                            "beta": false,
                            "legacy": false,
                            "edited": false,
                            "metadata": {},
                            "tool_mode": false,
                            "category": "outputs",
                            "key": "ChatOutput",
                            "score": 0.007568328950209746
                        },
                        "type": "ChatOutput",
                        "id": "ChatOutput-L5nPI"
                    },
                    "selected": false,
                    "width": 320,
                    "height": 232,
                    "positionAbsolute": {
                        "x": 578.5,
                        "y": 97
                    },
                    "dragging": false
                }
            ],
            "edges": [
                {
                    "source": "ChatInput-IuuKo",
                    "sourceHandle": "{\u0153dataType\u0153:\u0153ChatInput\u0153,\u0153id\u0153:\u0153ChatInput-IuuKo\u0153,\u0153name\u0153:\u0153message\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}",
                    "target": "ChatOutput-L5nPI",
                    "targetHandle": "{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153ChatOutput-L5nPI\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "data": {
                        "targetHandle": {
                            "fieldName": "input_value",
                            "id": "ChatOutput-L5nPI",
                            "inputTypes": [
                                "Message"
                            ],
                            "type": "str"
                        },
                        "sourceHandle": {
                            "dataType": "ChatInput",
                            "id": "ChatInput-IuuKo",
                            "name": "message",
                            "output_types": [
                                "Message"
                            ]
                        }
                    },
                    "id": "reactflow__edge-ChatInput-IuuKo{\u0153dataType\u0153:\u0153ChatInput\u0153,\u0153id\u0153:\u0153ChatInput-IuuKo\u0153,\u0153name\u0153:\u0153message\u0153,\u0153output_types\u0153:[\u0153Message\u0153]}-ChatOutput-L5nPI{\u0153fieldName\u0153:\u0153input_value\u0153,\u0153id\u0153:\u0153ChatOutput-L5nPI\u0153,\u0153inputTypes\u0153:[\u0153Message\u0153],\u0153type\u0153:\u0153str\u0153}",
                    "className": "",
                    "selected": false
                }
            ],
            "viewport": {
                "x": 0,
                "y": 0,
                "zoom": 1
            }
        },
        "is_component": false,
        "updated_at": "2025-01-25T03:50:43+00:00",
        "webhook": false,
        "endpoint_name": null,
        "tags": null,
        "locked": null,
        "id": "83738ff8-d6db-469d-b73c-654629104edd",
        "user_id": "b670cab2-5e35-4dc1-a08d-6d3158f701f2",
        "folder_id": "ab97ebfc-b240-4e24-8186-50318c6c3df6"
    }
]
