"""add flow components table

Revision ID: 3af7c6f910c2
Revises: 
Create Date: 2025-01-07 14:20:26.770083

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '3af7c6f910c2'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def check_constraint_exists(conn, table_name, constraint_name):
    """Check if a constraint exists in the database."""
    result = conn.execute(
        sa.text(
            """
            SELECT constraint_name FROM information_schema.table_constraints
            WHERE table_name = :table_name
            AND constraint_name = :constraint_name
            """
        ),
        {"table_name": table_name, "constraint_name": constraint_name}
    )
    return bool(result.scalar())


def check_table_exists(conn, table_name):
    """Check if a table exists in the database."""
    result = conn.execute(
        sa.text(
            """
            SELECT EXISTS (
                SELECT FROM information_schema.tables 
                WHERE table_name = :table_name
            )
            """
        ),
        {"table_name": table_name}
    )
    return bool(result.scalar())


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    conn = op.get_bind()
    
    # First, clean up all existing data
    conn.execute(sa.text('TRUNCATE TABLE logs CASCADE'))
    conn.execute(sa.text('TRUNCATE TABLE tasks CASCADE'))
    conn.execute(sa.text('TRUNCATE TABLE schedules CASCADE'))
    conn.execute(sa.text('TRUNCATE TABLE agents CASCADE'))
    conn.execute(sa.text('TRUNCATE TABLE flows CASCADE'))
    
    # Drop unused tables if they exist
    if check_table_exists(conn, 'memory'):
        op.drop_table('memory')
    if check_table_exists(conn, 'agents'):
        op.drop_table('agents')
    
    # Create flow_components table
    op.create_table('flow_components',
        sa.Column('id', sa.UUID(), nullable=False),
        sa.Column('flow_id', sa.UUID(), nullable=False),
        sa.Column('component_id', sa.String(), nullable=False),
        sa.Column('type', sa.String(), nullable=False),
        sa.Column('template', sa.JSON(), nullable=True),
        sa.Column('tweakable_params', sa.ARRAY(sa.String()), nullable=True),
        sa.Column('is_input', sa.Boolean(), nullable=True),
        sa.Column('is_output', sa.Boolean(), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=True),
        sa.Column('updated_at', sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(['flow_id'], ['flows.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    
    # Add input/output component columns to flows
    op.add_column('flows', sa.Column('input_component', sa.String(), nullable=True))
    op.add_column('flows', sa.Column('output_component', sa.String(), nullable=True))
    
    # Update tasks to reference flows directly
    op.add_column('tasks', sa.Column('flow_id', sa.UUID(), nullable=True))
    op.create_foreign_key(None, 'tasks', 'flows', ['flow_id'], ['id'])
    
    # Drop agent-related constraints if they exist
    if check_constraint_exists(conn, 'tasks', 'tasks_agent_id_fkey'):
        op.drop_constraint('tasks_agent_id_fkey', 'tasks', type_='foreignkey')
    if check_constraint_exists(conn, 'schedules', 'schedules_agent_id_fkey'):
        op.drop_constraint('schedules_agent_id_fkey', 'schedules', type_='foreignkey')
    
    # Drop agent-related columns
    op.drop_column('tasks', 'agent_id')
    op.drop_column('schedules', 'agent_id')
    
    # Make task fields nullable for flexibility
    op.alter_column('tasks', 'input_data',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               nullable=True)
    op.alter_column('tasks', 'output_data',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               nullable=True)
    op.alter_column('tasks', 'tries',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('tasks', 'max_retries',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('tasks', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('tasks', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    
    # Make timestamps nullable
    op.alter_column('schedules', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('schedules', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop new columns from flows
    op.drop_column('flows', 'input_component')
    op.drop_column('flows', 'output_component')
    
    # Add back old columns to flows
    op.add_column('flows', sa.Column('user_id', sa.String(), nullable=True))
    op.add_column('flows', sa.Column('folder_id', sa.String(), nullable=True))
    op.add_column('flows', sa.Column('folder_name', sa.String(), nullable=True))
    
    # Recreate agents table
    op.create_table('agents',
        sa.Column('id', sa.UUID(), nullable=False),
        sa.Column('name', sa.String(), nullable=False),
        sa.Column('flow_id', sa.UUID(), nullable=False),
        sa.Column('input_component', sa.String(), nullable=False),
        sa.Column('output_component', sa.String(), nullable=False),
        sa.Column('is_active', sa.Boolean(), nullable=True),
        sa.ForeignKeyConstraint(['flow_id'], ['flows.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    
    # Restore agent references in tasks and schedules
    op.add_column('tasks', sa.Column('agent_id', sa.UUID(), nullable=True))
    op.create_foreign_key('tasks_agent_id_fkey', 'tasks', 'agents', ['agent_id'], ['id'])
    op.drop_constraint(None, 'tasks', type_='foreignkey')
    op.drop_column('tasks', 'flow_id')
    
    op.add_column('schedules', sa.Column('agent_id', sa.UUID(), nullable=True))
    op.create_foreign_key('schedules_agent_id_fkey', 'schedules', 'agents', ['agent_id'], ['id'])
    op.drop_constraint(None, 'schedules', type_='foreignkey')
    op.drop_column('schedules', 'flow_id')
    
    # Drop flow components table
    op.drop_table('flow_components')
    
    # Recreate memory table
    op.create_table('memory',
        sa.Column('id', sa.UUID(), nullable=False),
        sa.Column('key', sa.String(), nullable=False),
        sa.Column('value', sa.TEXT(), nullable=True),
        sa.Column('created_at', sa.DateTime(), nullable=False),
        sa.Column('updated_at', sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###
